gplink-0.14.2 #774 (Oct 23 2012)
Copyright (c) 1998-2012 gputils project
Listing File Generated: 12-11-2012  18:11:44
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.2.1 #8163 (Oct 23 2012) (Linux)
                                           ; This file was generated Tue Dec 11 18:11:43 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46j50
                                           	radix	dec
                                           	CONFIG	PLLDIV=5
                                           	CONFIG	CPUDIV=OSC1
                                           	CONFIG	OSC=HSPLL
                                           	CONFIG	WDTEN=OFF
                                           	CONFIG	STVREN=ON
                                           	CONFIG	XINST=OFF
                                           	CONFIG	CP0=OFF
                                           	CONFIG	IESO=OFF
                                           	CONFIG	FCMEN=OFF
                                           	CONFIG	LPT1OSC=OFF
                                           	CONFIG	T1DIG=ON
                                           	CONFIG	WDTPS=32768
                                           	CONFIG	DSWDTPS=8192
                                           	CONFIG	DSWDTEN=OFF
                                           	CONFIG	DSBOREN=OFF
                                           	CONFIG	RTCOSC=T1OSCREF
                                           	CONFIG	DSWDTOSC=INTOSCREF
                                           	CONFIG	MSSP7B_EN=MSK7
                                           	CONFIG	IOL1WAY=OFF
                                           	CONFIG	WPCFG=OFF
                                           	CONFIG	WPEND=PAGE_0
                                           	CONFIG	WPFP=PAGE_1
                                           	CONFIG	WPDIS=OFF
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_delay
                                           	global	_start_write
                                           	global	_disable_boot
                                           	global	_usb_configure_endpoints
                                           	global	_usb_ep_data_out_callback
                                           	global	_main
                                           	global	_high_priority_isr
                                           	global	_low_priority_isr
                                           	global	_device_descriptor
                                           	global	_configuration_descriptor
                                           	global	_lang
                                           	global	_manu
                                           	global	_prod
                                           	global	_string_descriptor
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_PPSCONbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_UIEbits
                                           	extern	_UEIEbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_PADCFG1bits
                                           	extern	_REFOCONbits
                                           	extern	_RTCCALbits
                                           	extern	_RTCCFGbits
                                           	extern	_ODCON3bits
                                           	extern	_ODCON2bits
                                           	extern	_ODCON1bits
                                           	extern	_ANCON0bits
                                           	extern	_ANCON1bits
                                           	extern	_DSWAKELbits
                                           	extern	_DSWAKEHbits
                                           	extern	_DSCONLbits
                                           	extern	_DSCONHbits
                                           	extern	_TCLKCONbits
                                           	extern	_CVRCONbits
                                           	extern	_PMSTATLbits
                                           	extern	_PMSTATHbits
                                           	extern	_PMELbits
                                           	extern	_PMEHbits
                                           	extern	_PMMODELbits
                                           	extern	_PMMODEHbits
                                           	extern	_PMCONLbits
                                           	extern	_PMCONHbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UEIRbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_PMADDRHbits
                                           	extern	_CMSTATbits
                                           	extern	_CMSTATUSbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_SSP2ADDbits
                                           	extern	_T4CONbits
                                           	extern	_T3CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_HLVDCONbits
                                           	extern	_DMACON2bits
                                           	extern	_DMACON1bits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_ALRMRPTbits
                                           	extern	_ALRMCFGbits
                                           	extern	_TRISAbits
                                           	extern	_TRISBbits
                                           	extern	_TRISCbits
                                           	extern	_TRISDbits
                                           	extern	_TRISEbits
                                           	extern	_T3GCONbits
                                           	extern	_T1GCONbits
                                           	extern	_OSCTUNEbits
                                           	extern	_RCSTA2bits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_TXSTA2bits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCONHbits
                                           	extern	_CCP2CONbits
                                           	extern	_ECCP2CONbits
                                           	extern	_ECCP2DELbits
                                           	extern	_PWM2CONbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ECCP1DELbits
                                           	extern	_PWM1CONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PSTR1CONbits
                                           	extern	_WDTCONbits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1ADDbits
                                           	extern	_SSPADDbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON1bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_SetupPacket
                                           	extern	_controlTransferBuffer
                                           	extern	_bootCmd
                                           	extern	_outPtr
                                           	extern	_inPtr
                                           	extern	_wCount
                                           	extern	_deviceState
                                           	extern	_selfPowered
                                           	extern	_currentConfiguration
                                           	extern	_ep_bdt
                                           	extern	_RPOR0
                                           	extern	_RPOR1
                                           	extern	_RPOR2
                                           	extern	_RPOR3
                                           	extern	_RPOR4
                                           	extern	_RPOR5
                                           	extern	_RPOR6
                                           	extern	_RPOR7
                                           	extern	_RPOR8
                                           	extern	_RPOR9
                                           	extern	_RPOR10
                                           	extern	_RPOR11
                                           	extern	_RPOR12
                                           	extern	_RPOR13
                                           	extern	_RPOR17
                                           	extern	_RPOR18
                                           	extern	_RPOR19
                                           	extern	_RPOR20
                                           	extern	_RPOR21
                                           	extern	_RPOR22
                                           	extern	_RPOR23
                                           	extern	_RPOR24
                                           	extern	_RPINR1
                                           	extern	_RPINR2
                                           	extern	_RPINR3
                                           	extern	_RPINR4
                                           	extern	_RPINR6
                                           	extern	_RPINR7
                                           	extern	_RPINR8
                                           	extern	_RPINR12
                                           	extern	_RPINR13
                                           	extern	_RPINR16
                                           	extern	_RPINR17
                                           	extern	_RPINR21
                                           	extern	_RPINR22
                                           	extern	_RPINR23
                                           	extern	_RPINR24
                                           	extern	_PPSCON
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_UIE
                                           	extern	_UEIE
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_PADCFG1
                                           	extern	_REFOCON
                                           	extern	_RTCCAL
                                           	extern	_RTCCFG
                                           	extern	_ODCON3
                                           	extern	_ODCON2
                                           	extern	_ODCON1
                                           	extern	_ANCON0
                                           	extern	_ANCON1
                                           	extern	_DSWAKEL
                                           	extern	_DSWAKEH
                                           	extern	_DSCONL
                                           	extern	_DSCONH
                                           	extern	_DSGPR0
                                           	extern	_DSGPR1
                                           	extern	_TCLKCON
                                           	extern	_CVRCON
                                           	extern	_PMSTATL
                                           	extern	_PMSTATH
                                           	extern	_PMEL
                                           	extern	_PMEH
                                           	extern	_PMDIN2L
                                           	extern	_PMDIN2H
                                           	extern	_PMDOUT2L
                                           	extern	_PMDOUT2H
                                           	extern	_PMMODEL
                                           	extern	_PMMODEH
                                           	extern	_PMCONL
                                           	extern	_PMCONH
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UEIR
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_DMABCH
                                           	extern	_DMABCL
                                           	extern	_RXADDRH
                                           	extern	_RXADDRL
                                           	extern	_TXADDRH
                                           	extern	_TXADDRL
                                           	extern	_PMDIN1L
                                           	extern	_PMDIN1H
                                           	extern	_PMADDRL
                                           	extern	_PMDOUT1L
                                           	extern	_PMADDRH
                                           	extern	_PMDOUT1H
                                           	extern	_CMSTAT
                                           	extern	_CMSTATUS
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_BAUDCON2
                                           	extern	_SPBRGH2
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_HLVDCON
                                           	extern	_DMACON2
                                           	extern	_DMACON1
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_ALRMVALL
                                           	extern	_ALRMVALH
                                           	extern	_ALRMRPT
                                           	extern	_ALRMCFG
                                           	extern	_TRISA
                                           	extern	_TRISB
                                           	extern	_TRISC
                                           	extern	_TRISD
                                           	extern	_TRISE
                                           	extern	_T3GCON
                                           	extern	_RTCVALL
                                           	extern	_RTCVALH
                                           	extern	_T1GCON
                                           	extern	_OSCTUNE
                                           	extern	_RCSTA2
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_TXSTA2
                                           	extern	_TXREG2
                                           	extern	_RCREG2
                                           	extern	_SPBRG2
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_CTMUICON
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCONH
                                           	extern	_CCP2CON
                                           	extern	_ECCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_ECCP2DEL
                                           	extern	_PWM2CON
                                           	extern	_ECCP2AS
                                           	extern	_PSTR2CON
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ECCP1DEL
                                           	extern	_PWM1CON
                                           	extern	_ECCP1AS
                                           	extern	_PSTR1CON
                                           	extern	_WDTCON
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_CM2CON
                                           	extern	_CM2CON1
                                           	extern	_CM1CON
                                           	extern	_CM1CON1
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_EnableUSBModule
                                           	extern	_ProcessUSBTransactions
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_main__high_priority_isr	code	0X000008
                                           _high_priority_isr:
000008   ef04     goto    0xc08            	goto 0x0C00 + 0x08
00000a   f006
                                           	
                                           ; ; Starting pCode block
                                           S_main__low_priority_isr	code	0X000018
                                           _low_priority_isr:
000018   ef0c     goto    0xc18            	goto 0x0C00 + 0x18
00001a   f006
                                           	
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	372; main.c	byte t1_count = 0;
000652   6a00     clrf    0, 0             	CLRF	r0x00
000654   8c9b     bsf     0x9b, 0x6, 0     	bsf _OSCTUNEbits, 6 ; Enable the PLL (PLLEN=bit6)
000656   ecd2     call    0xba4, 0         	call _delay ; Wait 2+ms until the PLL locks
000658   f005
                                           	; before enabling USB module
00065a   0eff     movlw   0xff             	movlw 0xFF
00065c   6f48     movwf   0x48, 0x1        	movwf _ANCON0 ; all I/O to Digital mode
00065e   0e1f     movlw   0x1f             	movlw 0x1F
000660   6f49     movwf   0x49, 0x1        	movwf _ANCON1 ; all I/O to Digital mode
000662   9494     bcf     0x94, 0x2, 0     	bcf _TRISC, 2 ; led output
000664   848b     bsf     0x8b, 0x2, 0     	bsf _LATC, 2 ; led on
                                           	;bcf _PIR1, 0 ; PIR1bits.TMR1IF = 0;
000666   0e31     movlw   0x31             	movlw b'00110001' ; prescaler 8 (0b11)
000668   6ecd     movwf   0xcd, 0          	movwf _T1CON ; timer 1 on,
                                           	;bsf _INTCON, 6 ; Enable Peripheral interrupt (PEIE=bit6)
                                           	;bsf _INTCON, 7 ; Enable General interrupt (GIE=bit7)
00066a   6aa6     clrf    0xa6, 0          	clrf _EECON1 ; EECON1=0
00066c   0e14     movlw   0x14             	movlw b'00010100' ; (0x14) Enable pullup resistors and full speed mode
00066e   010f     movlb   0xf              	banksel _UCFG
000670   6f39     movwf   0x39, 0x1        	movwf _UCFG, b
                                           	
                                           ;	.line	447; main.c	EP_IN_BD(1).ADDR = PTR16(&bootCmd);
000672   0e80     movlw   0x80             	MOVLW	LOW(_bootCmd)
000674   6e01     movwf   0x1, 0           	MOVWF	r0x01
000676   0e04     movlw   0x4              	MOVLW	HIGH(_bootCmd)
000678   6e02     movwf   0x2, 0           	MOVWF	r0x02
00067a   6a03     clrf    0x3, 0           	CLRF	r0x03
00067c   6a04     clrf    0x4, 0           	CLRF	r0x04
00067e   6a03     clrf    0x3, 0           	CLRF	r0x03
000680   6a04     clrf    0x4, 0           	CLRF	r0x04
000682   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000684   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 14)
000686   6f0e     movwf   0xe, 0x1         	MOVWF	(_ep_bdt + 14), B
000688   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
00068a   6f0f     movwf   0xf, 0x1         	MOVWF	(_ep_bdt + 15), B
00068c   0104     movlb   0x4              	BANKSEL	_currentConfiguration
                                           ;	.line	448; main.c	currentConfiguration = 0x00;
00068e   6bcc     clrf    0xcc, 0x1        	CLRF	_currentConfiguration, B
000690   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	449; main.c	deviceState = DETACHED;
000692   6bcb     clrf    0xcb, 0x1        	CLRF	_deviceState, B
                                           ;	.line	452; main.c	do {
000694   6a01     clrf    0x1, 0           	CLRF	r0x01
000696   6a02     clrf    0x2, 0           	CLRF	r0x02
000698   6a03     clrf    0x3, 0           	CLRF	r0x03
00069a   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00217_DS_:
                                           ;	.line	453; main.c	EnableUSBModule();
00069c   ec77     call    0xaee, 0         	CALL	_EnableUSBModule
00069e   f005
                                           ;	.line	454; main.c	ProcessUSBTransactions();
0006a0   ec28     call    0xa50, 0         	CALL	_ProcessUSBTransactions
0006a2   f005
                                           ;	.line	455; main.c	i = i + 1;
0006a4   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
0006a6   e304     bnc     0x6b0            	BNC	_00256_DS_
0006a8   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
0006aa   e302     bnc     0x6b0            	BNC	_00256_DS_
0006ac   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
0006ae   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
                                           _00256_DS_:
                                           ;	.line	456; main.c	if (i == 0xFFFFF) break; 
0006b0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0006b2   0aff     xorlw   0xff             	XORLW	0xff
0006b4   e108     bnz     0x6c6            	BNZ	_00258_DS_
0006b6   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0006b8   0aff     xorlw   0xff             	XORLW	0xff
0006ba   e105     bnz     0x6c6            	BNZ	_00258_DS_
0006bc   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0006be   0a0f     xorlw   0xf              	XORLW	0x0f
0006c0   e102     bnz     0x6c6            	BNZ	_00258_DS_
0006c2   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0006c4   e004     bz      0x6ce            	BZ	_00219_DS_
                                           _00258_DS_:
0006c6   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	457; main.c	} while (deviceState != CONFIGURED);
0006c8   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
0006ca   0a05     xorlw   0x5              	XORLW	0x05
0006cc   e1e7     bnz     0x69c            	BNZ	_00217_DS_
                                           _00219_DS_:
0006ce   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	460; main.c	if (deviceState != CONFIGURED)
0006d0   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
0006d2   0a05     xorlw   0x5              	XORLW	0x05
0006d4   e003     bz      0x6dc            	BZ	_00237_DS_
                                           ;	.line	462; main.c	t1_count = BOOT_TIMER_TICS;
0006d6   0ee5     movlw   0xe5             	MOVLW	0xe5
0006d8   6e00     movwf   0, 0             	MOVWF	r0x00
0006da   948b     bcf     0x8b, 0x2, 0     	bcf _LATC, 2 ; led on
                                           	
                                           _00237_DS_:
                                           ;	.line	468; main.c	while (1)
0006dc   6a01     clrf    0x1, 0           	CLRF	r0x01
0006de   6a02     clrf    0x2, 0           	CLRF	r0x02
                                           _00229_DS_:
                                           ;	.line	471; main.c	ProcessUSBTransactions();
0006e0   ec28     call    0xa50, 0         	CALL	_ProcessUSBTransactions
0006e2   f005
                                           ;	.line	474; main.c	if (led_counter == 0)
0006e4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0006e6   1002     iorwf   0x2, 0, 0        	IORWF	r0x02, W
0006e8   e102     bnz     0x6ee            	BNZ	_00223_DS_
0006ea   0e04     movlw   0x4              	movlw 1 << 2 ; toggle
0006ec   1a8b     xorwf   0x8b, 0x1, 0     	xorwf _LATC, f ; the led
                                           	
                                           _00223_DS_:
                                           ;	.line	481; main.c	led_counter++;
0006ee   4a01     infsnz  0x1, 0x1, 0      	INFSNZ	r0x01, F
0006f0   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
                                           ;	.line	484; main.c	if (PIR1bits.TMR1IF == 1)
0006f2   6a03     clrf    0x3, 0           	CLRF	r0x03
0006f4   b09e     btfsc   0x9e, 0, 0       	BTFSC	_PIR1bits, 0
0006f6   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0006f8   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0006fa   0a01     xorlw   0x1              	XORLW	0x01
0006fc   e1f1     bnz     0x6e0            	BNZ	_00229_DS_
                                           ;	.line	486; main.c	t1_count++;
0006fe   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
                                           ;	.line	487; main.c	PIR1bits.TMR1IF = 0;
000700   909e     bcf     0x9e, 0, 0       	BCF	_PIR1bits, 0
                                           ;	.line	490; main.c	if (t1_count > BOOT_TIMER_TICS)
000702   0ee6     movlw   0xe6             	MOVLW	0xe6
000704   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
000706   e3ec     bnc     0x6e0            	BNC	_00229_DS_
                                           ;	.line	492; main.c	disable_boot();
000708   ece3     call    0xbc6, 0         	CALL	_disable_boot
00070a   f005
00070c   ef00     goto    0xc00            	goto 0x0C00 ; start user app
00070e   f006
                                           	
000710   d7e7     bra     0x6e0            	BRA	_00229_DS_
000712   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__usb_ep_data_out_callback	code
                                           _usb_ep_data_out_callback:
                                           ;	.line	182; main.c	void usb_ep_data_out_callback(char end_point)
00002a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00002c   ffe5
00002e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000030   ffd9
000032   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000034   ffe5
000036   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000038   ffe5
00003a   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00003c   ffe5
00003e   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000040   ffe5
000042   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000044   ffe5
000046   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000048   ffe5
00004a   0e02     movlw   0x2              	MOVLW	0x02
00004c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00004e   f000
                                           ;	.line	187; main.c	EP_IN_BD(end_point).Cnt = 0;
000050   4400     rlncf   0, 0, 0          	RLNCF	r0x00, W
000052   0bfe     andlw   0xfe             	ANDLW	0xfe
000054   6e01     movwf   0x1, 0           	MOVWF	r0x01
000056   2801     incf    0x1, 0, 0        	INCF	r0x01, W
                                           ; #	MOVWF	r0x00
                                           ; #;;multiply lit val:0x04 by variable r0x00 and store in r0x00
                                           ; #	MOVF	r0x00, W
000058   6e00     movwf   0, 0             	MOVWF	r0x00
00005a   0d04     mullw   0x4              	MULLW	0x04
00005c   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
00005e   be00     btfsc   0, 0x7, 0        	BTFSC	r0x00, 7
000060   0804     sublw   0x4              	SUBLW	0x04
000062   6e02     movwf   0x2, 0           	MOVWF	r0x02
000064   cff3     movff   0xff3, 0         	MOVFF	PRODL, r0x00
000066   f000
000068   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
00006a   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
00006c   6e03     movwf   0x3, 0           	MOVWF	r0x03
00006e   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000070   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000072   6e04     movwf   0x4, 0           	MOVWF	r0x04
000074   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
000076   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
000078   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
00007a   ffe9
00007c   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
00007e   ffea
000080   0e00     movlw   0                	MOVLW	0x00
000082   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	191; main.c	TBLPTRU = bootCmd.addru;
000084   c484     movff   0x484, 0xff8     	MOVFF	(_bootCmd + 4), _TBLPTRU
000086   fff8
                                           ;	.line	192; main.c	TBLPTRH = bootCmd.addrh;
000088   c483     movff   0x483, 0xff7     	MOVFF	(_bootCmd + 3), _TBLPTRH
00008a   fff7
                                           ;	.line	193; main.c	TBLPTRL = bootCmd.addrl;
00008c   c482     movff   0x482, 0xff6     	MOVFF	(_bootCmd + 2), _TBLPTRL
00008e   fff6
000090   848b     bsf     0x8b, 0x2, 0     	bsf _LATC, 2 ; led on
                                           	
000092   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	201; main.c	if (bootCmd.cmd == READ_VERSION)
000094   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
000096   e113     bnz     0xbe             	BNZ	_00137_DS_
                                           ;	.line	204; main.c	bootCmd.buffer[2] = MINOR_VERSION;
000098   0e07     movlw   0x7              	MOVLW	0x07
                                           ; removed redundant BANKSEL
00009a   6f82     movwf   0x82, 0x1        	MOVWF	(_bootCmd + 2), B
                                           ;	.line	205; main.c	bootCmd.buffer[3] = MAJOR_VERSION;
00009c   0e04     movlw   0x4              	MOVLW	0x04
                                           ; removed redundant BANKSEL
00009e   6f83     movwf   0x83, 0x1        	MOVWF	(_bootCmd + 3), B
                                           ;	.line	207; main.c	EP_IN_BD(end_point).Cnt = 4;
0000a0   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0000a2   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0000a4   6e03     movwf   0x3, 0           	MOVWF	r0x03
0000a6   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0000a8   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0000aa   6e04     movwf   0x4, 0           	MOVWF	r0x04
0000ac   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
0000ae   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
0000b0   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0000b2   ffe9
0000b4   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
0000b6   ffea
0000b8   0e04     movlw   0x4              	MOVLW	0x04
0000ba   6eef     movwf   0xef, 0          	MOVWF	INDF0
0000bc   d093     bra     0x1e4            	BRA	_00138_DS_
                                           _00137_DS_:
0000be   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	212; main.c	else if (bootCmd.cmd == READ_FLASH)
0000c0   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
0000c2   0a01     xorlw   0x1              	XORLW	0x01
0000c4   e127     bnz     0x114            	BNZ	_00134_DS_
                                           ;	.line	215; main.c	for (counter=0; counter < bootCmd.len; counter++)
0000c6   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00144_DS_:
0000c8   0104     movlb   0x4              	BANKSEL	(_bootCmd + 1)
0000ca   5181     movf    0x81, 0, 0x1     	MOVF	(_bootCmd + 1), W, B
0000cc   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0000ce   e20f     bc      0xee             	BC	_00147_DS_
0000d0   0009     tblrd   *+               	TBLRD*+ 
                                           ;	.line	218; main.c	bootCmd.xdat[counter] = TABLAT;
0000d2   0e85     movlw   0x85             	MOVLW	LOW(_bootCmd + 5)
0000d4   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
0000d6   6e04     movwf   0x4, 0           	MOVWF	r0x04
0000d8   6a05     clrf    0x5, 0           	CLRF	r0x05
0000da   0e04     movlw   0x4              	MOVLW	HIGH(_bootCmd + 5)
0000dc   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
0000de   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
0000e0   ffe9
0000e2   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
0000e4   ffea
0000e6   cff5     movff   0xff5, 0xfef     	MOVFF	_TABLAT, INDF0
0000e8   ffef
                                           ;	.line	215; main.c	for (counter=0; counter < bootCmd.len; counter++)
0000ea   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0000ec   d7ed     bra     0xc8             	BRA	_00144_DS_
                                           _00147_DS_:
                                           ;	.line	222; main.c	EP_IN_BD(end_point).Cnt = 5 + bootCmd.len;
0000ee   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0000f0   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0000f2   6e03     movwf   0x3, 0           	MOVWF	r0x03
0000f4   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0000f6   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0000f8   6e04     movwf   0x4, 0           	MOVWF	r0x04
0000fa   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
0000fc   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
0000fe   0e05     movlw   0x5              	MOVLW	0x05
000100   0104     movlb   0x4              	BANKSEL	(_bootCmd + 1)
000102   2581     addwf   0x81, 0, 0x1     	ADDWF	(_bootCmd + 1), W, B
000104   6e05     movwf   0x5, 0           	MOVWF	r0x05
000106   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
000108   ffe9
00010a   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
00010c   ffea
00010e   c005     movff   0x5, 0xfef       	MOVFF	r0x05, INDF0
000110   ffef
000112   d068     bra     0x1e4            	BRA	_00138_DS_
                                           _00134_DS_:
000114   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	226; main.c	else if (bootCmd.cmd == WRITE_FLASH)
000116   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
000118   0a02     xorlw   0x2              	XORLW	0x02
00011a   e001     bz      0x11e            	BZ	_00204_DS_
00011c   d039     bra     0x190            	BRA	_00131_DS_
                                           _00204_DS_:
                                           ;	.line	265; main.c	EECON1bits.WPROG = 1; // Enable single-word write
00011e   8aa6     bsf     0xa6, 0x5, 0     	BSF	_EECON1bits, 5
                                           ;	.line	266; main.c	for (counter=0; counter < bootCmd.len; counter+=2)
000120   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00148_DS_:
000122   0104     movlb   0x4              	BANKSEL	(_bootCmd + 1)
000124   5181     movf    0x81, 0, 0x1     	MOVF	(_bootCmd + 1), W, B
000126   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
000128   e223     bc      0x170            	BC	_00151_DS_
                                           ;	.line	268; main.c	TBLPTRL =  bootCmd.addrl + counter;
00012a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
00012c   2582     addwf   0x82, 0, 0x1     	ADDWF	(_bootCmd + 2), W, B
00012e   6ef6     movwf   0xf6, 0          	MOVWF	_TBLPTRL
                                           ;	.line	269; main.c	TABLAT = bootCmd.xdat[counter];
000130   0e85     movlw   0x85             	MOVLW	LOW(_bootCmd + 5)
000132   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
000134   6e04     movwf   0x4, 0           	MOVWF	r0x04
000136   6a05     clrf    0x5, 0           	CLRF	r0x05
000138   0e04     movlw   0x4              	MOVLW	HIGH(_bootCmd + 5)
00013a   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
00013c   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
00013e   ffe9
000140   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
000142   ffea
000144   cfef     movff   0xfef, 0xff5     	MOVFF	INDF0, _TABLAT
000146   fff5
000148   000d     tblwt   *+               	TBLWT*+ 
                                           ;	.line	272; main.c	TABLAT = bootCmd.xdat[counter + 1];
00014a   2803     incf    0x3, 0, 0        	INCF	r0x03, W
00014c   6e04     movwf   0x4, 0           	MOVWF	r0x04
00014e   6a05     clrf    0x5, 0           	CLRF	r0x05
000150   0e85     movlw   0x85             	MOVLW	LOW(_bootCmd + 5)
000152   2604     addwf   0x4, 0x1, 0      	ADDWF	r0x04, F
000154   0e04     movlw   0x4              	MOVLW	HIGH(_bootCmd + 5)
000156   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
000158   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
00015a   ffe9
00015c   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
00015e   ffea
000160   cfef     movff   0xfef, 0xff5     	MOVFF	INDF0, _TABLAT
000162   fff5
000164   000c     tblwt   *                	TBLWT* 
                                           ;	.line	275; main.c	start_write();
000166   ecdb     call    0xbb6, 0         	CALL	_start_write
000168   f005
                                           ;	.line	266; main.c	for (counter=0; counter < bootCmd.len; counter+=2)
00016a   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
00016c   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
00016e   d7d9     bra     0x122            	BRA	_00148_DS_
                                           _00151_DS_:
                                           ;	.line	277; main.c	EECON1bits.WPROG = 0;	// Disable single-word write
000170   9aa6     bcf     0xa6, 0x5, 0     	BCF	_EECON1bits, 5
                                           ;	.line	282; main.c	EP_IN_BD(end_point).Cnt = 1;
000172   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000174   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000176   6e03     movwf   0x3, 0           	MOVWF	r0x03
000178   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00017a   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00017c   6e04     movwf   0x4, 0           	MOVWF	r0x04
00017e   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
000180   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
000182   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
000184   ffe9
000186   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
000188   ffea
00018a   0e01     movlw   0x1              	MOVLW	0x01
00018c   6eef     movwf   0xef, 0          	MOVWF	INDF0
00018e   d02a     bra     0x1e4            	BRA	_00138_DS_
                                           _00131_DS_:
000190   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	286; main.c	else if (bootCmd.cmd ==  ERASE_FLASH)
000192   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
000194   0a03     xorlw   0x3              	XORLW	0x03
000196   e11e     bnz     0x1d4            	BNZ	_00128_DS_
                                           ;	.line	316; main.c	for (counter=0; counter < bootCmd.len; counter++)
000198   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00152_DS_:
00019a   0104     movlb   0x4              	BANKSEL	(_bootCmd + 1)
00019c   5181     movf    0x81, 0, 0x1     	MOVF	(_bootCmd + 1), W, B
00019e   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0001a0   e20a     bc      0x1b6            	BC	_00155_DS_
                                           ;	.line	318; main.c	EECON1bits.FREE = 1;    // allow a program memory erase operation
0001a2   88a6     bsf     0xa6, 0x4, 0     	BSF	_EECON1bits, 4
                                           ;	.line	319; main.c	start_write();
0001a4   ecdb     call    0xbb6, 0         	CALL	_start_write
0001a6   f005
                                           ;	.line	320; main.c	EECON1bits.FREE = 0;    // inhibit program memory erase operation
0001a8   98a6     bcf     0xa6, 0x4, 0     	BCF	_EECON1bits, 4
0001aa   0e04     movlw   0x4              	movlw 0x04 ; 0x04 + (TBLPTRH) -> TBLPTRH
0001ac   26f7     addwf   0xf7, 0x1, 0     	addwf _TBLPTRH, 1 ; (W) + (TBLPTRH) -> TBLPTRH
                                           	; (C) is affected
0001ae   0e00     movlw   0                	movlw 0x00 ; 0x00 + (TBLPTRU) + (C) -> TBLPTRU
0001b0   22f8     addwfc  0xf8, 0x1, 0     	addwfc _TBLPTRU, 1 ; (W) + (TBLPTRU) + (C) -> TBLPTRU
                                           	
                                           ;	.line	316; main.c	for (counter=0; counter < bootCmd.len; counter++)
0001b2   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0001b4   d7f2     bra     0x19a            	BRA	_00152_DS_
                                           _00155_DS_:
                                           ;	.line	335; main.c	EP_IN_BD(end_point).Cnt = 1;
0001b6   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0001b8   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0001ba   6e03     movwf   0x3, 0           	MOVWF	r0x03
0001bc   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0001be   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0001c0   6e04     movwf   0x4, 0           	MOVWF	r0x04
0001c2   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
0001c4   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
0001c6   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0001c8   ffe9
0001ca   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
0001cc   ffea
0001ce   0e01     movlw   0x1              	MOVLW	0x01
0001d0   6eef     movwf   0xef, 0          	MOVWF	INDF0
0001d2   d008     bra     0x1e4            	BRA	_00138_DS_
                                           _00128_DS_:
0001d4   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	339; main.c	else if (bootCmd.cmd ==  RESET)
0001d6   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
0001d8   0aff     xorlw   0xff             	XORLW	0xff
0001da   e104     bnz     0x1e4            	BNZ	_00138_DS_
                                           ;	.line	342; main.c	disable_boot();
0001dc   ece3     call    0xbc6, 0         	CALL	_disable_boot
0001de   f005
0001e0   ef00     goto    0xc00            	goto 0x0C00 ; start user app
0001e2   f006
                                           	
                                           _00138_DS_:
                                           ;	.line	350; main.c	if (EP_IN_BD(end_point).Cnt > 0)
0001e4   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0001e6   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0001e8   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0001ea   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0001ec   4a00     infsnz  0, 0x1, 0        	INFSNZ	r0x00, F
0001ee   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
0001f0   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0001f2   ffe9
0001f4   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0001f6   ffea
0001f8   cfef     movff   0xfef, 0         	MOVFF	INDF0, r0x00
0001fa   f000
0001fc   5000     movf    0, 0, 0          	MOVF	r0x00, W
0001fe   e009     bz      0x212            	BZ	_00143_DS_
000200   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 12)
                                           ;	.line	353; main.c	if (EP_IN_BD(1).Stat.DTS)
000202   ad0c     btfss   0xc, 0x6, 0x1    	BTFSS	(_ep_bdt + 12), 6, B
000204   d003     bra     0x20c            	BRA	_00140_DS_
                                           ;	.line	354; main.c	EP_IN_BD(1).Stat.uc = 0b10001000; // UOWN 1 DTS 0 DTSEN 1
000206   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
000208   6f0c     movwf   0xc, 0x1         	MOVWF	(_ep_bdt + 12), B
00020a   d003     bra     0x212            	BRA	_00143_DS_
                                           _00140_DS_:
                                           ;	.line	356; main.c	EP_IN_BD(1).Stat.uc = 0b11001000; // UOWN 1 DTS 1 DTSEN 1
00020c   0ec8     movlw   0xc8             	MOVLW	0xc8
00020e   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 12)
000210   6f0c     movwf   0xc, 0x1         	MOVWF	(_ep_bdt + 12), B
                                           ; ;multiply lit val:0x04 by variable r0x01 and store in r0x01
                                           _00143_DS_:
                                           ;	.line	360; main.c	EP_OUT_BD(end_point).Cnt = EP1_BUFFER_SIZE;
000212   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000214   0d04     mullw   0x4              	MULLW	0x04
000216   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
000218   be01     btfsc   0x1, 0x7, 0      	BTFSC	r0x01, 7
00021a   0804     sublw   0x4              	SUBLW	0x04
00021c   6e00     movwf   0, 0             	MOVWF	r0x00
00021e   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
000220   f001
000222   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000224   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
000226   6e02     movwf   0x2, 0           	MOVWF	r0x02
000228   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00022a   2000     addwfc  0, 0, 0          	ADDWFC	r0x00, W
00022c   6e03     movwf   0x3, 0           	MOVWF	r0x03
00022e   4a02     infsnz  0x2, 0x1, 0      	INFSNZ	r0x02, F
000230   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000232   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
000234   ffe9
000236   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
000238   ffea
00023a   0e40     movlw   0x40             	MOVLW	0x40
00023c   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	362; main.c	EP_OUT_BD(end_point).Stat.uc = 0x80;      // UOWN 1
00023e   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000240   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
000242   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000244   2200     addwfc  0, 0x1, 0        	ADDWFC	r0x00, F
000246   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
000248   ffe9
00024a   c000     movff   0, 0xfea         	MOVFF	r0x00, FSR0H
00024c   ffea
00024e   0e80     movlw   0x80             	MOVLW	0x80
000250   6eef     movwf   0xef, 0          	MOVWF	INDF0
000252   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000254   f005
000256   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000258   f004
00025a   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00025c   f003
00025e   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000260   f002
000262   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000264   f001
000266   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000268   f000
00026a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00026c   ffd9
00026e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__usb_configure_endpoints	code
                                           _usb_configure_endpoints:
                                           ;	.line	166; main.c	UEP1 = 0b00011110;
000b42   0e1e     movlw   0x1e             	MOVLW	0x1e
000b44   010f     movlb   0xf              	BANKSEL	_UEP1
000b46   6f27     movwf   0x27, 0x1        	MOVWF	_UEP1, B
                                           ; #	MOVLW	0x40
                                           ; #	MOVWF	(_ep_bdt + 12), B
                                           ; #	MOVLW	0x40
                                           ;	.line	170; main.c	EP_IN_BD(1).Stat.uc  = 0b01000000;
000b48   0e40     movlw   0x40             	MOVLW	0x40
000b4a   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 12)
                                           ;	.line	173; main.c	EP_OUT_BD(1).Cnt  = EP1_BUFFER_SIZE;
000b4c   6f0c     movwf   0xc, 0x1         	MOVWF	(_ep_bdt + 12), B
                                           ; removed redundant BANKSEL
000b4e   6f09     movwf   0x9, 0x1         	MOVWF	(_ep_bdt + 9), B
                                           ;	.line	174; main.c	EP_OUT_BD(1).ADDR = PTR16(&bootCmd);
000b50   0e80     movlw   0x80             	MOVLW	LOW(_bootCmd)
                                           ; removed redundant BANKSEL
000b52   6f0a     movwf   0xa, 0x1         	MOVWF	(_ep_bdt + 10), B
000b54   0e04     movlw   0x4              	MOVLW	HIGH(_bootCmd)
                                           ; removed redundant BANKSEL
000b56   6f0b     movwf   0xb, 0x1         	MOVWF	(_ep_bdt + 11), B
                                           ;	.line	176; main.c	EP_OUT_BD(1).Stat.uc = 0b10000000;
000b58   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
000b5a   6f08     movwf   0x8, 0x1         	MOVWF	(_ep_bdt + 8), B
000b5c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__disable_boot	code
                                           _disable_boot:
000bc6   6acd     clrf    0xcd, 0          	clrf _T1CON ; disable timer 1
000bc8   6a65     clrf    0x65, 0          	clrf _UCON ; disable USB
000bca   8494     bsf     0x94, 0x2, 0     	bsf _TRISC, 2 ; led input
000bcc   948b     bcf     0x8b, 0x2, 0     	bcf _LATC, 2 ; led off
000bce   ecd2     call    0xba4, 0         	call _delay ; force timeout on USB
000bd0   f005
                                           	
000bd2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__start_write	code
                                           _start_write:
                                           	;bsf _EECON1, 5 ; EECON1bits.WPROG = 1; Program 2 bytes on the next WR command
000bb6   84a6     bsf     0xa6, 0x2, 0     	bsf _EECON1, 2 ; EECON1bits.WREN = 1; allows write cycles to Flash program memory
                                           	;bcf _INTCON, 7 ; INTCONbits.GIE = 0 ; disable interrupts (activated in startup sequence)
000bb8   0e55     movlw   0x55             	movlw 0x55
000bba   6ea7     movwf   0xa7, 0          	movwf _EECON2 ; EECON2 = 0x55;
000bbc   0eaa     movlw   0xaa             	movlw 0xAA
000bbe   6ea7     movwf   0xa7, 0          	movwf _EECON2 ; EECON2 = 0xAA;
000bc0   82a6     bsf     0xa6, 0x1, 0     	bsf _EECON1, 1 ; EECON1bits.WR = 1; start flash/eeprom writing
000bc2   94a6     bcf     0xa6, 0x2, 0     	bcf _EECON1, 2 ; EECON1bits.WREN = 0; inhibits write cycles to Flash program memory
                                           	;bsf _INTCON, 7 ; INTCONbits.GIE = 1 ; re-enable interrupts
                                           	
000bc4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__delay	code
                                           _delay:
000ba4   0eff     movlw   0xff             	movlw 0xFF
000ba6   6e00     movwf   0, 0             	movwf r0x00
000ba8   0eff     movlw   0xff             	movlw 0xFF
000baa   6e01     movwf   0x1, 0           	movwf r0x01
                                           startup_loop:
000bac   2e00     decfsz  0, 0x1, 0        	decfsz r0x00, f
000bae   d7fe     bra     0xbac            	bra startup_loop
000bb0   2e01     decfsz  0x1, 0x1, 0      	decfsz r0x01, f
000bb2   d7fc     bra     0xbac            	bra startup_loop
                                           	
000bb4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _device_descriptor:
0009e8   0112     movlb   0x12             	DB	0x12, 0x01, 0x00, 0x02, 0xff, 0x00, 0xff, 0x40, 0xd8, 0x04, 0xaa, 0xfe
0009ea   0200     mulwf   0, 0             
0009ec   00ff     reset                    
0009ee   40ff     rrncf   0xff, 0, 0       
0009f0   04d8     decf    0xd8, 0, 0       
0009f2   feaa     dw      0xfeaa           
0009f4   0407     decf    0x7, 0, 0        	DB	0x07, 0x04, 0x01, 0x02, 0x00, 0x01
0009f6   0201     mulwf   0x1, 0           
0009f8   0100     movlb   0                
                                           ; ; Starting pCode block for Ival
                                           _configuration_descriptor:
0009fa   0209     mulwf   0x9, 0           	DB	0x09, 0x02, 0x20, 0x00, 0x01, 0x01, 0x00, 0xc0, 0x14, 0x09, 0x04, 0x00
0009fc   0020     dw      0x20             
0009fe   0101     movlb   0x1              
000a00   c000     movff   0, 0x914         
000a02   0914
000a04   0004     clrwdt                   
000a06   0200     mulwf   0, 0             	DB	0x00, 0x02, 0xff, 0xff, 0xff, 0x00, 0x07, 0x05, 0x01, 0x02, 0x40, 0x00
000a08   ffff     dw      0xffff           
000a0a   00ff     reset                    
000a0c   0507     decf    0x7, 0, 0x1      
000a0e   0201     mulwf   0x1, 0           
000a10   0040     dw      0x40             
000a12   0700     decf    0, 0x1, 0x1      	DB	0x00, 0x07, 0x05, 0x81, 0x02, 0x40, 0x00, 0x00
000a14   8105     bsf     0x5, 0, 0x1      
000a16   4002     rrncf   0x2, 0, 0        
000a18   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _lang:
000a1a   0304     mulwf   0x4, 0x1         	DB	0x04, 0x03, 0x09, 0x04
000a1c   0409     decf    0x9, 0, 0        
                                           ; ; Starting pCode block for Ival
                                           _manu:
000a1e   0316     mulwf   0x16, 0x1        	DB	0x16, 0x03, 0x52, 0x00, 0x2e, 0x00, 0x42, 0x00, 0x6c, 0x00, 0x61, 0x00
000a20   0052     dw      0x52             
000a22   002e     dw      0x2e             
000a24   0042     dw      0x42             
000a26   006c     dw      0x6c             
000a28   0061     dw      0x61             
000a2a   006e     dw      0x6e             	DB	0x6e, 0x00, 0x63, 0x00, 0x68, 0x00, 0x6f, 0x00, 0x74, 0x00
000a2c   0063     dw      0x63             
000a2e   0068     dw      0x68             
000a30   006f     dw      0x6f             
000a32   0074     dw      0x74             
                                           ; ; Starting pCode block for Ival
                                           _prod:
000a34   0312     mulwf   0x12, 0x1        	DB	0x12, 0x03, 0x50, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x75, 0x00
000a36   0050     dw      0x50             
000a38   0069     dw      0x69             
000a3a   006e     dw      0x6e             
000a3c   0067     dw      0x67             
000a3e   0075     dw      0x75             
000a40   0069     dw      0x69             	DB	0x69, 0x00, 0x6e, 0x00, 0x6f, 0x00
000a42   006e     dw      0x6e             
000a44   006f     dw      0x6f             
                                           ; ; Starting pCode block for Ival
                                           _string_descriptor:
000a46   0a1a     xorlw   0x1a             	DB	LOW(_lang), HIGH(_lang), UPPER(_lang), LOW(_manu), HIGH(_manu), UPPER(_manu), LOW(_prod), HIGH(_prod), UPPER(_prod)
000a48   1e00     comf    0, 0x1, 0        
000a4a   000a     tblrd   *-               
000a4c   0a34     xorlw   0x34             
000a4e   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  914 (0x0392) bytes ( 0.70%)
                                           ;           	  457 (0x01c9) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.2.1 #8163 (Oct 23 2012) (Linux)
                                           ; This file was generated Tue Dec 11 18:11:44 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46j50
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_bootCmd
                                           	global	_deviceAddress
                                           	global	_selfPowered
                                           	global	_EnableUSBModule
                                           	global	_ProcessUSBTransactions
                                           	global	_deviceState
                                           	global	_currentConfiguration
                                           	global	_ctrlTransferStage
                                           	global	_requestHandled
                                           	global	_outPtr
                                           	global	_inPtr
                                           	global	_wCount
                                           	global	_ep_bdt
                                           	global	_SetupPacket
                                           	global	_controlTransferBuffer
                                           	global	_ProcessStandardRequest
                                           	global	_InDataStage
                                           	global	_OutDataStage
                                           	global	_SetupStage
                                           	global	_WaitForSetupStage
                                           	global	_ProcessControlTransfer
                                           	global	_UnSuspend
                                           	global	_BusReset
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrget1
                                           	extern	__gptrput1
                                           	extern	_PPSCONbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_UIEbits
                                           	extern	_UEIEbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_PADCFG1bits
                                           	extern	_REFOCONbits
                                           	extern	_RTCCALbits
                                           	extern	_RTCCFGbits
                                           	extern	_ODCON3bits
                                           	extern	_ODCON2bits
                                           	extern	_ODCON1bits
                                           	extern	_ANCON0bits
                                           	extern	_ANCON1bits
                                           	extern	_DSWAKELbits
                                           	extern	_DSWAKEHbits
                                           	extern	_DSCONLbits
                                           	extern	_DSCONHbits
                                           	extern	_TCLKCONbits
                                           	extern	_CVRCONbits
                                           	extern	_PMSTATLbits
                                           	extern	_PMSTATHbits
                                           	extern	_PMELbits
                                           	extern	_PMEHbits
                                           	extern	_PMMODELbits
                                           	extern	_PMMODEHbits
                                           	extern	_PMCONLbits
                                           	extern	_PMCONHbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UEIRbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_PMADDRHbits
                                           	extern	_CMSTATbits
                                           	extern	_CMSTATUSbits
                                           	extern	_SSP2CON2bits
                                           	extern	_SSP2CON1bits
                                           	extern	_SSP2STATbits
                                           	extern	_SSP2ADDbits
                                           	extern	_T4CONbits
                                           	extern	_T3CONbits
                                           	extern	_BAUDCON2bits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_BAUDCTLbits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_HLVDCONbits
                                           	extern	_DMACON2bits
                                           	extern	_DMACON1bits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_ALRMRPTbits
                                           	extern	_ALRMCFGbits
                                           	extern	_TRISAbits
                                           	extern	_TRISBbits
                                           	extern	_TRISCbits
                                           	extern	_TRISDbits
                                           	extern	_TRISEbits
                                           	extern	_T3GCONbits
                                           	extern	_T1GCONbits
                                           	extern	_OSCTUNEbits
                                           	extern	_RCSTA2bits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_TXSTA2bits
                                           	extern	_RCSTAbits
                                           	extern	_RCSTA1bits
                                           	extern	_TXSTAbits
                                           	extern	_TXSTA1bits
                                           	extern	_CTMUICONbits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCONHbits
                                           	extern	_CCP2CONbits
                                           	extern	_ECCP2CONbits
                                           	extern	_ECCP2DELbits
                                           	extern	_PWM2CONbits
                                           	extern	_ECCP2ASbits
                                           	extern	_PSTR2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ECCP1DELbits
                                           	extern	_PWM1CONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_PSTR1CONbits
                                           	extern	_WDTCONbits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1ADDbits
                                           	extern	_SSPADDbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_CM2CONbits
                                           	extern	_CM2CON1bits
                                           	extern	_CM1CONbits
                                           	extern	_CM1CON1bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_RPOR0
                                           	extern	_RPOR1
                                           	extern	_RPOR2
                                           	extern	_RPOR3
                                           	extern	_RPOR4
                                           	extern	_RPOR5
                                           	extern	_RPOR6
                                           	extern	_RPOR7
                                           	extern	_RPOR8
                                           	extern	_RPOR9
                                           	extern	_RPOR10
                                           	extern	_RPOR11
                                           	extern	_RPOR12
                                           	extern	_RPOR13
                                           	extern	_RPOR17
                                           	extern	_RPOR18
                                           	extern	_RPOR19
                                           	extern	_RPOR20
                                           	extern	_RPOR21
                                           	extern	_RPOR22
                                           	extern	_RPOR23
                                           	extern	_RPOR24
                                           	extern	_RPINR1
                                           	extern	_RPINR2
                                           	extern	_RPINR3
                                           	extern	_RPINR4
                                           	extern	_RPINR6
                                           	extern	_RPINR7
                                           	extern	_RPINR8
                                           	extern	_RPINR12
                                           	extern	_RPINR13
                                           	extern	_RPINR16
                                           	extern	_RPINR17
                                           	extern	_RPINR21
                                           	extern	_RPINR22
                                           	extern	_RPINR23
                                           	extern	_RPINR24
                                           	extern	_PPSCON
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_UIE
                                           	extern	_UEIE
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_PADCFG1
                                           	extern	_REFOCON
                                           	extern	_RTCCAL
                                           	extern	_RTCCFG
                                           	extern	_ODCON3
                                           	extern	_ODCON2
                                           	extern	_ODCON1
                                           	extern	_ANCON0
                                           	extern	_ANCON1
                                           	extern	_DSWAKEL
                                           	extern	_DSWAKEH
                                           	extern	_DSCONL
                                           	extern	_DSCONH
                                           	extern	_DSGPR0
                                           	extern	_DSGPR1
                                           	extern	_TCLKCON
                                           	extern	_CVRCON
                                           	extern	_PMSTATL
                                           	extern	_PMSTATH
                                           	extern	_PMEL
                                           	extern	_PMEH
                                           	extern	_PMDIN2L
                                           	extern	_PMDIN2H
                                           	extern	_PMDOUT2L
                                           	extern	_PMDOUT2H
                                           	extern	_PMMODEL
                                           	extern	_PMMODEH
                                           	extern	_PMCONL
                                           	extern	_PMCONH
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UEIR
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_DMABCH
                                           	extern	_DMABCL
                                           	extern	_RXADDRH
                                           	extern	_RXADDRL
                                           	extern	_TXADDRH
                                           	extern	_TXADDRL
                                           	extern	_PMDIN1L
                                           	extern	_PMDIN1H
                                           	extern	_PMADDRL
                                           	extern	_PMDOUT1L
                                           	extern	_PMADDRH
                                           	extern	_PMDOUT1H
                                           	extern	_CMSTAT
                                           	extern	_CMSTATUS
                                           	extern	_SSP2CON2
                                           	extern	_SSP2CON1
                                           	extern	_SSP2STAT
                                           	extern	_SSP2ADD
                                           	extern	_SSP2BUF
                                           	extern	_T4CON
                                           	extern	_PR4
                                           	extern	_TMR4
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_BAUDCON2
                                           	extern	_SPBRGH2
                                           	extern	_BAUDCON
                                           	extern	_BAUDCON1
                                           	extern	_BAUDCTL
                                           	extern	_SPBRGH
                                           	extern	_SPBRGH1
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_HLVDCON
                                           	extern	_DMACON2
                                           	extern	_DMACON1
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_ALRMVALL
                                           	extern	_ALRMVALH
                                           	extern	_ALRMRPT
                                           	extern	_ALRMCFG
                                           	extern	_TRISA
                                           	extern	_TRISB
                                           	extern	_TRISC
                                           	extern	_TRISD
                                           	extern	_TRISE
                                           	extern	_T3GCON
                                           	extern	_RTCVALL
                                           	extern	_RTCVALH
                                           	extern	_T1GCON
                                           	extern	_OSCTUNE
                                           	extern	_RCSTA2
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_TXSTA2
                                           	extern	_TXREG2
                                           	extern	_RCREG2
                                           	extern	_SPBRG2
                                           	extern	_RCSTA
                                           	extern	_RCSTA1
                                           	extern	_TXSTA
                                           	extern	_TXSTA1
                                           	extern	_TXREG
                                           	extern	_TXREG1
                                           	extern	_RCREG
                                           	extern	_RCREG1
                                           	extern	_SPBRG
                                           	extern	_SPBRG1
                                           	extern	_CTMUICON
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCONH
                                           	extern	_CCP2CON
                                           	extern	_ECCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_ECCP2DEL
                                           	extern	_PWM2CON
                                           	extern	_ECCP2AS
                                           	extern	_PSTR2CON
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ECCP1DEL
                                           	extern	_PWM1CON
                                           	extern	_ECCP1AS
                                           	extern	_PSTR1CON
                                           	extern	_WDTCON
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON1
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_CM2CON
                                           	extern	_CM2CON1
                                           	extern	_CM1CON
                                           	extern	_CM1CON1
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_usb_configure_endpoints
                                           	extern	_usb_ep_data_out_callback
                                           	extern	_device_descriptor
                                           	extern	_configuration_descriptor
                                           	extern	_string_descriptor
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           
                                           usbram5	udata
                                           _SetupPacket	res	64
                                           _controlTransferBuffer	res	64
                                           
                                           udata_picUSB_0	udata
                                           _selfPowered	res	1
                                           
                                           udata_picUSB_1	udata
                                           _deviceAddress	res	1
                                           
                                           udata_picUSB_2	udata
                                           _bootCmd	res	64
                                           
                                           udata_picUSB_3	udata
                                           _requestHandled	res	1
                                           
                                           udata_picUSB_4	udata
                                           _outPtr	res	3
                                           
                                           udata_picUSB_5	udata
                                           _wCount	res	2
                                           
                                           udata_picUSB_6	udata
                                           _deviceState	res	1
                                           
                                           udata_picUSB_7	udata
                                           _currentConfiguration	res	1
                                           
                                           udata_picUSB_8	udata
                                           _inPtr	res	3
                                           
                                           udata_picUSB_9	udata
                                           _ctrlTransferStage	res	1
                                           
                                           
                                           ustat_picUSB_00	udata	0X0400
                                           _ep_bdt        	res	128
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_picUSB__ProcessUSBTransactions	code
                                           _ProcessUSBTransactions:
                                           ;	.line	498; picUSB.c	void ProcessUSBTransactions()
000a50   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000a52   ffe5
                                           ; #	MOVF	_deviceState, W, B
                                           ; #	BTFSS	STATUS, 2
                                           ; #	GOTO	_00414_DS_
                                           ; #	GOTO	_00431_DS_
                                           ; #	BTFSS	_UIRbits, 2
000a54   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	501; picUSB.c	if(deviceState == DETACHED)
000a56   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
                                           ;	.line	502; picUSB.c	return;
000a58   e023     bz      0xaa0            	BZ	_00431_DS_
                                           ;	.line	505; picUSB.c	if(UIRbits.ACTVIF && UIEbits.ACTVIE)
000a5a   a462     btfss   0x62, 0x2, 0     	BTFSS	_UIRbits, 2
                                           ; #	GOTO	_00416_DS_
                                           ; #	BTFSS	_UIEbits, 2, B
                                           ; #	GOTO	_00416_DS_
                                           ; #	CALL	_UnSuspend
                                           ; #	CLRF	r0x00
                                           ;	.line	506; picUSB.c	UnSuspend();
000a5c   d004     bra     0xa66            	BRA	_00416_DS_
000a5e   010f     movlb   0xf              	BANKSEL	_UIEbits
                                           ;	.line	509; picUSB.c	if(UCONbits.SUSPND == 1)
000a60   b536     btfsc   0x36, 0x2, 0x1   	BTFSC	_UIEbits, 2, B
000a62   ecf1     call    0xbe2, 0         	CALL	_UnSuspend
000a64   f005
                                           _00416_DS_:
000a66   6a00     clrf    0, 0             	CLRF	r0x00
000a68   b265     btfsc   0x65, 0x1, 0     	BTFSC	_UCONbits, 1
000a6a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000a6c   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a6e   0a01     xorlw   0x1              	XORLW	0x01
                                           ;	.line	510; picUSB.c	return;
000a70   e017     bz      0xaa0            	BZ	_00431_DS_
                                           ;	.line	513; picUSB.c	if (UIRbits.URSTIF && UIEbits.URSTIE)
000a72   a062     btfss   0x62, 0, 0       	BTFSS	_UIRbits, 0
                                           ; #	GOTO	_00421_DS_
                                           ; #	BTFSS	_UIEbits, 0, B
                                           ; #	GOTO	_00421_DS_
                                           ; #	CALL	_BusReset
                                           ; #	BTFSS	_UIRbits, 1
                                           ;	.line	514; picUSB.c	BusReset();
000a74   d004     bra     0xa7e            	BRA	_00421_DS_
000a76   010f     movlb   0xf              	BANKSEL	_UIEbits
                                           ;	.line	530; picUSB.c	if (UIRbits.UERRIF && UIEbits.UERRIE)
000a78   b136     btfsc   0x36, 0, 0x1     	BTFSC	_UIEbits, 0, B
000a7a   ec53     call    0xaa6, 0         	CALL	_BusReset
000a7c   f005
                                           _00421_DS_:
000a7e   a262     btfss   0x62, 0x1, 0     	BTFSS	_UIRbits, 1
                                           ; #	GOTO	_00424_DS_
                                           ; #	BTFSS	_UIEbits, 1, B
                                           ; #	GOTO	_00424_DS_
                                           ; #	BCF	_UIRbits, 1
                                           ; #	MOVLW	0x03
                                           ;	.line	531; picUSB.c	UIRbits.UERRIF = 0;// Clear errors
000a80   d003     bra     0xa88            	BRA	_00424_DS_
000a82   010f     movlb   0xf              	BANKSEL	_UIEbits
                                           ;	.line	534; picUSB.c	if (deviceState < DEFAULT)  // DETACHED, ATTACHED or POWERED
000a84   b336     btfsc   0x36, 0x1, 0x1   	BTFSC	_UIEbits, 1, B
000a86   9262     bcf     0x62, 0x1, 0     	BCF	_UIRbits, 1
                                           _00424_DS_:
000a88   0e03     movlw   0x3              	MOVLW	0x03
                                           ; #	SUBWF	_deviceState, W, B
                                           ; #	BTFSC	STATUS, 0
                                           ; #	GOTO	_00427_DS_
                                           ; #	GOTO	_00431_DS_
                                           ; #	BTFSS	_UIRbits, 3
000a8a   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	535; picUSB.c	return;
000a8c   5dcb     subwf   0xcb, 0, 0x1     	SUBWF	_deviceState, W, B
                                           ;	.line	538; picUSB.c	if(UIRbits.TRNIF && UIEbits.TRNIE)
000a8e   e308     bnc     0xaa0            	BNC	_00431_DS_
000a90   a662     btfss   0x62, 0x3, 0     	BTFSS	_UIRbits, 3
000a92   d006     bra     0xaa0            	BRA	_00431_DS_
000a94   010f     movlb   0xf              	BANKSEL	_UIEbits
000a96   a736     btfss   0x36, 0x3, 0x1   	BTFSS	_UIEbits, 3, B
000a98   d003     bra     0xaa0            	BRA	_00431_DS_
                                           ;	.line	540; picUSB.c	ProcessControlTransfer();
000a9a   ec8a     call    0x714, 0         	CALL	_ProcessControlTransfer
000a9c   f003
                                           ;	.line	542; picUSB.c	UIRbits.TRNIF = 0;
000a9e   9662     bcf     0x62, 0x3, 0     	BCF	_UIRbits, 3
                                           _00431_DS_:
000aa0   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000aa2   f000
000aa4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__BusReset	code
                                           _BusReset:
                                           ;	.line	470; picUSB.c	void BusReset()
000aa6   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000aa8   ffe5
                                           ;	.line	472; picUSB.c	UEIR  = 0x00;
000aaa   6a63     clrf    0x63, 0          	CLRF	_UEIR
                                           ;	.line	473; picUSB.c	UIR   = 0x00;
000aac   6a62     clrf    0x62, 0          	CLRF	_UIR
                                           ;	.line	474; picUSB.c	UEIE  = 0x9f;
000aae   0e9f     movlw   0x9f             	MOVLW	0x9f
000ab0   010f     movlb   0xf              	BANKSEL	_UEIE
000ab2   6f37     movwf   0x37, 0x1        	MOVWF	_UEIE, B
                                           ;	.line	475; picUSB.c	UIE   = 0x7b;
000ab4   0e7b     movlw   0x7b             	MOVLW	0x7b
000ab6   010f     movlb   0xf              	BANKSEL	_UIE
000ab8   6f36     movwf   0x36, 0x1        	MOVWF	_UIE, B
000aba   010f     movlb   0xf              	BANKSEL	_UADDR
                                           ;	.line	476; picUSB.c	UADDR = 0x00;
000abc   6b38     clrf    0x38, 0x1        	CLRF	_UADDR, B
                                           ;	.line	479; picUSB.c	UEP0 = EP_CTRL | HSHK_EN;
000abe   0e16     movlw   0x16             	MOVLW	0x16
000ac0   010f     movlb   0xf              	BANKSEL	_UEP0
000ac2   6f26     movwf   0x26, 0x1        	MOVWF	_UEP0, B
                                           _00396_DS_:
                                           ;	.line	482; picUSB.c	while (UIRbits.TRNIF == 1)
000ac4   6a00     clrf    0, 0             	CLRF	r0x00
000ac6   b662     btfsc   0x62, 0x3, 0     	BTFSC	_UIRbits, 3
000ac8   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000aca   5000     movf    0, 0, 0          	MOVF	r0x00, W
000acc   0a01     xorlw   0x1              	XORLW	0x01
000ace   e102     bnz     0xad4            	BNZ	_00398_DS_
                                           ;	.line	483; picUSB.c	UIRbits.TRNIF = 0;
000ad0   9662     bcf     0x62, 0x3, 0     	BCF	_UIRbits, 3
000ad2   d7f8     bra     0xac4            	BRA	_00396_DS_
                                           _00398_DS_:
                                           ;	.line	486; picUSB.c	UCONbits.PKTDIS = 0;
000ad4   9865     bcf     0x65, 0x4, 0     	BCF	_UCONbits, 4
                                           ;	.line	489; picUSB.c	WaitForSetupStage();
000ad6   ecaf     call    0xb5e, 0         	CALL	_WaitForSetupStage
000ad8   f005
000ada   0104     movlb   0x4              	BANKSEL	_selfPowered
                                           ;	.line	492; picUSB.c	selfPowered = 0;                      // Self powered is off by default
000adc   6bc8     clrf    0xc8, 0x1        	CLRF	_selfPowered, B
000ade   0104     movlb   0x4              	BANKSEL	_currentConfiguration
                                           ;	.line	493; picUSB.c	currentConfiguration = 0;             // Clear active configuration
000ae0   6bcc     clrf    0xcc, 0x1        	CLRF	_currentConfiguration, B
                                           ;	.line	494; picUSB.c	deviceState = DEFAULT;
000ae2   0e03     movlw   0x3              	MOVLW	0x03
000ae4   0104     movlb   0x4              	BANKSEL	_deviceState
000ae6   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
000ae8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000aea   f000
000aec   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__UnSuspend	code
                                           _UnSuspend:
                                           ;	.line	465; picUSB.c	UCONbits.SUSPND = 0;
000be2   9265     bcf     0x65, 0x1, 0     	BCF	_UCONbits, 1
000be4   010f     movlb   0xf              	BANKSEL	_UIEbits
                                           ;	.line	466; picUSB.c	UIEbits.ACTVIE = 0;
000be6   9536     bcf     0x36, 0x2, 0x1   	BCF	_UIEbits, 2, B
                                           ;	.line	467; picUSB.c	UIRbits.ACTVIF = 0;
000be8   9462     bcf     0x62, 0x2, 0     	BCF	_UIRbits, 2
000bea   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__EnableUSBModule	code
                                           _EnableUSBModule:
                                           ;	.line	443; picUSB.c	if(UCONbits.USBEN == 0)
000aee   b665     btfsc   0x65, 0x3, 0     	BTFSC	_UCONbits, 3
000af0   d007     bra     0xb00            	BRA	_00370_DS_
                                           ;	.line	445; picUSB.c	UCON = 0;
000af2   6a65     clrf    0x65, 0          	CLRF	_UCON
000af4   010f     movlb   0xf              	BANKSEL	_UIE
                                           ;	.line	446; picUSB.c	UIE = 0;
000af6   6b36     clrf    0x36, 0x1        	CLRF	_UIE, B
                                           ;	.line	447; picUSB.c	UCONbits.USBEN = 1;
000af8   8665     bsf     0x65, 0x3, 0     	BSF	_UCONbits, 3
                                           ;	.line	448; picUSB.c	deviceState = ATTACHED;
000afa   0e01     movlw   0x1              	MOVLW	0x01
000afc   0104     movlb   0x4              	BANKSEL	_deviceState
000afe   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
                                           _00370_DS_:
000b00   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	452; picUSB.c	if ((deviceState == ATTACHED) && !UCONbits.SE0)
000b02   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
000b04   0a01     xorlw   0x1              	XORLW	0x01
000b06   e10b     bnz     0xb1e            	BNZ	_00374_DS_
000b08   ba65     btfsc   0x65, 0x5, 0     	BTFSC	_UCONbits, 5
000b0a   d009     bra     0xb1e            	BRA	_00374_DS_
                                           ;	.line	454; picUSB.c	UIR = 0;
000b0c   6a62     clrf    0x62, 0          	CLRF	_UIR
000b0e   010f     movlb   0xf              	BANKSEL	_UIE
                                           ;	.line	455; picUSB.c	UIE = 0;
000b10   6b36     clrf    0x36, 0x1        	CLRF	_UIE, B
000b12   010f     movlb   0xf              	BANKSEL	_UIEbits
                                           ;	.line	456; picUSB.c	UIEbits.URSTIE = 1;
000b14   8136     bsf     0x36, 0, 0x1     	BSF	_UIEbits, 0, B
                                           ;	.line	457; picUSB.c	UIEbits.IDLEIE = 1;
000b16   8936     bsf     0x36, 0x4, 0x1   	BSF	_UIEbits, 4, B
                                           ;	.line	458; picUSB.c	deviceState = POWERED;
000b18   0e02     movlw   0x2              	MOVLW	0x02
000b1a   0104     movlb   0x4              	BANKSEL	_deviceState
000b1c   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
                                           _00374_DS_:
000b1e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__ProcessControlTransfer	code
                                           _ProcessControlTransfer:
                                           ;	.line	359; picUSB.c	void ProcessControlTransfer()
000714   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000716   ffe5
000718   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00071a   ffe5
                                           ;	.line	362; picUSB.c	byte PID, end_point = USTAT >> 3;
00071c   3864     swapf   0x64, 0, 0       	SWAPF	_USTAT, W
00071e   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
000720   0b1f     andlw   0x1f             	ANDLW	0x1f
000722   6e00     movwf   0, 0             	MOVWF	r0x00
                                           ;	.line	364; picUSB.c	if (end_point == 0) // Endpoint 0
000724   5000     movf    0, 0, 0          	MOVF	r0x00, W
000726   a4d8     btfss   0xd8, 0x2, 0     	BTFSS	STATUS, 2
000728   d049     bra     0x7bc            	BRA	_00319_DS_
                                           ;	.line	367; picUSB.c	if (USTATbits.DIR == OUT)
00072a   b464     btfsc   0x64, 0x2, 0     	BTFSC	_USTATbits, 2
00072c   d022     bra     0x772            	BRA	_00314_DS_
                                           ;	.line	371; picUSB.c	PID = (EP_OUT_BD(0).Stat.uc & 0x3C) >> 2;
00072e   0e3c     movlw   0x3c             	MOVLW	0x3c
000730   0104     movlb   0x4              	BANKSEL	_ep_bdt
000732   1500     andwf   0, 0, 0x1        	ANDWF	_ep_bdt, W, B
000734   6e01     movwf   0x1, 0           	MOVWF	r0x01
000736   4001     rrncf   0x1, 0, 0        	RRNCF	r0x01, W
000738   40e8     rrncf   0xe8, 0, 0       	RRNCF	WREG, W
00073a   0b3f     andlw   0x3f             	ANDLW	0x3f
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
                                           ;	.line	372; picUSB.c	if (PID == 0x0D)
00073c   0a0d     xorlw   0xd              	XORLW	0x0d
00073e   e103     bnz     0x746            	BNZ	_00300_DS_
                                           ;	.line	374; picUSB.c	SetupStage();
000740   ecea     call    0x7d4, 0         	CALL	_SetupStage
000742   f003
000744   d042     bra     0x7ca            	BRA	_00321_DS_
                                           _00300_DS_:
000746   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
                                           ;	.line	376; picUSB.c	else if (ctrlTransferStage == DATA_OUT_STAGE)
000748   51cd     movf    0xcd, 0, 0x1     	MOVF	_ctrlTransferStage, W, B
00074a   0a01     xorlw   0x1              	XORLW	0x01
00074c   e10f     bnz     0x76c            	BNZ	_00297_DS_
                                           ;	.line	380; picUSB.c	OutDataStage(0);
00074e   0e00     movlw   0                	MOVLW	0x00
000750   6ae5     clrf    0xe5, 0          	CLRF	POSTDEC1
000752   ec18     call    0x430, 0         	CALL	_OutDataStage
000754   f002
000756   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000758   0104     movlb   0x4              	BANKSEL	_ep_bdt
                                           ;	.line	383; picUSB.c	if(EP_OUT_BD(0).Stat.DTS)
00075a   ad00     btfss   0, 0x6, 0x1      	BTFSS	_ep_bdt, 6, B
00075c   d003     bra     0x764            	BRA	_00294_DS_
                                           ;	.line	384; picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTSEN;
00075e   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
000760   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
000762   d033     bra     0x7ca            	BRA	_00321_DS_
                                           _00294_DS_:
                                           ;	.line	386; picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
000764   0ec8     movlw   0xc8             	MOVLW	0xc8
000766   0104     movlb   0x4              	BANKSEL	_ep_bdt
000768   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
00076a   d02f     bra     0x7ca            	BRA	_00321_DS_
                                           _00297_DS_:
                                           ;	.line	392; picUSB.c	WaitForSetupStage();
00076c   ecaf     call    0xb5e, 0         	CALL	_WaitForSetupStage
00076e   f005
000770   d02c     bra     0x7ca            	BRA	_00321_DS_
                                           _00314_DS_:
000772   010f     movlb   0xf              	BANKSEL	_UADDR
                                           ;	.line	399; picUSB.c	if ((UADDR == 0) && (deviceState == ADDRESS))
000774   5138     movf    0x38, 0, 0x1     	MOVF	_UADDR, W, B
000776   e10c     bnz     0x790            	BNZ	_00305_DS_
000778   0104     movlb   0x4              	BANKSEL	_deviceState
00077a   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
00077c   0a04     xorlw   0x4              	XORLW	0x04
00077e   e108     bnz     0x790            	BNZ	_00305_DS_
                                           ;	.line	403; picUSB.c	UADDR = SetupPacket.wValue0;
000780   c502     movff   0x502, 0xf38     	MOVFF	(_SetupPacket + 2), _UADDR
000782   ff38
000784   010f     movlb   0xf              	BANKSEL	_UADDR
                                           ;	.line	404; picUSB.c	if(UADDR == 0)
000786   5138     movf    0x38, 0, 0x1     	MOVF	_UADDR, W, B
000788   e103     bnz     0x790            	BNZ	_00305_DS_
                                           ;	.line	407; picUSB.c	deviceState = DEFAULT;
00078a   0e03     movlw   0x3              	MOVLW	0x03
00078c   0104     movlb   0x4              	BANKSEL	_deviceState
00078e   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
                                           _00305_DS_:
000790   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
                                           ;	.line	410; picUSB.c	if (ctrlTransferStage == DATA_IN_STAGE)
000792   51cd     movf    0xcd, 0, 0x1     	MOVF	_ctrlTransferStage, W, B
000794   0a02     xorlw   0x2              	XORLW	0x02
000796   e10f     bnz     0x7b6            	BNZ	_00311_DS_
                                           ;	.line	413; picUSB.c	InDataStage(0);
000798   0e00     movlw   0                	MOVLW	0x00
00079a   6ae5     clrf    0xe5, 0          	CLRF	POSTDEC1
00079c   ec38     call    0x270, 0         	CALL	_InDataStage
00079e   f001
0007a0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0007a2   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 4)
                                           ;	.line	416; picUSB.c	if(EP_IN_BD(0).Stat.DTS)
0007a4   ad04     btfss   0x4, 0x6, 0x1    	BTFSS	(_ep_bdt + 4), 6, B
0007a6   d003     bra     0x7ae            	BRA	_00308_DS_
                                           ;	.line	417; picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTSEN;
0007a8   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
0007aa   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
0007ac   d00e     bra     0x7ca            	BRA	_00321_DS_
                                           _00308_DS_:
                                           ;	.line	419; picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
0007ae   0ec8     movlw   0xc8             	MOVLW	0xc8
0007b0   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 4)
0007b2   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
0007b4   d00a     bra     0x7ca            	BRA	_00321_DS_
                                           _00311_DS_:
                                           ;	.line	425; picUSB.c	WaitForSetupStage();
0007b6   ecaf     call    0xb5e, 0         	CALL	_WaitForSetupStage
0007b8   f005
0007ba   d007     bra     0x7ca            	BRA	_00321_DS_
                                           _00319_DS_:
                                           ;	.line	434; picUSB.c	if (!USTATbits.DIR) // If OUT
0007bc   b464     btfsc   0x64, 0x2, 0     	BTFSC	_USTATbits, 2
0007be   d005     bra     0x7ca            	BRA	_00321_DS_
                                           ;	.line	435; picUSB.c	usb_ep_data_out_callback(end_point);
0007c0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0007c2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007c4   ec15     call    0x2a, 0          	CALL	_usb_ep_data_out_callback
0007c6   f000
0007c8   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00321_DS_:
0007ca   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0007cc   f001
0007ce   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0007d0   f000
0007d2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__WaitForSetupStage	code
                                           _WaitForSetupStage:
000b5e   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
                                           ;	.line	347; picUSB.c	ctrlTransferStage = SETUP_STAGE;
000b60   6bcd     clrf    0xcd, 0x1        	CLRF	_ctrlTransferStage, B
                                           ;	.line	348; picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
000b62   0e40     movlw   0x40             	MOVLW	0x40
000b64   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 1)
000b66   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	349; picUSB.c	EP_OUT_BD(0).ADDR = PTR16(&SetupPacket);
000b68   0e00     movlw   0                	MOVLW	LOW(_SetupPacket)
                                           ; removed redundant BANKSEL
000b6a   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
000b6c   0e05     movlw   0x5              	MOVLW	HIGH(_SetupPacket)
                                           ; removed redundant BANKSEL
000b6e   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	351; picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTSEN;
000b70   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
000b72   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           ; removed redundant BANKSEL
                                           ;	.line	352; picUSB.c	EP_IN_BD(0).Stat.uc = 0x00;           // Give control to CPU
000b74   6b04     clrf    0x4, 0x1         	CLRF	(_ep_bdt + 4), B
000b76   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__SetupStage	code
                                           _SetupStage:
                                           ;	.line	278; picUSB.c	void SetupStage()
0007d4   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0007d6   ffe5
0007d8   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 4)
                                           ;	.line	282; picUSB.c	EP_IN_BD(0).Stat.uc &= ~BDS_UOWN;
0007da   5104     movf    0x4, 0, 0x1      	MOVF	(_ep_bdt + 4), W, B
0007dc   6e00     movwf   0, 0             	MOVWF	r0x00
0007de   9e00     bcf     0, 0x7, 0        	BCF	r0x00, 7
0007e0   5000     movf    0, 0, 0          	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0007e2   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
                                           ; removed redundant BANKSEL
                                           ;	.line	283; picUSB.c	EP_OUT_BD(0).Stat.uc &= ~BDS_UOWN;
0007e4   5100     movf    0, 0, 0x1        	MOVF	_ep_bdt, W, B
0007e6   6e00     movwf   0, 0             	MOVWF	r0x00
0007e8   9e00     bcf     0, 0x7, 0        	BCF	r0x00, 7
0007ea   5000     movf    0, 0, 0          	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0007ec   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
0007ee   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
                                           ;	.line	286; picUSB.c	ctrlTransferStage = SETUP_STAGE;
0007f0   6bcd     clrf    0xcd, 0x1        	CLRF	_ctrlTransferStage, B
0007f2   0104     movlb   0x4              	BANKSEL	_requestHandled
                                           ;	.line	287; picUSB.c	requestHandled = 0;                   // Default is that request hasn't been handled
0007f4   6bca     clrf    0xca, 0x1        	CLRF	_requestHandled, B
0007f6   0104     movlb   0x4              	BANKSEL	_wCount
                                           ;	.line	288; picUSB.c	wCount = 0;                           // No bytes transferred
0007f8   6bc6     clrf    0xc6, 0x1        	CLRF	_wCount, B
                                           ; removed redundant BANKSEL
0007fa   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
                                           ;	.line	291; picUSB.c	ProcessStandardRequest();
0007fc   ec4a     call    0x894, 0         	CALL	_ProcessStandardRequest
0007fe   f004
000800   0104     movlb   0x4              	BANKSEL	_requestHandled
                                           ;	.line	294; picUSB.c	if (!requestHandled)
000802   51ca     movf    0xca, 0, 0x1     	MOVF	_requestHandled, W, B
000804   e10b     bnz     0x81c            	BNZ	_00266_DS_
                                           ;	.line	297; picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
000806   0e40     movlw   0x40             	MOVLW	0x40
000808   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 1)
00080a   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	298; picUSB.c	EP_OUT_BD(0).ADDR = PTR16(&SetupPacket);
00080c   0e00     movlw   0                	MOVLW	LOW(_SetupPacket)
                                           ; removed redundant BANKSEL
00080e   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
000810   0e05     movlw   0x5              	MOVLW	HIGH(_SetupPacket)
                                           ; removed redundant BANKSEL
000812   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ; #	MOVLW	0x84
                                           ; #	MOVWF	_ep_bdt, B
                                           ; #	MOVLW	0x84
                                           ;	.line	299; picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_BSTALL;
000814   0e84     movlw   0x84             	MOVLW	0x84
                                           ; removed redundant BANKSEL
                                           ;	.line	300; picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_BSTALL;
000816   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           ; removed redundant BANKSEL
000818   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
00081a   d038     bra     0x88c            	BRA	_00267_DS_
                                           _00266_DS_:
00081c   0105     movlb   0x5              	BANKSEL	_SetupPacket
                                           ;	.line	303; picUSB.c	else if (SetupPacket.bmRequestType & 0x80)
00081e   af00     btfss   0, 0x7, 0x1      	BTFSS	_SetupPacket, 7, B
000820   d026     bra     0x86e            	BRA	_00263_DS_
000822   0104     movlb   0x4              	BANKSEL	(_wCount + 1)
                                           ;	.line	306; picUSB.c	if(SetupPacket.wLength < wCount)
000824   51c7     movf    0xc7, 0, 0x1     	MOVF	(_wCount + 1), W, B
000826   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 7)
000828   5d07     subwf   0x7, 0, 0x1      	SUBWF	(_SetupPacket + 7), W, B
00082a   e104     bnz     0x834            	BNZ	_00283_DS_
00082c   0104     movlb   0x4              	BANKSEL	_wCount
00082e   51c6     movf    0xc6, 0, 0x1     	MOVF	_wCount, W, B
000830   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 6)
000832   5d06     subwf   0x6, 0, 0x1      	SUBWF	(_SetupPacket + 6), W, B
                                           _00283_DS_:
000834   e204     bc      0x83e            	BC	_00261_DS_
                                           ;	.line	307; picUSB.c	wCount = SetupPacket.wLength;
000836   c506     movff   0x506, 0x4c6     	MOVFF	(_SetupPacket + 6), _wCount
000838   f4c6
00083a   c507     movff   0x507, 0x4c7     	MOVFF	(_SetupPacket + 7), (_wCount + 1)
00083c   f4c7
                                           _00261_DS_:
                                           ;	.line	309; picUSB.c	InDataStage(0);
00083e   0e00     movlw   0                	MOVLW	0x00
000840   6ae5     clrf    0xe5, 0          	CLRF	POSTDEC1
000842   ec38     call    0x270, 0         	CALL	_InDataStage
000844   f001
000846   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	310; picUSB.c	ctrlTransferStage = DATA_IN_STAGE;
000848   0e02     movlw   0x2              	MOVLW	0x02
00084a   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
00084c   6fcd     movwf   0xcd, 0x1        	MOVWF	_ctrlTransferStage, B
                                           ;	.line	312; picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
00084e   0e40     movlw   0x40             	MOVLW	0x40
000850   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 1)
000852   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	313; picUSB.c	EP_OUT_BD(0).ADDR = PTR16(&SetupPacket);
000854   0e00     movlw   0                	MOVLW	LOW(_SetupPacket)
                                           ; removed redundant BANKSEL
000856   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
000858   0e05     movlw   0x5              	MOVLW	HIGH(_SetupPacket)
                                           ; removed redundant BANKSEL
00085a   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	314; picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN;
00085c   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
00085e   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           ;	.line	317; picUSB.c	EP_IN_BD(0).ADDR = PTR16(&controlTransferBuffer);
000860   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
000862   6f06     movwf   0x6, 0x1         	MOVWF	(_ep_bdt + 6), B
000864   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
000866   6f07     movwf   0x7, 0x1         	MOVWF	(_ep_bdt + 7), B
                                           ;	.line	319; picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
000868   0ec8     movlw   0xc8             	MOVLW	0xc8
                                           ; removed redundant BANKSEL
00086a   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
00086c   d00f     bra     0x88c            	BRA	_00267_DS_
                                           _00263_DS_:
                                           ;	.line	325; picUSB.c	ctrlTransferStage = DATA_OUT_STAGE;
00086e   0e01     movlw   0x1              	MOVLW	0x01
000870   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
000872   6fcd     movwf   0xcd, 0x1        	MOVWF	_ctrlTransferStage, B
000874   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 5)
                                           ;	.line	328; picUSB.c	EP_IN_BD(0).Cnt = 0;
000876   6b05     clrf    0x5, 0x1         	CLRF	(_ep_bdt + 5), B
                                           ;	.line	329; picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
000878   0ec8     movlw   0xc8             	MOVLW	0xc8
                                           ; removed redundant BANKSEL
00087a   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
                                           ;	.line	332; picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
00087c   0e40     movlw   0x40             	MOVLW	0x40
                                           ; removed redundant BANKSEL
00087e   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	333; picUSB.c	EP_OUT_BD(0).ADDR = PTR16(&controlTransferBuffer);
000880   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
000882   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
000884   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
000886   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	335; picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
000888   0ec8     movlw   0xc8             	MOVLW	0xc8
                                           ; removed redundant BANKSEL
00088a   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           _00267_DS_:
                                           ;	.line	339; picUSB.c	UCONbits.PKTDIS = 0;
00088c   9865     bcf     0x65, 0x4, 0     	BCF	_UCONbits, 4
00088e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000890   f000
000892   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__OutDataStage	code
                                           _OutDataStage:
                                           ;	.line	255; picUSB.c	void OutDataStage(unsigned char ep)
000430   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000432   ffe5
000434   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000436   ffd9
000438   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00043a   ffe5
00043c   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00043e   ffe5
000440   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000442   ffe5
000444   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000446   ffe5
000448   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00044a   ffe5
00044c   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00044e   ffe5
000450   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000452   ffe5
000454   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000456   ffe5
000458   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00045a   ffe5
00045c   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
00045e   ffe5
000460   0e02     movlw   0x2              	MOVLW	0x02
000462   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000464   f000
                                           ;	.line	259; picUSB.c	bufferSize = ((0x03 & EP_OUT_BD(ep).Stat.uc) << 8) | EP_OUT_BD(ep).Cnt;
000466   4400     rlncf   0, 0, 0          	RLNCF	r0x00, W
000468   0bfe     andlw   0xfe             	ANDLW	0xfe
                                           ; #	MOVWF	r0x01
                                           ; #;;multiply lit val:0x04 by variable r0x01 and store in r0x00
                                           ; #	MOVF	r0x01, W
00046a   0d04     mullw   0x4              	MULLW	0x04
00046c   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
00046e   6e02     movwf   0x2, 0           	MOVWF	r0x02
000470   cff3     movff   0xff3, 0         	MOVFF	PRODL, r0x00
000472   f000
000474   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000476   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000478   6e01     movwf   0x1, 0           	MOVWF	r0x01
00047a   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00047c   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00047e   6e03     movwf   0x3, 0           	MOVWF	r0x03
000480   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
000482   ffe9
000484   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
000486   ffea
000488   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
00048a   f001
00048c   0e03     movlw   0x3              	MOVLW	0x03
00048e   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
000490   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000492   6e05     movwf   0x5, 0           	MOVWF	r0x05
000494   6a04     clrf    0x4, 0           	CLRF	r0x04
000496   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000498   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00049a   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00049c   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00049e   4a00     infsnz  0, 0x1, 0        	INFSNZ	r0x00, F
0004a0   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
0004a2   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0004a4   ffe9
0004a6   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0004a8   ffea
0004aa   cfef     movff   0xfef, 0         	MOVFF	INDF0, r0x00
0004ac   f000
0004ae   6a01     clrf    0x1, 0           	CLRF	r0x01
0004b0   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0004b2   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
0004b4   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0004b6   1201     iorwf   0x1, 0x1, 0      	IORWF	r0x01, F
                                           ;	.line	262; picUSB.c	wCount = wCount + bufferSize;
0004b8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0004ba   0104     movlb   0x4              	BANKSEL	_wCount
0004bc   27c6     addwf   0xc6, 0x1, 0x1   	ADDWF	_wCount, F, B
0004be   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0004c0   23c7     addwfc  0xc7, 0x1, 0x1   	ADDWFC	(_wCount + 1), F, B
                                           ;	.line	264; picUSB.c	outPtr = (byte*)&controlTransferBuffer;
0004c2   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
0004c4   0104     movlb   0x4              	BANKSEL	(_outPtr + 1)
0004c6   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
0004c8   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
0004ca   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
0004cc   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
0004ce   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
                                           ;	.line	266; picUSB.c	for (i=0;i<bufferSize;i++)
0004d0   6a02     clrf    0x2, 0           	CLRF	r0x02
0004d2   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00238_DS_:
0004d4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0004d6   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0004d8   e102     bnz     0x4de            	BNZ	_00253_DS_
0004da   5000     movf    0, 0, 0          	MOVF	r0x00, W
0004dc   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00253_DS_:
0004de   e22c     bc      0x538            	BC	_00242_DS_
                                           ;	.line	267; picUSB.c	*inPtr++ = *outPtr++;
0004e0   c4c3     movff   0x4c3, 0x4       	MOVFF	_inPtr, r0x04
0004e2   f004
0004e4   c4c4     movff   0x4c4, 0x5       	MOVFF	(_inPtr + 1), r0x05
0004e6   f005
0004e8   c4c5     movff   0x4c5, 0x6       	MOVFF	(_inPtr + 2), r0x06
0004ea   f006
0004ec   c4c0     movff   0x4c0, 0x7       	MOVFF	_outPtr, r0x07
0004ee   f007
0004f0   c4c1     movff   0x4c1, 0x8       	MOVFF	(_outPtr + 1), r0x08
0004f2   f008
0004f4   c4c2     movff   0x4c2, 0x9       	MOVFF	(_outPtr + 2), r0x09
0004f6   f009
0004f8   c007     movff   0x7, 0xfe9       	MOVFF	r0x07, FSR0L
0004fa   ffe9
0004fc   c008     movff   0x8, 0xff3       	MOVFF	r0x08, PRODL
0004fe   fff3
000500   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
000502   ec90     call    0xb20, 0         	CALL	__gptrget1
000504   f005
000506   6e07     movwf   0x7, 0           	MOVWF	r0x07
000508   0104     movlb   0x4              	BANKSEL	_outPtr
00050a   2bc0     incf    0xc0, 0x1, 0x1   	INCF	_outPtr, F, B
00050c   e303     bnc     0x514            	BNC	_00254_DS_
                                           ; removed redundant BANKSEL
00050e   3fc1     incfsz  0xc1, 0x1, 0x1   	INCFSZ	(_outPtr + 1), F, B
000510   d001     bra     0x514            	BRA	_10413_DS_
                                           ; removed redundant BANKSEL
000512   2bc2     incf    0xc2, 0x1, 0x1   	INCF	(_outPtr + 2), F, B
                                           _10413_DS_:
                                           _00254_DS_:
000514   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000516   ffe5
000518   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
00051a   ffe9
00051c   c005     movff   0x5, 0xff3       	MOVFF	r0x05, PRODL
00051e   fff3
000520   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000522   ecc7     call    0xb8e, 0         	CALL	__gptrput1
000524   f005
000526   0104     movlb   0x4              	BANKSEL	_inPtr
000528   2bc3     incf    0xc3, 0x1, 0x1   	INCF	_inPtr, F, B
00052a   e303     bnc     0x532            	BNC	_00255_DS_
                                           ; removed redundant BANKSEL
00052c   3fc4     incfsz  0xc4, 0x1, 0x1   	INCFSZ	(_inPtr + 1), F, B
00052e   d001     bra     0x532            	BRA	_20414_DS_
                                           ; removed redundant BANKSEL
000530   2bc5     incf    0xc5, 0x1, 0x1   	INCF	(_inPtr + 2), F, B
                                           _20414_DS_:
                                           _00255_DS_:
                                           ;	.line	266; picUSB.c	for (i=0;i<bufferSize;i++)
000532   4a02     infsnz  0x2, 0x1, 0      	INFSNZ	r0x02, F
000534   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000536   d7ce     bra     0x4d4            	BRA	_00238_DS_
                                           _00242_DS_:
000538   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
00053a   f009
00053c   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
00053e   f008
000540   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
000542   f007
000544   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000546   f006
000548   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
00054a   f005
00054c   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00054e   f004
000550   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000552   f003
000554   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000556   f002
000558   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00055a   f001
00055c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00055e   f000
000560   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000562   ffd9
000564   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__InDataStage	code
                                           _InDataStage:
                                           ;	.line	221; picUSB.c	void InDataStage(unsigned char ep)
000270   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000272   ffe5
000274   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000276   ffd9
000278   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00027a   ffe5
00027c   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00027e   ffe5
000280   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000282   ffe5
000284   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000286   ffe5
000288   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00028a   ffe5
00028c   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00028e   ffe5
000290   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000292   ffe5
000294   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000296   ffe5
000298   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00029a   ffe5
00029c   0e02     movlw   0x2              	MOVLW	0x02
00029e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0002a0   f000
                                           ;	.line	227; picUSB.c	if(wCount < EP0_BUFFER_SIZE)
0002a2   0e00     movlw   0                	MOVLW	0x00
0002a4   0104     movlb   0x4              	BANKSEL	(_wCount + 1)
0002a6   5dc7     subwf   0xc7, 0, 0x1     	SUBWF	(_wCount + 1), W, B
0002a8   e102     bnz     0x2ae            	BNZ	_00225_DS_
0002aa   0e40     movlw   0x40             	MOVLW	0x40
                                           ; removed redundant BANKSEL
0002ac   5dc6     subwf   0xc6, 0, 0x1     	SUBWF	_wCount, W, B
                                           _00225_DS_:
0002ae   e205     bc      0x2ba            	BC	_00207_DS_
                                           ;	.line	228; picUSB.c	bufferSize = wCount;
0002b0   c4c6     movff   0x4c6, 0x1       	MOVFF	_wCount, r0x01
0002b2   f001
0002b4   c4c7     movff   0x4c7, 0x2       	MOVFF	(_wCount + 1), r0x02
0002b6   f002
0002b8   d003     bra     0x2c0            	BRA	_00208_DS_
                                           _00207_DS_:
                                           ;	.line	230; picUSB.c	bufferSize = EP0_BUFFER_SIZE;
0002ba   0e40     movlw   0x40             	MOVLW	0x40
0002bc   6e01     movwf   0x1, 0           	MOVWF	r0x01
0002be   6a02     clrf    0x2, 0           	CLRF	r0x02
                                           _00208_DS_:
                                           ;	.line	234; picUSB.c	EP_IN_BD(ep).Stat.uc &= ~(BDS_BC8 | BDS_BC9);
0002c0   4400     rlncf   0, 0, 0          	RLNCF	r0x00, W
0002c2   0bfe     andlw   0xfe             	ANDLW	0xfe
0002c4   6e03     movwf   0x3, 0           	MOVWF	r0x03
0002c6   2803     incf    0x3, 0, 0        	INCF	r0x03, W
                                           ; #	MOVWF	r0x00
                                           ; #;;multiply lit val:0x04 by variable r0x00 and store in r0x00
                                           ; #	MOVF	r0x00, W
0002c8   0d04     mullw   0x4              	MULLW	0x04
0002ca   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
0002cc   6e03     movwf   0x3, 0           	MOVWF	r0x03
0002ce   cff3     movff   0xff3, 0         	MOVFF	PRODL, r0x00
0002d0   f000
0002d2   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0002d4   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0002d6   6e04     movwf   0x4, 0           	MOVWF	r0x04
0002d8   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0002da   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
0002dc   6e05     movwf   0x5, 0           	MOVWF	r0x05
0002de   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0002e0   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0002e2   6e06     movwf   0x6, 0           	MOVWF	r0x06
0002e4   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0002e6   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
0002e8   6e07     movwf   0x7, 0           	MOVWF	r0x07
0002ea   c006     movff   0x6, 0xfe9       	MOVFF	r0x06, FSR0L
0002ec   ffe9
0002ee   c007     movff   0x7, 0xfea       	MOVFF	r0x07, FSR0H
0002f0   ffea
0002f2   cfef     movff   0xfef, 0x6       	MOVFF	INDF0, r0x06
0002f4   f006
0002f6   0efc     movlw   0xfc             	MOVLW	0xfc
0002f8   1606     andwf   0x6, 0x1, 0      	ANDWF	r0x06, F
0002fa   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
0002fc   ffe9
0002fe   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
000300   ffea
000302   c006     movff   0x6, 0xfef       	MOVFF	r0x06, INDF0
000304   ffef
                                           ;	.line	235; picUSB.c	EP_IN_BD(ep).Stat.uc |= (byte)((bufferSize & 0x0300) >> 8);
000306   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000308   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
00030a   6e04     movwf   0x4, 0           	MOVWF	r0x04
00030c   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00030e   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
000310   6e05     movwf   0x5, 0           	MOVWF	r0x05
000312   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000314   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000316   6e06     movwf   0x6, 0           	MOVWF	r0x06
000318   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00031a   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
00031c   6e07     movwf   0x7, 0           	MOVWF	r0x07
00031e   c006     movff   0x6, 0xfe9       	MOVFF	r0x06, FSR0L
000320   ffe9
000322   c007     movff   0x7, 0xfea       	MOVFF	r0x07, FSR0H
000324   ffea
000326   cfef     movff   0xfef, 0x6       	MOVFF	INDF0, r0x06
000328   f006
00032a   0e03     movlw   0x3              	MOVLW	0x03
00032c   1402     andwf   0x2, 0, 0        	ANDWF	r0x02, W
                                           ; #	MOVWF	r0x08
                                           ; #	MOVF	r0x08, W
00032e   1206     iorwf   0x6, 0x1, 0      	IORWF	r0x06, F
000330   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000332   ffe9
000334   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
000336   ffea
000338   c006     movff   0x6, 0xfef       	MOVFF	r0x06, INDF0
00033a   ffef
                                           ;	.line	236; picUSB.c	EP_IN_BD(ep).Cnt = (byte)(bufferSize & 0xFF);
00033c   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
00033e   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000340   6e04     movwf   0x4, 0           	MOVWF	r0x04
000342   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000344   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
000346   6e05     movwf   0x5, 0           	MOVWF	r0x05
000348   4a04     infsnz  0x4, 0x1, 0      	INFSNZ	r0x04, F
00034a   2a05     incf    0x5, 0x1, 0      	INCF	r0x05, F
00034c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00034e   6e06     movwf   0x6, 0           	MOVWF	r0x06
000350   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000352   ffe9
000354   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
000356   ffea
000358   c006     movff   0x6, 0xfef       	MOVFF	r0x06, INDF0
00035a   ffef
                                           ;	.line	237; picUSB.c	EP_IN_BD(ep).ADDR = PTR16(&controlTransferBuffer);
00035c   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
00035e   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000360   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000362   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000364   0e02     movlw   0x2              	MOVLW	0x02
000366   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000368   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
00036a   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
00036c   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
00036e   6e04     movwf   0x4, 0           	MOVWF	r0x04
000370   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
000372   6e05     movwf   0x5, 0           	MOVWF	r0x05
000374   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000376   ffe9
000378   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
00037a   ffea
00037c   c004     movff   0x4, 0xfee       	MOVFF	r0x04, POSTINC0
00037e   ffee
000380   c005     movff   0x5, 0xfef       	MOVFF	r0x05, INDF0
000382   ffef
                                           ;	.line	242; picUSB.c	wCount = wCount - bufferSize;
000384   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000386   0104     movlb   0x4              	BANKSEL	_wCount
000388   5fc6     subwf   0xc6, 0x1, 0x1   	SUBWF	_wCount, F, B
00038a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
00038c   5bc7     subwfb  0xc7, 0x1, 0x1   	SUBWFB	(_wCount + 1), F, B
                                           ;	.line	245; picUSB.c	inPtr = (byte *)&controlTransferBuffer;
00038e   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
000390   0104     movlb   0x4              	BANKSEL	(_inPtr + 1)
000392   6fc4     movwf   0xc4, 0x1        	MOVWF	(_inPtr + 1), B
000394   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
000396   6fc3     movwf   0xc3, 0x1        	MOVWF	_inPtr, B
000398   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
00039a   6fc5     movwf   0xc5, 0x1        	MOVWF	(_inPtr + 2), B
                                           ;	.line	247; picUSB.c	for (i=0;i<bufferSize;i++)
00039c   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00209_DS_:
00039e   c000     movff   0, 0x3           	MOVFF	r0x00, r0x03
0003a0   f003
0003a2   6a04     clrf    0x4, 0           	CLRF	r0x04
0003a4   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0003a6   5c04     subwf   0x4, 0, 0        	SUBWF	r0x04, W
0003a8   e102     bnz     0x3ae            	BNZ	_00231_DS_
0003aa   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0003ac   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
                                           _00231_DS_:
0003ae   e22b     bc      0x406            	BC	_00213_DS_
                                           ;	.line	248; picUSB.c	*inPtr++ = *outPtr++;
0003b0   c4c3     movff   0x4c3, 0x3       	MOVFF	_inPtr, r0x03
0003b2   f003
0003b4   c4c4     movff   0x4c4, 0x4       	MOVFF	(_inPtr + 1), r0x04
0003b6   f004
0003b8   c4c5     movff   0x4c5, 0x5       	MOVFF	(_inPtr + 2), r0x05
0003ba   f005
0003bc   c4c0     movff   0x4c0, 0x6       	MOVFF	_outPtr, r0x06
0003be   f006
0003c0   c4c1     movff   0x4c1, 0x7       	MOVFF	(_outPtr + 1), r0x07
0003c2   f007
0003c4   c4c2     movff   0x4c2, 0x8       	MOVFF	(_outPtr + 2), r0x08
0003c6   f008
0003c8   c006     movff   0x6, 0xfe9       	MOVFF	r0x06, FSR0L
0003ca   ffe9
0003cc   c007     movff   0x7, 0xff3       	MOVFF	r0x07, PRODL
0003ce   fff3
0003d0   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0003d2   ec90     call    0xb20, 0         	CALL	__gptrget1
0003d4   f005
0003d6   6e06     movwf   0x6, 0           	MOVWF	r0x06
0003d8   0104     movlb   0x4              	BANKSEL	_outPtr
0003da   2bc0     incf    0xc0, 0x1, 0x1   	INCF	_outPtr, F, B
0003dc   e303     bnc     0x3e4            	BNC	_00232_DS_
                                           ; removed redundant BANKSEL
0003de   3fc1     incfsz  0xc1, 0x1, 0x1   	INCFSZ	(_outPtr + 1), F, B
0003e0   d001     bra     0x3e4            	BRA	_30415_DS_
                                           ; removed redundant BANKSEL
0003e2   2bc2     incf    0xc2, 0x1, 0x1   	INCF	(_outPtr + 2), F, B
                                           _30415_DS_:
                                           _00232_DS_:
0003e4   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0003e6   ffe5
0003e8   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0003ea   ffe9
0003ec   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0003ee   fff3
0003f0   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0003f2   ecc7     call    0xb8e, 0         	CALL	__gptrput1
0003f4   f005
0003f6   0104     movlb   0x4              	BANKSEL	_inPtr
0003f8   2bc3     incf    0xc3, 0x1, 0x1   	INCF	_inPtr, F, B
0003fa   e303     bnc     0x402            	BNC	_00233_DS_
                                           ; removed redundant BANKSEL
0003fc   3fc4     incfsz  0xc4, 0x1, 0x1   	INCFSZ	(_inPtr + 1), F, B
0003fe   d001     bra     0x402            	BRA	_40416_DS_
                                           ; removed redundant BANKSEL
000400   2bc5     incf    0xc5, 0x1, 0x1   	INCF	(_inPtr + 2), F, B
                                           _40416_DS_:
                                           _00233_DS_:
                                           ;	.line	247; picUSB.c	for (i=0;i<bufferSize;i++)
000402   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000404   d7cc     bra     0x39e            	BRA	_00209_DS_
                                           _00213_DS_:
000406   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
000408   f008
00040a   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
00040c   f007
00040e   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000410   f006
000412   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000414   f005
000416   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000418   f004
00041a   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00041c   f003
00041e   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000420   f002
000422   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000424   f001
000426   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000428   f000
00042a   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00042c   ffd9
00042e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__ProcessStandardRequest	code
                                           _ProcessStandardRequest:
000894   0105     movlb   0x5              	BANKSEL	_SetupPacket
                                           ;	.line	130; picUSB.c	if((SetupPacket.bmRequestType & 0x60) != 0x00)
000896   5100     movf    0, 0, 0x1        	MOVF	_SetupPacket, W, B
                                           ; #	ANDLW	0x60
                                           ; #	BTFSC	STATUS, 2
                                           ; #	GOTO	_00142_DS_
                                           ; #	GOTO	_00163_DS_
                                           ; #	MOVF	(_SetupPacket + 1), W, B
                                           ;	.line	133; picUSB.c	return;
000898   0b60     andlw   0x60             	ANDLW	0x60
                                           ;	.line	135; picUSB.c	if (SetupPacket.bRequest == SET_ADDRESS)
00089a   a4d8     btfss   0xd8, 0x2, 0     	BTFSS	STATUS, 2
00089c   d058     bra     0x94e            	BRA	_00163_DS_
                                           ; removed redundant BANKSEL
00089e   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
0008a0   0a05     xorlw   0x5              	XORLW	0x05
0008a2   e109     bnz     0x8b6            	BNZ	_00161_DS_
                                           ;	.line	141; picUSB.c	requestHandled = 1;
0008a4   0e01     movlw   0x1              	MOVLW	0x01
0008a6   0104     movlb   0x4              	BANKSEL	_requestHandled
0008a8   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	142; picUSB.c	deviceState = ADDRESS;
0008aa   0e04     movlw   0x4              	MOVLW	0x04
0008ac   0104     movlb   0x4              	BANKSEL	_deviceState
0008ae   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
                                           ;	.line	143; picUSB.c	deviceAddress = SetupPacket.wValue0;
0008b0   c502     movff   0x502, 0x4c9     	MOVFF	(_SetupPacket + 2), _deviceAddress
0008b2   f4c9
0008b4   d04c     bra     0x94e            	BRA	_00163_DS_
                                           _00161_DS_:
0008b6   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	146; picUSB.c	else if (SetupPacket.bRequest == GET_DESCRIPTOR)
0008b8   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
0008ba   0a06     xorlw   0x6              	XORLW	0x06
0008bc   e103     bnz     0x8c4            	BNZ	_00158_DS_
                                           ;	.line	148; picUSB.c	GetDescriptor();
0008be   ecb3     call    0x566, 0         	CALL	_GetDescriptor
0008c0   f002
0008c2   d045     bra     0x94e            	BRA	_00163_DS_
                                           _00158_DS_:
0008c4   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	151; picUSB.c	else if (SetupPacket.bRequest == SET_CONFIGURATION)
0008c6   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
0008c8   0a09     xorlw   0x9              	XORLW	0x09
0008ca   e112     bnz     0x8f0            	BNZ	_00155_DS_
                                           ;	.line	153; picUSB.c	requestHandled = 1;
0008cc   0e01     movlw   0x1              	MOVLW	0x01
0008ce   0104     movlb   0x4              	BANKSEL	_requestHandled
0008d0   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	154; picUSB.c	usb_configure_endpoints();
0008d2   eca1     call    0xb42, 0         	CALL	_usb_configure_endpoints
0008d4   f005
                                           ;	.line	155; picUSB.c	currentConfiguration = SetupPacket.wValue0;
0008d6   c502     movff   0x502, 0x4cc     	MOVFF	(_SetupPacket + 2), _currentConfiguration
0008d8   f4cc
0008da   0104     movlb   0x4              	BANKSEL	_currentConfiguration
                                           ;	.line	158; picUSB.c	if (currentConfiguration == 0)
0008dc   51cc     movf    0xcc, 0, 0x1     	MOVF	_currentConfiguration, W, B
0008de   e104     bnz     0x8e8            	BNZ	_00144_DS_
                                           ;	.line	161; picUSB.c	deviceState = ADDRESS;
0008e0   0e04     movlw   0x4              	MOVLW	0x04
0008e2   0104     movlb   0x4              	BANKSEL	_deviceState
0008e4   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
0008e6   d033     bra     0x94e            	BRA	_00163_DS_
                                           _00144_DS_:
                                           ;	.line	164; picUSB.c	deviceState = CONFIGURED;
0008e8   0e05     movlw   0x5              	MOVLW	0x05
0008ea   0104     movlb   0x4              	BANKSEL	_deviceState
0008ec   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
0008ee   d02f     bra     0x94e            	BRA	_00163_DS_
                                           _00155_DS_:
0008f0   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	171; picUSB.c	else if (SetupPacket.bRequest == GET_CONFIGURATION)
0008f2   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
0008f4   0a08     xorlw   0x8              	XORLW	0x08
0008f6   e10f     bnz     0x916            	BNZ	_00152_DS_
                                           ;	.line	173; picUSB.c	requestHandled = 1;
0008f8   0e01     movlw   0x1              	MOVLW	0x01
0008fa   0104     movlb   0x4              	BANKSEL	_requestHandled
0008fc   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	174; picUSB.c	outPtr = (byte*)&currentConfiguration;
0008fe   0e04     movlw   0x4              	MOVLW	HIGH(_currentConfiguration)
000900   0104     movlb   0x4              	BANKSEL	(_outPtr + 1)
000902   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
000904   0ecc     movlw   0xcc             	MOVLW	LOW(_currentConfiguration)
                                           ; removed redundant BANKSEL
000906   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
000908   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
00090a   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
                                           ;	.line	175; picUSB.c	wCount = 1;
00090c   0e01     movlw   0x1              	MOVLW	0x01
00090e   0104     movlb   0x4              	BANKSEL	_wCount
000910   6fc6     movwf   0xc6, 0x1        	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
000912   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
000914   d01c     bra     0x94e            	BRA	_00163_DS_
                                           _00152_DS_:
000916   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	190; picUSB.c	else if (SetupPacket.bRequest == GET_INTERFACE)
000918   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
00091a   0a0a     xorlw   0xa              	XORLW	0x0a
00091c   e111     bnz     0x940            	BNZ	_00149_DS_
                                           ;	.line	194; picUSB.c	requestHandled = 1;
00091e   0e01     movlw   0x1              	MOVLW	0x01
000920   0104     movlb   0x4              	BANKSEL	_requestHandled
000922   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
000924   0105     movlb   0x5              	BANKSEL	_controlTransferBuffer
                                           ;	.line	195; picUSB.c	controlTransferBuffer[0] = 0;
000926   6b40     clrf    0x40, 0x1        	CLRF	_controlTransferBuffer, B
                                           ;	.line	196; picUSB.c	outPtr = (byte *)&controlTransferBuffer;
000928   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
00092a   0104     movlb   0x4              	BANKSEL	(_outPtr + 1)
00092c   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
00092e   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
000930   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
000932   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
000934   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
                                           ;	.line	197; picUSB.c	wCount = 1;
000936   0e01     movlw   0x1              	MOVLW	0x01
000938   0104     movlb   0x4              	BANKSEL	_wCount
00093a   6fc6     movwf   0xc6, 0x1        	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
00093c   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
00093e   d007     bra     0x94e            	BRA	_00163_DS_
                                           _00149_DS_:
000940   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	200; picUSB.c	else if (SetupPacket.bRequest == SET_INTERFACE)
000942   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
000944   0a0b     xorlw   0xb              	XORLW	0x0b
000946   e103     bnz     0x94e            	BNZ	_00163_DS_
                                           ;	.line	203; picUSB.c	requestHandled = 1;
000948   0e01     movlw   0x1              	MOVLW	0x01
00094a   0104     movlb   0x4              	BANKSEL	_requestHandled
00094c   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           _00163_DS_:
00094e   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__GetDescriptor	code
                                           _GetDescriptor:
                                           ;	.line	85; picUSB.c	static void GetDescriptor()
000566   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000568   ffe5
00056a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00056c   ffe5
00056e   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000570   ffe5
000572   0105     movlb   0x5              	BANKSEL	_SetupPacket
                                           ;	.line	87; picUSB.c	if(SetupPacket.bmRequestType == 0x80)
000574   5100     movf    0, 0, 0x1        	MOVF	_SetupPacket, W, B
000576   0a80     xorlw   0x80             	XORLW	0x80
000578   e001     bz      0x57c            	BZ	_00130_DS_
00057a   d064     bra     0x644            	BRA	_00115_DS_
                                           _00130_DS_:
00057c   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	92; picUSB.c	if (SetupPacket.wValue1 == DEVICE_DESCRIPTOR)
00057e   5103     movf    0x3, 0, 0x1      	MOVF	(_SetupPacket + 3), W, B
000580   0a01     xorlw   0x1              	XORLW	0x01
000582   e10f     bnz     0x5a2            	BNZ	_00111_DS_
                                           ;	.line	94; picUSB.c	requestHandled = 1;
000584   0e01     movlw   0x1              	MOVLW	0x01
000586   0104     movlb   0x4              	BANKSEL	_requestHandled
000588   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	95; picUSB.c	outPtr = (byte *)&device_descriptor;
00058a   0e00     movlw   0                	MOVLW	UPPER(_device_descriptor)
00058c   0104     movlb   0x4              	BANKSEL	(_outPtr + 2)
00058e   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
000590   0e09     movlw   0x9              	MOVLW	HIGH(_device_descriptor)
                                           ; removed redundant BANKSEL
000592   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
000594   0ee8     movlw   0xe8             	MOVLW	LOW(_device_descriptor)
                                           ; removed redundant BANKSEL
000596   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
                                           ;	.line	96; picUSB.c	wCount = sizeof(USB_Device_Descriptor);
000598   0e12     movlw   0x12             	MOVLW	0x12
00059a   0104     movlb   0x4              	BANKSEL	_wCount
00059c   6fc6     movwf   0xc6, 0x1        	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
00059e   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
0005a0   d051     bra     0x644            	BRA	_00115_DS_
                                           _00111_DS_:
0005a2   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	99; picUSB.c	else if (SetupPacket.wValue1 == CONFIGURATION_DESCRIPTOR)
0005a4   5103     movf    0x3, 0, 0x1      	MOVF	(_SetupPacket + 3), W, B
0005a6   0a02     xorlw   0x2              	XORLW	0x02
0005a8   e117     bnz     0x5d8            	BNZ	_00108_DS_
                                           ;	.line	101; picUSB.c	requestHandled = 1;
0005aa   0e01     movlw   0x1              	MOVLW	0x01
0005ac   0104     movlb   0x4              	BANKSEL	_requestHandled
0005ae   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	102; picUSB.c	outPtr = (byte *)&configuration_descriptor;
0005b0   0e00     movlw   0                	MOVLW	UPPER(_configuration_descriptor)
0005b2   0104     movlb   0x4              	BANKSEL	(_outPtr + 2)
0005b4   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
0005b6   0e09     movlw   0x9              	MOVLW	HIGH(_configuration_descriptor)
                                           ; removed redundant BANKSEL
0005b8   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
0005ba   0efa     movlw   0xfa             	MOVLW	LOW(_configuration_descriptor)
                                           ; removed redundant BANKSEL
0005bc   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
                                           ;	.line	103; picUSB.c	wCount = configuration_descriptor.Header.wTotalLength;
0005be   0efc     movlw   0xfc             	MOVLW	LOW(_configuration_descriptor + 2)
0005c0   6ef6     movwf   0xf6, 0          	MOVWF	TBLPTRL
0005c2   0e09     movlw   0x9              	MOVLW	HIGH(_configuration_descriptor + 2)
0005c4   6ef7     movwf   0xf7, 0          	MOVWF	TBLPTRH
0005c6   0e00     movlw   0                	MOVLW	UPPER(_configuration_descriptor + 2)
0005c8   6ef8     movwf   0xf8, 0          	MOVWF	TBLPTRU
0005ca   0009     tblrd   *+               	TBLRD*+	
0005cc   cff5     movff   0xff5, 0x4c6     	MOVFF	TABLAT, _wCount
0005ce   f4c6
0005d0   0009     tblrd   *+               	TBLRD*+	
0005d2   cff5     movff   0xff5, 0x4c7     	MOVFF	TABLAT, (_wCount + 1)
0005d4   f4c7
0005d6   d036     bra     0x644            	BRA	_00115_DS_
                                           _00108_DS_:
0005d8   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	106; picUSB.c	else if (SetupPacket.wValue1 == STRING_DESCRIPTOR)
0005da   5103     movf    0x3, 0, 0x1      	MOVF	(_SetupPacket + 3), W, B
0005dc   0a03     xorlw   0x3              	XORLW	0x03
0005de   e132     bnz     0x644            	BNZ	_00115_DS_
                                           ;	.line	108; picUSB.c	requestHandled = 1;
0005e0   0e01     movlw   0x1              	MOVLW	0x01
0005e2   0104     movlb   0x4              	BANKSEL	_requestHandled
0005e4   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           ; ;multiply lit val:0x03 by variable (_SetupPacket + 2) and store in r0x00
0005e6   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 2)
                                           ;	.line	110; picUSB.c	outPtr = string_descriptor[SetupPacket.wValue0];
0005e8   5102     movf    0x2, 0, 0x1      	MOVF	(_SetupPacket + 2), W, B
0005ea   0d03     mullw   0x3              	MULLW	0x03
0005ec   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
0005ee   6e01     movwf   0x1, 0           	MOVWF	r0x01
0005f0   cff3     movff   0xff3, 0         	MOVFF	PRODL, r0x00
0005f2   f000
0005f4   6a02     clrf    0x2, 0           	CLRF	r0x02
0005f6   0e46     movlw   0x46             	MOVLW	LOW(_string_descriptor)
0005f8   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0005fa   0e0a     movlw   0xa              	MOVLW	HIGH(_string_descriptor)
0005fc   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0005fe   0e00     movlw   0                	MOVLW	UPPER(_string_descriptor)
000600   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000602   c000     movff   0, 0xff6         	MOVFF	r0x00, TBLPTRL
000604   fff6
000606   c001     movff   0x1, 0xff7       	MOVFF	r0x01, TBLPTRH
000608   fff7
00060a   c002     movff   0x2, 0xff8       	MOVFF	r0x02, TBLPTRU
00060c   fff8
00060e   0009     tblrd   *+               	TBLRD*+	
000610   cff5     movff   0xff5, 0x4c0     	MOVFF	TABLAT, _outPtr
000612   f4c0
000614   0009     tblrd   *+               	TBLRD*+	
000616   cff5     movff   0xff5, 0x4c1     	MOVFF	TABLAT, (_outPtr + 1)
000618   f4c1
00061a   0009     tblrd   *+               	TBLRD*+	
00061c   cff5     movff   0xff5, 0x4c2     	MOVFF	TABLAT, (_outPtr + 2)
00061e   f4c2
                                           ;	.line	111; picUSB.c	wCount = *outPtr;
000620   c4c0     movff   0x4c0, 0         	MOVFF	_outPtr, r0x00
000622   f000
000624   c4c1     movff   0x4c1, 0x1       	MOVFF	(_outPtr + 1), r0x01
000626   f001
000628   c4c2     movff   0x4c2, 0x2       	MOVFF	(_outPtr + 2), r0x02
00062a   f002
00062c   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
00062e   ffe9
000630   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
000632   fff3
000634   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000636   ec90     call    0xb20, 0         	CALL	__gptrget1
000638   f005
00063a   6e00     movwf   0, 0             	MOVWF	r0x00
00063c   c000     movff   0, 0x4c6         	MOVFF	r0x00, _wCount
00063e   f4c6
000640   0104     movlb   0x4              	BANKSEL	(_wCount + 1)
000642   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
                                           _00115_DS_:
000644   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000646   f002
000648   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00064a   f001
00064c   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00064e   f000
000650   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1810 (0x0712) bytes ( 1.38%)
                                           ;           	  905 (0x0389) words
                                           ; udata size:	  334 (0x014e) bytes ( 9.49%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.2.1 #8163 (Oct 23 2012) (Linux)
                                           ; This file was generated Tue Dec 11 18:11:43 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f46j50
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	___uflags
                                           	global	__entry
                                           	global	__startup
                                           	global	__do_cinit
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_stack_end
                                           	extern	_TBLPTRU
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRL
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_TABLAT
                                           	extern	_POSTINC0
                                           	extern	_main
                                           	extern	_cinit
                                           
                                           
                                           	idata
                                           ___uflags	db	0x00
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_crt0iBoot4___entry	code	0X000000
                                           __entry:
000000   efbc     goto    0xb78            	goto __startup
000002   f005
                                           	
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_crt0iBoot4___do_cinit	code
                                           __do_cinit:
                                           	; TBLPTR = &cinit
000950   0ed4     movlw   0xd4             	movlw low(_cinit)
000952   6ef6     movwf   0xf6, 0          	movwf _TBLPTRL, 0
000954   0e0b     movlw   0xb              	movlw high(_cinit)
000956   6ef7     movwf   0xf7, 0          	movwf _TBLPTRH, 0
000958   0e00     movlw   0                	movlw upper(_cinit)
00095a   6ef8     movwf   0xf8, 0          	movwf _TBLPTRU, 0
                                           	; 0x05 = cinit.num_init
00095c   0009     tblrd   *+               	tblrd*+
00095e   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
000960   6e05     movwf   0x5, 0           	movwf 0x05, 0
000962   0009     tblrd   *+               	tblrd*+
000964   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
000966   6e06     movwf   0x6, 0           	movwf 0x05 + 1, 0
                                           	; while (0x05)
000968   5005     movf    0x5, 0, 0        	movf 0x05, w, 0
                                           test:
00096a   e102     bnz     0x970            	bnz cont1
00096c   5006     movf    0x6, 0, 0        	movf 0x05 + 1, w, 0
00096e   e03b     bz      0x9e6            	bz done
                                           cont1:
                                           	; Count down so we only have to look up the data in _cinit once.
                                           	; At this point we know that TBLPTR points to the top of the current
                                           	; entry in _cinit, so we can just start reading the from, to, and
                                           	; size values.
                                           	; read the source address low
000970   0009     tblrd   *+               	tblrd*+
000972   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
000974   6e00     movwf   0, 0             	movwf 0x00, 0
                                           	; source address high
000976   0009     tblrd   *+               	tblrd*+
000978   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
00097a   6e01     movwf   0x1, 0           	movwf 0x00 + 1, 0
                                           	; source address upper
00097c   0009     tblrd   *+               	tblrd*+
00097e   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
000980   6e02     movwf   0x2, 0           	movwf 0x00 + 2, 0
                                           	; skip 0 byte since it is stored as 0 32bit int
000982   0009     tblrd   *+               	tblrd*+
                                           	; read the destination address directly into FSR0
                                           	; destination address low
000984   0009     tblrd   *+               	tblrd*+
000986   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
000988   6ee9     movwf   0xe9, 0          	movwf _FSR0L, 0
                                           	; destination address high
00098a   0009     tblrd   *+               	tblrd*+
00098c   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
00098e   6eea     movwf   0xea, 0          	movwf _FSR0H, 0
                                           	; skip two bytes since it is stored as 0 32bit int
000990   0009     tblrd   *+               	tblrd*+
000992   0009     tblrd   *+               	tblrd*+
                                           	; read the size of data to transfer to destination address
000994   0009     tblrd   *+               	tblrd*+
000996   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
000998   6e03     movwf   0x3, 0           	movwf 0x03, 0
00099a   0009     tblrd   *+               	tblrd*+
00099c   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
00099e   6e04     movwf   0x4, 0           	movwf 0x03 + 1, 0
                                           	; skip two bytes since it is stored as 0 32bit int
0009a0   0009     tblrd   *+               	tblrd*+
0009a2   0009     tblrd   *+               	tblrd*+
                                           	; 0x00 = 0x07 ->from;
                                           	; FSR0 = 0x07 ->to;
                                           	; 0x03 = (unsigned short) 0x07 ->size;
                                           	; the table pointer now points to the next entry. Save it
                                           	; off since we will be using the table pointer to do the copying
                                           	; for the entry
                                           	; 0x07 = TBLPTR
0009a4   cff6     movff   0xff6, 0x7       	movff _TBLPTRL, 0x07
0009a6   f007
0009a8   cff7     movff   0xff7, 0x8       	movff _TBLPTRH, 0x07 + 1
0009aa   f008
0009ac   cff8     movff   0xff8, 0x9       	movff _TBLPTRU, 0x07 + 2
0009ae   f009
                                           	; now assign the source address to the table pointer
                                           	; TBLPTR = 0x00
0009b0   c000     movff   0, 0xff6         	movff 0x00, _TBLPTRL
0009b2   fff6
0009b4   c001     movff   0x1, 0xff7       	movff 0x00 + 1, _TBLPTRH
0009b6   fff7
0009b8   c002     movff   0x2, 0xff8       	movff 0x00 + 2, _TBLPTRU
0009ba   fff8
                                           	; while (0x03)
0009bc   5003     movf    0x3, 0, 0        	movf 0x03, w, 0
                                           copy_loop:
0009be   e102     bnz     0x9c4            	bnz copy_one_byte
0009c0   5004     movf    0x4, 0, 0        	movf 0x03 + 1, w, 0
0009c2   e007     bz      0x9d2            	bz done_copying
                                           copy_one_byte:
0009c4   0009     tblrd   *+               	tblrd*+
0009c6   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
0009c8   6eee     movwf   0xee, 0          	movwf _POSTINC0, 0
                                           	; decrement byte counter
0009ca   0603     decf    0x3, 0x1, 0      	decf 0x03, f, 0
0009cc   e2f8     bc      0x9be            	bc copy_loop
0009ce   0604     decf    0x4, 0x1, 0      	decf 0x03 + 1, f, 0
0009d0   d7f9     bra     0x9c4            	bra copy_one_byte
                                           done_copying:
                                           	; restore the table pointer for the next entry
                                           	; TBLPTR = 0x07
0009d2   c007     movff   0x7, 0xff6       	movff 0x07, _TBLPTRL
0009d4   fff6
0009d6   c008     movff   0x8, 0xff7       	movff 0x07 + 1, _TBLPTRH
0009d8   fff7
0009da   c009     movff   0x9, 0xff8       	movff 0x07 + 2, _TBLPTRU
0009dc   fff8
                                           	; decrement entry counter
0009de   0605     decf    0x5, 0x1, 0      	decf 0x05, f, 0
0009e0   e2c4     bc      0x96a            	bc test
0009e2   0606     decf    0x6, 0x1, 0      	decf 0x05 + 1, f, 0
0009e4   d7c5     bra     0x970            	bra cont1
                                           	; emit done label
                                           done:
0009e6   0012     return  0                	return
                                           	
                                           ; ; Starting pCode block
                                           S_crt0iBoot4___startup	code
                                           __startup:
                                           	; Initialize the stack pointer
000b78   ee17     lfsr    0x1, 0x7ff       	lfsr 1, _stack_end
000b7a   f0ff
000b7c   ee27     lfsr    0x2, 0x7ff       	lfsr 2, _stack_end
000b7e   f0ff
                                           	; 1st silicon does not do this on POR
000b80   6af8     clrf    0xf8, 0          	clrf _TBLPTRU, 0
                                           	; Initialize the flash memory access configuration.
                                           	; This is harmless for non-flash devices, so we do it on all parts.
000b82   84a6     bsf     0xa6, 0x2, 0     	bsf 0xa6, 2, 0 ; EECON1.WREN = 1; enable write to memory
000b84   82a6     bsf     0xa6, 0x1, 0     	bsf 0xa6, 1, 0 ; EECON1.WR = 1; Initiates 0 program memory erase cycle or write cycle
                                           	
                                           ;	.line	101; crt0iBoot4.c	_do_cinit ();
000b86   eca8     call    0x950, 0         	CALL	__do_cinit
000b88   f004
                                           ;	.line	104; crt0iBoot4.c	main ();
000b8a   ec29     call    0x652, 0         	CALL	_main
000b8c   f003
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  244 (0x00f4) bytes ( 0.19%)
                                           ;           	  122 (0x007a) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------------------------
                                           ;  stack.S - automatically allocate stack for PIC16 targets
                                           ;            with out the need for using the #pragma stack
                                           ;            directive
                                           ;
                                           ;  Copyright (C) 2006, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------
                                           
                                                   radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                                   global _stack
                                                   global _stack_end
                                           
                                           ; allocate space for stack
                                           stack_section   udata
                                           _stack          res     0xff
                                           _stack_end      res     1
                                           
                                                   end
