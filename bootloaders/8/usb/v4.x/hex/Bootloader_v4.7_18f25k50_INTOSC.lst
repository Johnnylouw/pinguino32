gplink-0.14.2 #774 (Oct 23 2012)
Copyright (c) 1998-2012 gputils project
Listing File Generated: 12-18-2012  18:50:52
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.2.1 #8163 (Oct 23 2012) (Linux)
                                           ; This file was generated Tue Dec 18 18:50:51 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f25k50
                                           	radix	dec
                                           	CONFIG	PLLSEL=PLL3X
                                           	CONFIG	CFGPLLEN=ON
                                           	CONFIG	CPUDIV=NOCLKDIV
                                           	CONFIG	LS48MHZ=SYS24X4
                                           	CONFIG	FOSC=INTOSCIO
                                           	CONFIG	PCLKEN=ON
                                           	CONFIG	FCMEN=OFF
                                           	CONFIG	IESO=OFF
                                           	CONFIG	nPWRTEN=OFF
                                           	CONFIG	BOREN=SBORDIS
                                           	CONFIG	BORV=190
                                           	CONFIG	nLPBOR=OFF
                                           	CONFIG	WDTEN=SWON
                                           	CONFIG	WDTPS=32768
                                           	CONFIG	CCP2MX=RC1
                                           	CONFIG	PBADEN=OFF
                                           	CONFIG	T3CMX=RC0
                                           	CONFIG	SDOMX=RC7
                                           	CONFIG	MCLRE=ON
                                           	CONFIG	STVREN=ON
                                           	CONFIG	LVP=ON
                                           	CONFIG	XINST=OFF
                                           	CONFIG	CP0=OFF
                                           	CONFIG	CP1=OFF
                                           	CONFIG	CP2=OFF
                                           	CONFIG	CP3=OFF
                                           	CONFIG	CPB=OFF
                                           	CONFIG	CPD=OFF
                                           	CONFIG	WRT0=OFF
                                           	CONFIG	WRT1=OFF
                                           	CONFIG	WRT2=OFF
                                           	CONFIG	WRT3=OFF
                                           	CONFIG	WRTC=OFF
                                           	CONFIG	WRTB=OFF
                                           	CONFIG	WRTD=OFF
                                           	CONFIG	EBTR0=OFF
                                           	CONFIG	EBTR1=OFF
                                           	CONFIG	EBTR2=OFF
                                           	CONFIG	EBTR3=OFF
                                           	CONFIG	EBTRB=OFF
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_delay
                                           	global	_start_write
                                           	global	_disable_boot
                                           	global	_usb_configure_endpoints
                                           	global	_usb_ep_data_out_callback
                                           	global	_main
                                           	global	_device_descriptor
                                           	global	_configuration_descriptor
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRSbits
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_UCONbits
                                           	extern	_USTATbits
                                           	extern	_UCFGbits
                                           	extern	_UADDRbits
                                           	extern	_UIEbits
                                           	extern	_UIRbits
                                           	extern	_UEIEbits
                                           	extern	_UEIRbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_SLRCONbits
                                           	extern	_VREFCON2bits
                                           	extern	_VREFCON1bits
                                           	extern	_VREFCON0bits
                                           	extern	_PMD0bits
                                           	extern	_PMD1bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTEbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_IOCCbits
                                           	extern	_CTMUICONbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_CCP2CONbits
                                           	extern	_ECCP2CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_CM2CON0bits
                                           	extern	_CM2CON1bits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTA1bits
                                           	extern	_TXSTA1bits
                                           	extern	_SPBRG1bits
                                           	extern	_SPBRGH1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ACTCONbits
                                           	extern	_STCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCP1DELbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_PSTR1CONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CONbits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCONbits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1ADDbits
                                           	extern	_SSPADDbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_SetupPacket
                                           	extern	_controlTransferBuffer
                                           	extern	_bootCmd
                                           	extern	_outPtr
                                           	extern	_inPtr
                                           	extern	_wCount
                                           	extern	_deviceState
                                           	extern	_selfPowered
                                           	extern	_currentConfiguration
                                           	extern	_ep_bdt
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS
                                           	extern	_VREGCON
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_UCON
                                           	extern	_USTAT
                                           	extern	_UCFG
                                           	extern	_UADDR
                                           	extern	_UIE
                                           	extern	_UIR
                                           	extern	_UEIE
                                           	extern	_UEIR
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_SLRCON
                                           	extern	_VREFCON2
                                           	extern	_VREFCON1
                                           	extern	_VREFCON0
                                           	extern	_PMD0
                                           	extern	_PMD1
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTE
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_IOCC
                                           	extern	_CTMUICON
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_CCP2CON
                                           	extern	_ECCP2CON
                                           	extern	_CM1CON0
                                           	extern	_CM2CON0
                                           	extern	_CM2CON1
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA1
                                           	extern	_TXSTA1
                                           	extern	_TXREG1
                                           	extern	_RCREG1
                                           	extern	_SPBRG1
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ACTCON
                                           	extern	_STCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCP1DEL
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON1
                                           	extern	_PSTR1CON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_EnableUSBModule
                                           	extern	_ProcessUSBTransactions
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           udata_main_0	udata
                                           _delay_i_1_6	res	2
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	386; src/main.c	byte t1_count = 0;
000538   6a00     clrf    0, 0             	CLRF	r0x00
00053a   0e70     movlw   0x70             	movlw 0x70 ; 0b01110000 : 111 = HFINTOSC (16 MHz)
00053c   6ed3     movwf   0xd3, 0          	movwf _OSCCON ; enable the 16MHz internal clock
                                           wait_hfintosc:
00053e   a4d3     btfss   0xd3, 0x2, 0     	btfss _OSCCON, 2 ; HFIOFS: HFINTOSC Frequency Stable bit
000540   d7fe     bra     0x53e            	bra wait_hfintosc ; wait HFINTOSC frequency is stable (HFIOFS=1)
000542   6b5b     clrf    0x5b, 0x1        	clrf _ANSELA ; all I/O to Digital mode
000544   6b5c     clrf    0x5c, 0x1        	clrf _ANSELB ; all I/O to Digital mode
000546   6b5d     clrf    0x5d, 0x1        	clrf _ANSELC ; all I/O to Digital mode
000548   9892     bcf     0x92, 0x4, 0     	bcf _TRISA, 4 ; led output
00054a   8889     bsf     0x89, 0x4, 0     	bsf _LATA, 4 ; led on
                                           	;bcf _PIR1, 0 ; PIR1bits.TMR1IF = 0;
00054c   0e31     movlw   0x31             	movlw b'00110001' ; prescaler 8 (0b11)
00054e   6ecd     movwf   0xcd, 0          	movwf _T1CON ; timer 1 on,
                                           	;bsf _INTCON, 6 ; Enable Peripheral interrupt (PEIE=bit6)
                                           	;bsf _INTCON, 7 ; Enable General interrupt (GIE=bit7)
000550   6aa6     clrf    0xa6, 0          	clrf _EECON1 ; EECON1=0
000552   0e14     movlw   0x14             	movlw b'00010100' ; (0x14) Enable pullup resistors and full speed mode
000554   010f     movlb   0xf              	banksel _UCFG
000556   6f62     movwf   0x62, 0x1        	movwf _UCFG, b
                                           	
                                           ;	.line	466; src/main.c	EP_IN_BD(1).ADDR = PTR16(&bootCmd);
000558   0e80     movlw   0x80             	MOVLW	LOW(_bootCmd)
00055a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00055c   0e04     movlw   0x4              	MOVLW	HIGH(_bootCmd)
00055e   6e02     movwf   0x2, 0           	MOVWF	r0x02
000560   6a03     clrf    0x3, 0           	CLRF	r0x03
000562   6a04     clrf    0x4, 0           	CLRF	r0x04
000564   6a03     clrf    0x3, 0           	CLRF	r0x03
000566   6a04     clrf    0x4, 0           	CLRF	r0x04
000568   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00056a   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 14)
00056c   6f0e     movwf   0xe, 0x1         	MOVWF	(_ep_bdt + 14), B
00056e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000570   6f0f     movwf   0xf, 0x1         	MOVWF	(_ep_bdt + 15), B
000572   0104     movlb   0x4              	BANKSEL	_currentConfiguration
                                           ;	.line	467; src/main.c	currentConfiguration = 0x00;
000574   6bce     clrf    0xce, 0x1        	CLRF	_currentConfiguration, B
000576   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	468; src/main.c	deviceState = DETACHED;
000578   6bcd     clrf    0xcd, 0x1        	CLRF	_deviceState, B
                                           ;	.line	471; src/main.c	do {
00057a   6a01     clrf    0x1, 0           	CLRF	r0x01
00057c   6a02     clrf    0x2, 0           	CLRF	r0x02
00057e   6a03     clrf    0x3, 0           	CLRF	r0x03
000580   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00220_DS_:
                                           ;	.line	472; src/main.c	EnableUSBModule();
000582   ec16     call    0xa2c, 0         	CALL	_EnableUSBModule
000584   f005
                                           ;	.line	473; src/main.c	ProcessUSBTransactions();
000586   ec97     call    0x92e, 0         	CALL	_ProcessUSBTransactions
000588   f004
                                           ;	.line	474; src/main.c	i = i + 1;
00058a   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
00058c   e304     bnc     0x596            	BNC	_00259_DS_
00058e   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
000590   e302     bnc     0x596            	BNC	_00259_DS_
000592   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
000594   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
                                           _00259_DS_:
                                           ;	.line	475; src/main.c	if (i == 0xFFFFF) break; 
000596   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000598   0aff     xorlw   0xff             	XORLW	0xff
00059a   e108     bnz     0x5ac            	BNZ	_00261_DS_
00059c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00059e   0aff     xorlw   0xff             	XORLW	0xff
0005a0   e105     bnz     0x5ac            	BNZ	_00261_DS_
0005a2   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0005a4   0a0f     xorlw   0xf              	XORLW	0x0f
0005a6   e102     bnz     0x5ac            	BNZ	_00261_DS_
0005a8   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0005aa   e004     bz      0x5b4            	BZ	_00222_DS_
                                           _00261_DS_:
0005ac   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	476; src/main.c	} while (deviceState != CONFIGURED);
0005ae   51cd     movf    0xcd, 0, 0x1     	MOVF	_deviceState, W, B
0005b0   0a05     xorlw   0x5              	XORLW	0x05
0005b2   e1e7     bnz     0x582            	BNZ	_00220_DS_
                                           _00222_DS_:
0005b4   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	479; src/main.c	if (deviceState != CONFIGURED)
0005b6   51cd     movf    0xcd, 0, 0x1     	MOVF	_deviceState, W, B
0005b8   0a05     xorlw   0x5              	XORLW	0x05
0005ba   e003     bz      0x5c2            	BZ	_00240_DS_
                                           ;	.line	481; src/main.c	t1_count = BOOT_TIMER_TICS;
0005bc   0ee5     movlw   0xe5             	MOVLW	0xe5
0005be   6e00     movwf   0, 0             	MOVWF	r0x00
0005c0   9889     bcf     0x89, 0x4, 0     	bcf _LATA, 4 ; led on
                                           	
                                           _00240_DS_:
                                           ;	.line	487; src/main.c	while (1)
0005c2   6a01     clrf    0x1, 0           	CLRF	r0x01
0005c4   6a02     clrf    0x2, 0           	CLRF	r0x02
                                           _00232_DS_:
                                           ;	.line	490; src/main.c	ProcessUSBTransactions();
0005c6   ec97     call    0x92e, 0         	CALL	_ProcessUSBTransactions
0005c8   f004
                                           ;	.line	493; src/main.c	if (led_counter == 0)
0005ca   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0005cc   1002     iorwf   0x2, 0, 0        	IORWF	r0x02, W
0005ce   e102     bnz     0x5d4            	BNZ	_00226_DS_
0005d0   0e10     movlw   0x10             	movlw 1 << 4 ; toggle
0005d2   1a89     xorwf   0x89, 0x1, 0     	xorwf _LATA, f ; the led
                                           	
                                           _00226_DS_:
                                           ;	.line	500; src/main.c	led_counter++;
0005d4   4a01     infsnz  0x1, 0x1, 0      	INFSNZ	r0x01, F
0005d6   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
                                           ;	.line	503; src/main.c	if (PIR1bits.TMR1IF == 1)
0005d8   6a03     clrf    0x3, 0           	CLRF	r0x03
0005da   b09e     btfsc   0x9e, 0, 0       	BTFSC	_PIR1bits, 0
0005dc   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0005de   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0005e0   0a01     xorlw   0x1              	XORLW	0x01
0005e2   e1f1     bnz     0x5c6            	BNZ	_00232_DS_
                                           ;	.line	505; src/main.c	t1_count++;
0005e4   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
                                           ;	.line	506; src/main.c	PIR1bits.TMR1IF = 0;
0005e6   909e     bcf     0x9e, 0, 0       	BCF	_PIR1bits, 0
                                           ;	.line	509; src/main.c	if (t1_count > BOOT_TIMER_TICS)
0005e8   0ee6     movlw   0xe6             	MOVLW	0xe6
0005ea   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
0005ec   e3ec     bnc     0x5c6            	BNC	_00232_DS_
                                           ;	.line	511; src/main.c	disable_boot();
0005ee   ec06     call    0xc, 0           	CALL	_disable_boot
0005f0   f000
0005f2   ef00     goto    0xc00            	goto 0x0C00 ; start user app
0005f4   f006
                                           	
0005f6   d7e7     bra     0x5c6            	BRA	_00232_DS_
0005f8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__usb_ep_data_out_callback	code
                                           _usb_ep_data_out_callback:
                                           ;	.line	193; src/main.c	void usb_ep_data_out_callback(char end_point)
00001c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00001e   ffe5
000020   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000022   ffd9
000024   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000026   ffe5
000028   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00002a   ffe5
00002c   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00002e   ffe5
000030   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000032   ffe5
000034   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000036   ffe5
000038   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00003a   ffe5
00003c   0e02     movlw   0x2              	MOVLW	0x02
00003e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000040   f000
000042   8889     bsf     0x89, 0x4, 0     	bsf _LATA, 4 ; led on
                                           	
                                           ;	.line	203; src/main.c	EP_IN_BD(end_point).Cnt = 0;
000044   4400     rlncf   0, 0, 0          	RLNCF	r0x00, W
000046   0bfe     andlw   0xfe             	ANDLW	0xfe
000048   6e01     movwf   0x1, 0           	MOVWF	r0x01
00004a   2801     incf    0x1, 0, 0        	INCF	r0x01, W
                                           ; #	MOVWF	r0x00
                                           ; #;;multiply lit val:0x04 by variable r0x00 and store in r0x00
                                           ; #	MOVF	r0x00, W
00004c   6e00     movwf   0, 0             	MOVWF	r0x00
00004e   0d04     mullw   0x4              	MULLW	0x04
000050   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
000052   be00     btfsc   0, 0x7, 0        	BTFSC	r0x00, 7
000054   0804     sublw   0x4              	SUBLW	0x04
000056   6e02     movwf   0x2, 0           	MOVWF	r0x02
000058   cff3     movff   0xff3, 0         	MOVFF	PRODL, r0x00
00005a   f000
00005c   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
00005e   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000060   6e03     movwf   0x3, 0           	MOVWF	r0x03
000062   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000064   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000066   6e04     movwf   0x4, 0           	MOVWF	r0x04
000068   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
00006a   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
00006c   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
00006e   ffe9
000070   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
000072   ffea
000074   0e00     movlw   0                	MOVLW	0x00
000076   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	206; src/main.c	TBLPTRU = bootCmd.addru;
000078   c484     movff   0x484, 0xff8     	MOVFF	(_bootCmd + 4), _TBLPTRU
00007a   fff8
                                           ;	.line	207; src/main.c	TBLPTRH = bootCmd.addrh;
00007c   c483     movff   0x483, 0xff7     	MOVFF	(_bootCmd + 3), _TBLPTRH
00007e   fff7
                                           ;	.line	208; src/main.c	TBLPTRL = bootCmd.addrl;
000080   c482     movff   0x482, 0xff6     	MOVFF	(_bootCmd + 2), _TBLPTRL
000082   fff6
000084   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	211; src/main.c	if (bootCmd.cmd ==  RESET)
000086   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
000088   0aff     xorlw   0xff             	XORLW	0xff
00008a   e105     bnz     0x96             	BNZ	_00140_DS_
                                           ;	.line	214; src/main.c	disable_boot();
00008c   ec06     call    0xc, 0           	CALL	_disable_boot
00008e   f000
000090   ef00     goto    0xc00            	goto 0x0C00 ; start user app
000092   f006
                                           	
000094   d090     bra     0x1b6            	BRA	_00141_DS_
                                           _00140_DS_:
000096   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	220; src/main.c	else if (bootCmd.cmd == READ_VERSION)
000098   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
00009a   e113     bnz     0xc2             	BNZ	_00137_DS_
                                           ;	.line	223; src/main.c	bootCmd.buffer[2] = MINOR_VERSION;
00009c   0e07     movlw   0x7              	MOVLW	0x07
                                           ; removed redundant BANKSEL
00009e   6f82     movwf   0x82, 0x1        	MOVWF	(_bootCmd + 2), B
                                           ;	.line	224; src/main.c	bootCmd.buffer[3] = MAJOR_VERSION;
0000a0   0e04     movlw   0x4              	MOVLW	0x04
                                           ; removed redundant BANKSEL
0000a2   6f83     movwf   0x83, 0x1        	MOVWF	(_bootCmd + 3), B
                                           ;	.line	226; src/main.c	EP_IN_BD(end_point).Cnt = 4;
0000a4   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0000a6   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0000a8   6e03     movwf   0x3, 0           	MOVWF	r0x03
0000aa   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0000ac   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0000ae   6e04     movwf   0x4, 0           	MOVWF	r0x04
0000b0   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
0000b2   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
0000b4   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0000b6   ffe9
0000b8   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
0000ba   ffea
0000bc   0e04     movlw   0x4              	MOVLW	0x04
0000be   6eef     movwf   0xef, 0          	MOVWF	INDF0
0000c0   d07a     bra     0x1b6            	BRA	_00141_DS_
                                           _00137_DS_:
0000c2   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	231; src/main.c	else if (bootCmd.cmd == READ_FLASH)
0000c4   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
0000c6   0a01     xorlw   0x1              	XORLW	0x01
0000c8   e127     bnz     0x118            	BNZ	_00134_DS_
                                           ;	.line	234; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
0000ca   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00147_DS_:
0000cc   0104     movlb   0x4              	BANKSEL	(_bootCmd + 1)
0000ce   5181     movf    0x81, 0, 0x1     	MOVF	(_bootCmd + 1), W, B
0000d0   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0000d2   e20f     bc      0xf2             	BC	_00150_DS_
0000d4   0009     tblrd   *+               	TBLRD*+ 
                                           ;	.line	237; src/main.c	bootCmd.xdat[counter] = TABLAT;
0000d6   0e85     movlw   0x85             	MOVLW	LOW(_bootCmd + 5)
0000d8   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
0000da   6e04     movwf   0x4, 0           	MOVWF	r0x04
0000dc   6a05     clrf    0x5, 0           	CLRF	r0x05
0000de   0e04     movlw   0x4              	MOVLW	HIGH(_bootCmd + 5)
0000e0   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
0000e2   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
0000e4   ffe9
0000e6   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
0000e8   ffea
0000ea   cff5     movff   0xff5, 0xfef     	MOVFF	_TABLAT, INDF0
0000ec   ffef
                                           ;	.line	234; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
0000ee   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0000f0   d7ed     bra     0xcc             	BRA	_00147_DS_
                                           _00150_DS_:
                                           ;	.line	241; src/main.c	EP_IN_BD(end_point).Cnt = 5 + bootCmd.len;
0000f2   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0000f4   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0000f6   6e03     movwf   0x3, 0           	MOVWF	r0x03
0000f8   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0000fa   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0000fc   6e04     movwf   0x4, 0           	MOVWF	r0x04
0000fe   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
000100   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
000102   0e05     movlw   0x5              	MOVLW	0x05
000104   0104     movlb   0x4              	BANKSEL	(_bootCmd + 1)
000106   2581     addwf   0x81, 0, 0x1     	ADDWF	(_bootCmd + 1), W, B
000108   6e05     movwf   0x5, 0           	MOVWF	r0x05
00010a   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
00010c   ffe9
00010e   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
000110   ffea
000112   c005     movff   0x5, 0xfef       	MOVFF	r0x05, INDF0
000114   ffef
000116   d04f     bra     0x1b6            	BRA	_00141_DS_
                                           _00134_DS_:
000118   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	245; src/main.c	else if (bootCmd.cmd == WRITE_FLASH)
00011a   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
00011c   0a02     xorlw   0x2              	XORLW	0x02
00011e   e128     bnz     0x170            	BNZ	_00131_DS_
                                           ;	.line	264; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
000120   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00151_DS_:
000122   0104     movlb   0x4              	BANKSEL	(_bootCmd + 1)
000124   5181     movf    0x81, 0, 0x1     	MOVF	(_bootCmd + 1), W, B
000126   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
000128   e20f     bc      0x148            	BC	_00154_DS_
                                           ;	.line	266; src/main.c	TABLAT = bootCmd.xdat[counter];     // present data to table latch
00012a   0e85     movlw   0x85             	MOVLW	LOW(_bootCmd + 5)
00012c   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
00012e   6e04     movwf   0x4, 0           	MOVWF	r0x04
000130   6a05     clrf    0x5, 0           	CLRF	r0x05
000132   0e04     movlw   0x4              	MOVLW	HIGH(_bootCmd + 5)
000134   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
000136   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000138   ffe9
00013a   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
00013c   ffea
00013e   cfef     movff   0xfef, 0xff5     	MOVFF	INDF0, _TABLAT
000140   fff5
000142   000d     tblwt   *+               	TBLWT*+ 
                                           ;	.line	264; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
000144   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000146   d7ed     bra     0x122            	BRA	_00151_DS_
                                           _00154_DS_:
000148   000a     tblrd   *-               	TBLRD*- 
                                           ;	.line	271; src/main.c	EECON1 = 0b10000100; // allows write (WREN=1) in flash (EEPGD=1)
00014a   0e84     movlw   0x84             	MOVLW	0x84
00014c   6ea6     movwf   0xa6, 0          	MOVWF	_EECON1
                                           ;	.line	272; src/main.c	start_write();
00014e   ec98     call    0xb30, 0         	CALL	_start_write
000150   f005
                                           ;	.line	301; src/main.c	EP_IN_BD(end_point).Cnt = 1;
000152   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000154   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000156   6e03     movwf   0x3, 0           	MOVWF	r0x03
000158   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00015a   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00015c   6e04     movwf   0x4, 0           	MOVWF	r0x04
00015e   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
000160   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
000162   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
000164   ffe9
000166   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
000168   ffea
00016a   0e01     movlw   0x1              	MOVLW	0x01
00016c   6eef     movwf   0xef, 0          	MOVWF	INDF0
00016e   d023     bra     0x1b6            	BRA	_00141_DS_
                                           _00131_DS_:
000170   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	305; src/main.c	else if (bootCmd.cmd ==  ERASE_FLASH)
000172   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
000174   0a03     xorlw   0x3              	XORLW	0x03
000176   e11f     bnz     0x1b6            	BNZ	_00141_DS_
                                           ;	.line	317; src/main.c	EECON1 = 0b10010100; // allows erase (WREN=1, FREE=1) in flash (EEPGD=1)
000178   0e94     movlw   0x94             	MOVLW	0x94
00017a   6ea6     movwf   0xa6, 0          	MOVWF	_EECON1
                                           ;	.line	318; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
00017c   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00155_DS_:
00017e   0104     movlb   0x4              	BANKSEL	(_bootCmd + 1)
000180   5181     movf    0x81, 0, 0x1     	MOVF	(_bootCmd + 1), W, B
000182   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
000184   e20a     bc      0x19a            	BC	_00158_DS_
                                           ;	.line	320; src/main.c	EECON1bits.FREE = 1;    // allow a program memory erase operation
000186   88a6     bsf     0xa6, 0x4, 0     	BSF	_EECON1bits, 4
                                           ;	.line	321; src/main.c	start_write();
000188   ec98     call    0xb30, 0         	CALL	_start_write
00018a   f005
                                           ;	.line	322; src/main.c	EECON1bits.FREE = 0;    // inhibit program memory erase operation
00018c   98a6     bcf     0xa6, 0x4, 0     	BCF	_EECON1bits, 4
00018e   0e40     movlw   0x40             	movlw 0x40 ; 0x40 + (TBLPTRL) -> TBLPTRL
000190   26f6     addwf   0xf6, 0x1, 0     	addwf _TBLPTRL, 1 ; (W) + (TBLPTRL) -> TBLPTRL
                                           	; (C) is affected
000192   0e00     movlw   0                	movlw 0x00 ; 0x00 + (TBLPTRH) + (C) -> TBLPTRH
000194   22f7     addwfc  0xf7, 0x1, 0     	addwfc _TBLPTRH, 1 ; (W) + (TBLPTRH) + (C) -> TBLPTRH
                                           	
                                           ;	.line	318; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
000196   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000198   d7f2     bra     0x17e            	BRA	_00155_DS_
                                           _00158_DS_:
                                           ;	.line	359; src/main.c	EP_IN_BD(end_point).Cnt = 1;
00019a   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
00019c   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
00019e   6e03     movwf   0x3, 0           	MOVWF	r0x03
0001a0   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0001a2   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0001a4   6e04     movwf   0x4, 0           	MOVWF	r0x04
0001a6   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
0001a8   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
0001aa   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0001ac   ffe9
0001ae   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
0001b0   ffea
0001b2   0e01     movlw   0x1              	MOVLW	0x01
0001b4   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00141_DS_:
                                           ;	.line	364; src/main.c	if (EP_IN_BD(end_point).Cnt > 0)
0001b6   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0001b8   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0001ba   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0001bc   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0001be   4a00     infsnz  0, 0x1, 0        	INFSNZ	r0x00, F
0001c0   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
0001c2   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0001c4   ffe9
0001c6   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0001c8   ffea
0001ca   cfef     movff   0xfef, 0         	MOVFF	INDF0, r0x00
0001cc   f000
0001ce   5000     movf    0, 0, 0          	MOVF	r0x00, W
0001d0   e009     bz      0x1e4            	BZ	_00146_DS_
0001d2   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 12)
                                           ;	.line	367; src/main.c	if (EP_IN_BD(1).Stat.DTS)
0001d4   ad0c     btfss   0xc, 0x6, 0x1    	BTFSS	(_ep_bdt + 12), 6, B
0001d6   d003     bra     0x1de            	BRA	_00143_DS_
                                           ;	.line	368; src/main.c	EP_IN_BD(1).Stat.uc = 0b10001000; // UOWN 1 DTS 0 DTSEN 1
0001d8   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
0001da   6f0c     movwf   0xc, 0x1         	MOVWF	(_ep_bdt + 12), B
0001dc   d003     bra     0x1e4            	BRA	_00146_DS_
                                           _00143_DS_:
                                           ;	.line	370; src/main.c	EP_IN_BD(1).Stat.uc = 0b11001000; // UOWN 1 DTS 1 DTSEN 1
0001de   0ec8     movlw   0xc8             	MOVLW	0xc8
0001e0   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 12)
0001e2   6f0c     movwf   0xc, 0x1         	MOVWF	(_ep_bdt + 12), B
                                           ; ;multiply lit val:0x04 by variable r0x01 and store in r0x01
                                           _00146_DS_:
                                           ;	.line	374; src/main.c	EP_OUT_BD(end_point).Cnt = EP1_BUFFER_SIZE;
0001e4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0001e6   0d04     mullw   0x4              	MULLW	0x04
0001e8   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
0001ea   be01     btfsc   0x1, 0x7, 0      	BTFSC	r0x01, 7
0001ec   0804     sublw   0x4              	SUBLW	0x04
0001ee   6e00     movwf   0, 0             	MOVWF	r0x00
0001f0   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
0001f2   f001
0001f4   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0001f6   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
0001f8   6e02     movwf   0x2, 0           	MOVWF	r0x02
0001fa   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0001fc   2000     addwfc  0, 0, 0          	ADDWFC	r0x00, W
0001fe   6e03     movwf   0x3, 0           	MOVWF	r0x03
000200   4a02     infsnz  0x2, 0x1, 0      	INFSNZ	r0x02, F
000202   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000204   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
000206   ffe9
000208   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
00020a   ffea
00020c   0e40     movlw   0x40             	MOVLW	0x40
00020e   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	376; src/main.c	EP_OUT_BD(end_point).Stat.uc = 0x80;      // UOWN 1
000210   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000212   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
000214   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000216   2200     addwfc  0, 0x1, 0        	ADDWFC	r0x00, F
000218   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
00021a   ffe9
00021c   c000     movff   0, 0xfea         	MOVFF	r0x00, FSR0H
00021e   ffea
000220   0e80     movlw   0x80             	MOVLW	0x80
000222   6eef     movwf   0xef, 0          	MOVWF	INDF0
000224   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000226   f005
000228   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00022a   f004
00022c   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00022e   f003
000230   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000232   f002
000234   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000236   f001
000238   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00023a   f000
00023c   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00023e   ffd9
000240   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__usb_configure_endpoints	code
                                           _usb_configure_endpoints:
                                           ;	.line	177; src/main.c	UEP1 = 0b00011110;
000a9a   0e1e     movlw   0x1e             	MOVLW	0x1e
000a9c   6e6b     movwf   0x6b, 0          	MOVWF	_UEP1
                                           ; #	MOVLW	0x40
                                           ; #	MOVWF	(_ep_bdt + 12), B
                                           ; #	MOVLW	0x40
                                           ;	.line	181; src/main.c	EP_IN_BD(1).Stat.uc  = 0b01000000;
000a9e   0e40     movlw   0x40             	MOVLW	0x40
000aa0   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 12)
                                           ;	.line	184; src/main.c	EP_OUT_BD(1).Cnt  = EP1_BUFFER_SIZE;
000aa2   6f0c     movwf   0xc, 0x1         	MOVWF	(_ep_bdt + 12), B
                                           ; removed redundant BANKSEL
000aa4   6f09     movwf   0x9, 0x1         	MOVWF	(_ep_bdt + 9), B
                                           ;	.line	185; src/main.c	EP_OUT_BD(1).ADDR = PTR16(&bootCmd);
000aa6   0e80     movlw   0x80             	MOVLW	LOW(_bootCmd)
                                           ; removed redundant BANKSEL
000aa8   6f0a     movwf   0xa, 0x1         	MOVWF	(_ep_bdt + 10), B
000aaa   0e04     movlw   0x4              	MOVLW	HIGH(_bootCmd)
                                           ; removed redundant BANKSEL
000aac   6f0b     movwf   0xb, 0x1         	MOVWF	(_ep_bdt + 11), B
                                           ;	.line	187; src/main.c	EP_OUT_BD(1).Stat.uc = 0b10000000;
000aae   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
000ab0   6f08     movwf   0x8, 0x1         	MOVWF	(_ep_bdt + 8), B
000ab2   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__disable_boot	code
                                           _disable_boot:
                                           ;	.line	156; src/main.c	T1CON = 0x00;
00000c   6acd     clrf    0xcd, 0          	CLRF	_T1CON
                                           ;	.line	157; src/main.c	UCON = 0x00;
00000e   6a60     clrf    0x60, 0          	CLRF	_UCON
                                           	;clrf _T1CON ; disable timer 1
                                           	;clrf _UCON ; disable USB
000010   8892     bsf     0x92, 0x4, 0     	bsf _TRISA, 4 ; led input
000012   9889     bcf     0x89, 0x4, 0     	bcf _LATA, 4 ; led off
                                           	;call _delay ; force timeout on USB
                                           	
                                           ;	.line	165; src/main.c	delay();
000014   ecde     call    0x9bc, 0         	CALL	_delay
000016   f004
                                           ; ; Starting pCode block
                                           S_main__start_write	code
                                           _start_write:
                                           	;bcf _INTCON, 7 ; INTCONbits.GIE = 0 ; disable interrupts (activated in startup sequence)
000b30   0e55     movlw   0x55             	movlw 0x55
000b32   6ea7     movwf   0xa7, 0          	movwf _EECON2 ; EECON2 = 0x55;
000b34   0eaa     movlw   0xaa             	movlw 0xAA
000b36   6ea7     movwf   0xa7, 0          	movwf _EECON2 ; EECON2 = 0xAA;
000b38   82a6     bsf     0xa6, 0x1, 0     	bsf _EECON1, 1 ; EECON1bits.WR = 1; start flash/eeprom writing
                                           	; CPU stall here for 2ms
                                           	;bsf _INTCON, 7 ; INTCONbits.GIE = 1 ; re-enable interrupts
                                           	;nop ; proc. can forget to execute the first operation
                                           	
000b3a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__delay	code
                                           _delay:
                                           ;	.line	92; src/main.c	void delay(void) //__naked
0009bc   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0009be   ffe5
0009c0   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0009c2   ffe5
0009c4   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0009c6   ffe5
0009c8   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0009ca   ffe5
                                           ;	.line	95; src/main.c	while(i--);
0009cc   c4c6     movff   0x4c6, 0         	MOVFF	_delay_i_1_6, r0x00
0009ce   f000
0009d0   c4c7     movff   0x4c7, 0x1       	MOVFF	(_delay_i_1_6 + 1), r0x01
0009d2   f001
                                           _00105_DS_:
0009d4   c000     movff   0, 0x2           	MOVFF	r0x00, r0x02
0009d6   f002
0009d8   c001     movff   0x1, 0x3         	MOVFF	r0x01, r0x03
0009da   f003
0009dc   0eff     movlw   0xff             	MOVLW	0xff
0009de   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0009e0   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0009e2   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0009e4   1003     iorwf   0x3, 0, 0        	IORWF	r0x03, W
0009e6   e1f6     bnz     0x9d4            	BNZ	_00105_DS_
0009e8   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0009ea   f003
0009ec   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0009ee   f002
0009f0   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0009f2   f001
0009f4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0009f6   f000
0009f8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _device_descriptor:
0009fa   0112     movlb   0x12             	DB	0x12, 0x01, 0x00, 0x02, 0xff, 0x00, 0xff, 0x40, 0xd8, 0x04, 0xaa, 0xfe
0009fc   0200     mulwf   0, 0             
0009fe   00ff     reset                    
000a00   40ff     rrncf   0xff, 0, 0       
000a02   04d8     decf    0xd8, 0, 0       
000a04   feaa     dw      0xfeaa           
000a06   0407     decf    0x7, 0, 0        	DB	0x07, 0x04, 0x01, 0x02, 0x00, 0x01
000a08   0201     mulwf   0x1, 0           
000a0a   0100     movlb   0                
                                           ; ; Starting pCode block for Ival
                                           _configuration_descriptor:
000a0c   0209     mulwf   0x9, 0           	DB	0x09, 0x02, 0x20, 0x00, 0x01, 0x01, 0x00, 0xc0, 0x14, 0x09, 0x04, 0x00
000a0e   0020     dw      0x20             
000a10   0101     movlb   0x1              
000a12   c000     movff   0, 0x914         
000a14   0914
000a16   0004     clrwdt                   
000a18   0200     mulwf   0, 0             	DB	0x00, 0x02, 0xff, 0xff, 0xff, 0x00, 0x07, 0x05, 0x01, 0x02, 0x40, 0x00
000a1a   ffff     dw      0xffff           
000a1c   00ff     reset                    
000a1e   0507     decf    0x7, 0, 0x1      
000a20   0201     mulwf   0x1, 0           
000a22   0040     dw      0x40             
000a24   0700     decf    0, 0x1, 0x1      	DB	0x00, 0x07, 0x05, 0x81, 0x02, 0x40, 0x00, 0x00
000a26   8105     bsf     0x5, 0, 0x1      
000a28   4002     rrncf   0x2, 0, 0        
000a2a   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  906 (0x038a) bytes ( 0.69%)
                                           ;           	  453 (0x01c5) words
                                           ; udata size:	    2 (0x0002) bytes ( 0.11%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.2.1 #8163 (Oct 23 2012) (Linux)
                                           ; This file was generated Tue Dec 18 18:50:52 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f25k50
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_bootCmd
                                           	global	_deviceAddress
                                           	global	_selfPowered
                                           	global	_EnableUSBModule
                                           	global	_ProcessUSBTransactions
                                           	global	_deviceState
                                           	global	_currentConfiguration
                                           	global	_ctrlTransferStage
                                           	global	_requestHandled
                                           	global	_outPtr
                                           	global	_inPtr
                                           	global	_wCount
                                           	global	_ep_bdt
                                           	global	_SetupPacket
                                           	global	_controlTransferBuffer
                                           	global	_ProcessStandardRequest
                                           	global	_InDataStage
                                           	global	_OutDataStage
                                           	global	_SetupStage
                                           	global	_WaitForSetupStage
                                           	global	_ProcessControlTransfer
                                           	global	_UnSuspend
                                           	global	_BusReset
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrget1
                                           	extern	__gptrput1
                                           	extern	_SRCON1bits
                                           	extern	_SRCON0bits
                                           	extern	_CCPTMRSbits
                                           	extern	_ANSELAbits
                                           	extern	_ANSELBbits
                                           	extern	_ANSELCbits
                                           	extern	_UCONbits
                                           	extern	_USTATbits
                                           	extern	_UCFGbits
                                           	extern	_UADDRbits
                                           	extern	_UIEbits
                                           	extern	_UIRbits
                                           	extern	_UEIEbits
                                           	extern	_UEIRbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_SLRCONbits
                                           	extern	_VREFCON2bits
                                           	extern	_VREFCON1bits
                                           	extern	_VREFCON0bits
                                           	extern	_PMD0bits
                                           	extern	_PMD1bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTEbits
                                           	extern	_WPUBbits
                                           	extern	_IOCBbits
                                           	extern	_IOCCbits
                                           	extern	_CTMUICONbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_CTMUCON1bits
                                           	extern	_CTMUCONLbits
                                           	extern	_CTMUCON0bits
                                           	extern	_CTMUCONHbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_CCP2CONbits
                                           	extern	_ECCP2CONbits
                                           	extern	_CM1CON0bits
                                           	extern	_CM2CON0bits
                                           	extern	_CM2CON1bits
                                           	extern	_OSCTUNEbits
                                           	extern	_HLVDCONbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_PIE3bits
                                           	extern	_PIR3bits
                                           	extern	_IPR3bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTA1bits
                                           	extern	_TXSTA1bits
                                           	extern	_SPBRG1bits
                                           	extern	_SPBRGH1bits
                                           	extern	_T3CONbits
                                           	extern	_T3GCONbits
                                           	extern	_ACTCONbits
                                           	extern	_STCONbits
                                           	extern	_ECCP1ASbits
                                           	extern	_ECCP1DELbits
                                           	extern	_PWM1CONbits
                                           	extern	_BAUDCON1bits
                                           	extern	_PSTR1CONbits
                                           	extern	_T2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSP1CON2bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSP1CONbits
                                           	extern	_SSP1CON1bits
                                           	extern	_SSPCONbits
                                           	extern	_SSP1STATbits
                                           	extern	_SSPSTATbits
                                           	extern	_SSP1ADDbits
                                           	extern	_SSPADDbits
                                           	extern	_SSP1MSKbits
                                           	extern	_SSPMSKbits
                                           	extern	_SSP1CON3bits
                                           	extern	_SSPCON3bits
                                           	extern	_T1GCONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_OSCCON2bits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_SRCON1
                                           	extern	_SRCON0
                                           	extern	_CCPTMRS
                                           	extern	_VREGCON
                                           	extern	_ANSELA
                                           	extern	_ANSELB
                                           	extern	_ANSELC
                                           	extern	_UCON
                                           	extern	_USTAT
                                           	extern	_UCFG
                                           	extern	_UADDR
                                           	extern	_UIE
                                           	extern	_UIR
                                           	extern	_UEIE
                                           	extern	_UEIR
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_SLRCON
                                           	extern	_VREFCON2
                                           	extern	_VREFCON1
                                           	extern	_VREFCON0
                                           	extern	_PMD0
                                           	extern	_PMD1
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTE
                                           	extern	_WPUB
                                           	extern	_IOCB
                                           	extern	_IOCC
                                           	extern	_CTMUICON
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_CTMUCON1
                                           	extern	_CTMUCONL
                                           	extern	_CTMUCON0
                                           	extern	_CTMUCONH
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_CCP2CON
                                           	extern	_ECCP2CON
                                           	extern	_CM1CON0
                                           	extern	_CM2CON0
                                           	extern	_CM2CON1
                                           	extern	_OSCTUNE
                                           	extern	_HLVDCON
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_PIE3
                                           	extern	_PIR3
                                           	extern	_IPR3
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA1
                                           	extern	_TXSTA1
                                           	extern	_TXREG1
                                           	extern	_RCREG1
                                           	extern	_SPBRG1
                                           	extern	_SPBRGH1
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_T3GCON
                                           	extern	_ACTCON
                                           	extern	_STCON
                                           	extern	_ECCP1AS
                                           	extern	_ECCP1DEL
                                           	extern	_PWM1CON
                                           	extern	_BAUDCON1
                                           	extern	_PSTR1CON
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSP1CON2
                                           	extern	_SSPCON2
                                           	extern	_SSP1CON
                                           	extern	_SSP1CON1
                                           	extern	_SSPCON
                                           	extern	_SSP1STAT
                                           	extern	_SSPSTAT
                                           	extern	_SSP1ADD
                                           	extern	_SSPADD
                                           	extern	_SSP1BUF
                                           	extern	_SSPBUF
                                           	extern	_SSP1MSK
                                           	extern	_SSPMSK
                                           	extern	_SSP1CON3
                                           	extern	_SSPCON3
                                           	extern	_T1GCON
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_OSCCON2
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_usb_configure_endpoints
                                           	extern	_usb_ep_data_out_callback
                                           	extern	_device_descriptor
                                           	extern	_configuration_descriptor
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           
                                           usbram5	udata
                                           _SetupPacket	res	64
                                           _controlTransferBuffer	res	64
                                           
                                           udata_picUSB_0	udata
                                           _selfPowered	res	1
                                           
                                           udata_picUSB_1	udata
                                           _deviceAddress	res	1
                                           
                                           udata_picUSB_2	udata
                                           _bootCmd	res	64
                                           
                                           udata_picUSB_3	udata
                                           _requestHandled	res	1
                                           
                                           udata_picUSB_4	udata
                                           _outPtr	res	3
                                           
                                           udata_picUSB_5	udata
                                           _wCount	res	2
                                           
                                           udata_picUSB_6	udata
                                           _deviceState	res	1
                                           
                                           udata_picUSB_7	udata
                                           _currentConfiguration	res	1
                                           
                                           udata_picUSB_8	udata
                                           _inPtr	res	3
                                           
                                           udata_picUSB_9	udata
                                           _ctrlTransferStage	res	1
                                           
                                           
                                           ustat_picUSB_00	udata	0X0400
                                           _ep_bdt        	res	128
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_picUSB__ProcessUSBTransactions	code
                                           _ProcessUSBTransactions:
                                           ;	.line	500; src/picUSB.c	void ProcessUSBTransactions()
00092e   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000930   ffe5
                                           ; #	MOVF	_deviceState, W, B
                                           ; #	BTFSS	STATUS, 2
                                           ; #	GOTO	_00406_DS_
                                           ; #	GOTO	_00423_DS_
                                           ; #	BTFSS	_UIRbits, 2
000932   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	503; src/picUSB.c	if(deviceState == DETACHED)
000934   51cd     movf    0xcd, 0, 0x1     	MOVF	_deviceState, W, B
                                           ;	.line	504; src/picUSB.c	return;
000936   e01f     bz      0x976            	BZ	_00423_DS_
                                           ;	.line	507; src/picUSB.c	if(UIRbits.ACTVIF && UIEbits.ACTVIE)
000938   a465     btfss   0x65, 0x2, 0     	BTFSS	_UIRbits, 2
                                           ; #	GOTO	_00408_DS_
                                           ; #	BTFSS	_UIEbits, 2
                                           ; #	GOTO	_00408_DS_
                                           ; #	CALL	_UnSuspend
                                           ; #	CLRF	r0x00
                                           ;	.line	508; src/picUSB.c	UnSuspend();
00093a   d003     bra     0x942            	BRA	_00408_DS_
                                           ;	.line	511; src/picUSB.c	if(UCONbits.SUSPND == 1)
00093c   b464     btfsc   0x64, 0x2, 0     	BTFSC	_UIEbits, 2
00093e   ec9e     call    0xb3c, 0         	CALL	_UnSuspend
000940   f005
                                           _00408_DS_:
000942   6a00     clrf    0, 0             	CLRF	r0x00
000944   b260     btfsc   0x60, 0x1, 0     	BTFSC	_UCONbits, 1
000946   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000948   5000     movf    0, 0, 0          	MOVF	r0x00, W
00094a   0a01     xorlw   0x1              	XORLW	0x01
                                           ;	.line	512; src/picUSB.c	return;
00094c   e014     bz      0x976            	BZ	_00423_DS_
                                           ;	.line	515; src/picUSB.c	if (UIRbits.URSTIF && UIEbits.URSTIE)
00094e   a065     btfss   0x65, 0, 0       	BTFSS	_UIRbits, 0
                                           ; #	GOTO	_00413_DS_
                                           ; #	BTFSS	_UIEbits, 0
                                           ; #	GOTO	_00413_DS_
                                           ; #	CALL	_BusReset
                                           ; #	BTFSS	_UIRbits, 1
                                           ;	.line	516; src/picUSB.c	BusReset();
000950   d003     bra     0x958            	BRA	_00413_DS_
                                           ;	.line	532; src/picUSB.c	if (UIRbits.UERRIF && UIEbits.UERRIE)
000952   b064     btfsc   0x64, 0, 0       	BTFSC	_UIEbits, 0
000954   ecbe     call    0x97c, 0         	CALL	_BusReset
000956   f004
                                           _00413_DS_:
000958   a265     btfss   0x65, 0x1, 0     	BTFSS	_UIRbits, 1
                                           ; #	GOTO	_00416_DS_
                                           ; #	BTFSS	_UIEbits, 1
                                           ; #	GOTO	_00416_DS_
                                           ; #	BCF	_UIRbits, 1
                                           ; #	MOVLW	0x03
                                           ;	.line	533; src/picUSB.c	UIRbits.UERRIF = 0;// Clear errors
00095a   d002     bra     0x960            	BRA	_00416_DS_
                                           ;	.line	536; src/picUSB.c	if (deviceState < DEFAULT)  // DETACHED, ATTACHED or POWERED
00095c   b264     btfsc   0x64, 0x1, 0     	BTFSC	_UIEbits, 1
00095e   9265     bcf     0x65, 0x1, 0     	BCF	_UIRbits, 1
                                           _00416_DS_:
000960   0e03     movlw   0x3              	MOVLW	0x03
                                           ; #	SUBWF	_deviceState, W, B
                                           ; #	BTFSC	STATUS, 0
                                           ; #	GOTO	_00419_DS_
                                           ; #	GOTO	_00423_DS_
                                           ; #	BTFSS	_UIRbits, 3
000962   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	537; src/picUSB.c	return;
000964   5dcd     subwf   0xcd, 0, 0x1     	SUBWF	_deviceState, W, B
                                           ;	.line	540; src/picUSB.c	if(UIRbits.TRNIF && UIEbits.TRNIE)
000966   e307     bnc     0x976            	BNC	_00423_DS_
000968   a665     btfss   0x65, 0x3, 0     	BTFSS	_UIRbits, 3
00096a   d005     bra     0x976            	BRA	_00423_DS_
00096c   a664     btfss   0x64, 0x3, 0     	BTFSS	_UIEbits, 3
00096e   d003     bra     0x976            	BRA	_00423_DS_
                                           ;	.line	542; src/picUSB.c	ProcessControlTransfer();
000970   ec5d     call    0x6ba, 0         	CALL	_ProcessControlTransfer
000972   f003
                                           ;	.line	544; src/picUSB.c	UIRbits.TRNIF = 0;
000974   9665     bcf     0x65, 0x3, 0     	BCF	_UIRbits, 3
                                           _00423_DS_:
000976   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000978   f000
00097a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__BusReset	code
                                           _BusReset:
                                           ;	.line	472; src/picUSB.c	void BusReset()
00097c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00097e   ffe5
                                           ;	.line	474; src/picUSB.c	UEIR  = 0x00;
000980   6a67     clrf    0x67, 0          	CLRF	_UEIR
                                           ;	.line	475; src/picUSB.c	UIR   = 0x00;
000982   6a65     clrf    0x65, 0          	CLRF	_UIR
                                           ;	.line	476; src/picUSB.c	UEIE  = 0x9f;
000984   0e9f     movlw   0x9f             	MOVLW	0x9f
000986   6e66     movwf   0x66, 0          	MOVWF	_UEIE
                                           ;	.line	477; src/picUSB.c	UIE   = 0x7b;
000988   0e7b     movlw   0x7b             	MOVLW	0x7b
00098a   6e64     movwf   0x64, 0          	MOVWF	_UIE
                                           ;	.line	478; src/picUSB.c	UADDR = 0x00;
00098c   6a63     clrf    0x63, 0          	CLRF	_UADDR
                                           ;	.line	481; src/picUSB.c	UEP0 = EP_CTRL | HSHK_EN;
00098e   0e16     movlw   0x16             	MOVLW	0x16
000990   6e6a     movwf   0x6a, 0          	MOVWF	_UEP0
                                           _00388_DS_:
                                           ;	.line	484; src/picUSB.c	while (UIRbits.TRNIF == 1)
000992   6a00     clrf    0, 0             	CLRF	r0x00
000994   b665     btfsc   0x65, 0x3, 0     	BTFSC	_UIRbits, 3
000996   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
000998   5000     movf    0, 0, 0          	MOVF	r0x00, W
00099a   0a01     xorlw   0x1              	XORLW	0x01
00099c   e102     bnz     0x9a2            	BNZ	_00390_DS_
                                           ;	.line	485; src/picUSB.c	UIRbits.TRNIF = 0;
00099e   9665     bcf     0x65, 0x3, 0     	BCF	_UIRbits, 3
0009a0   d7f8     bra     0x992            	BRA	_00388_DS_
                                           _00390_DS_:
                                           ;	.line	488; src/picUSB.c	UCONbits.PKTDIS = 0;
0009a2   9860     bcf     0x60, 0x4, 0     	BCF	_UCONbits, 4
                                           ;	.line	491; src/picUSB.c	WaitForSetupStage();
0009a4   ec5a     call    0xab4, 0         	CALL	_WaitForSetupStage
0009a6   f005
0009a8   0104     movlb   0x4              	BANKSEL	_selfPowered
                                           ;	.line	494; src/picUSB.c	selfPowered = 0;                      // Self powered is off by default
0009aa   6bca     clrf    0xca, 0x1        	CLRF	_selfPowered, B
0009ac   0104     movlb   0x4              	BANKSEL	_currentConfiguration
                                           ;	.line	495; src/picUSB.c	currentConfiguration = 0;             // Clear active configuration
0009ae   6bce     clrf    0xce, 0x1        	CLRF	_currentConfiguration, B
                                           ;	.line	496; src/picUSB.c	deviceState = DEFAULT;
0009b0   0e03     movlw   0x3              	MOVLW	0x03
0009b2   0104     movlb   0x4              	BANKSEL	_deviceState
0009b4   6fcd     movwf   0xcd, 0x1        	MOVWF	_deviceState, B
0009b6   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0009b8   f000
0009ba   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__UnSuspend	code
                                           _UnSuspend:
                                           ;	.line	467; src/picUSB.c	UCONbits.SUSPND = 0;
000b3c   9260     bcf     0x60, 0x1, 0     	BCF	_UCONbits, 1
                                           ;	.line	468; src/picUSB.c	UIEbits.ACTVIE = 0;
000b3e   9464     bcf     0x64, 0x2, 0     	BCF	_UIEbits, 2
                                           ;	.line	469; src/picUSB.c	UIRbits.ACTVIF = 0;
000b40   9465     bcf     0x65, 0x2, 0     	BCF	_UIRbits, 2
000b42   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__EnableUSBModule	code
                                           _EnableUSBModule:
                                           ;	.line	445; src/picUSB.c	if(UCONbits.USBEN == 0)
000a2c   b660     btfsc   0x60, 0x3, 0     	BTFSC	_UCONbits, 3
000a2e   d006     bra     0xa3c            	BRA	_00362_DS_
                                           ;	.line	447; src/picUSB.c	UCON = 0;
000a30   6a60     clrf    0x60, 0          	CLRF	_UCON
                                           ;	.line	448; src/picUSB.c	UIE = 0;
000a32   6a64     clrf    0x64, 0          	CLRF	_UIE
                                           ;	.line	449; src/picUSB.c	UCONbits.USBEN = 1;
000a34   8660     bsf     0x60, 0x3, 0     	BSF	_UCONbits, 3
                                           ;	.line	450; src/picUSB.c	deviceState = ATTACHED;
000a36   0e01     movlw   0x1              	MOVLW	0x01
000a38   0104     movlb   0x4              	BANKSEL	_deviceState
000a3a   6fcd     movwf   0xcd, 0x1        	MOVWF	_deviceState, B
                                           _00362_DS_:
000a3c   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	454; src/picUSB.c	if ((deviceState == ATTACHED) && !UCONbits.SE0)
000a3e   51cd     movf    0xcd, 0, 0x1     	MOVF	_deviceState, W, B
000a40   0a01     xorlw   0x1              	XORLW	0x01
000a42   e109     bnz     0xa56            	BNZ	_00366_DS_
000a44   ba60     btfsc   0x60, 0x5, 0     	BTFSC	_UCONbits, 5
000a46   d007     bra     0xa56            	BRA	_00366_DS_
                                           ;	.line	456; src/picUSB.c	UIR = 0;
000a48   6a65     clrf    0x65, 0          	CLRF	_UIR
                                           ;	.line	457; src/picUSB.c	UIE = 0;
000a4a   6a64     clrf    0x64, 0          	CLRF	_UIE
                                           ;	.line	458; src/picUSB.c	UIEbits.URSTIE = 1;
000a4c   8064     bsf     0x64, 0, 0       	BSF	_UIEbits, 0
                                           ;	.line	459; src/picUSB.c	UIEbits.IDLEIE = 1;
000a4e   8864     bsf     0x64, 0x4, 0     	BSF	_UIEbits, 4
                                           ;	.line	460; src/picUSB.c	deviceState = POWERED;
000a50   0e02     movlw   0x2              	MOVLW	0x02
000a52   0104     movlb   0x4              	BANKSEL	_deviceState
000a54   6fcd     movwf   0xcd, 0x1        	MOVWF	_deviceState, B
                                           _00366_DS_:
000a56   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__ProcessControlTransfer	code
                                           _ProcessControlTransfer:
                                           ;	.line	361; src/picUSB.c	void ProcessControlTransfer()
0006ba   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0006bc   ffe5
0006be   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0006c0   ffe5
                                           ;	.line	364; src/picUSB.c	byte PID, end_point = USTAT >> 3;
0006c2   3861     swapf   0x61, 0, 0       	SWAPF	_USTAT, W
0006c4   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
0006c6   0b1f     andlw   0x1f             	ANDLW	0x1f
0006c8   6e00     movwf   0, 0             	MOVWF	r0x00
                                           ;	.line	366; src/picUSB.c	if (end_point == 0) // Endpoint 0
0006ca   5000     movf    0, 0, 0          	MOVF	r0x00, W
0006cc   a4d8     btfss   0xd8, 0x2, 0     	BTFSS	STATUS, 2
0006ce   d047     bra     0x75e            	BRA	_00311_DS_
                                           ;	.line	369; src/picUSB.c	if (USTATbits.DIR == OUT)
0006d0   b461     btfsc   0x61, 0x2, 0     	BTFSC	_USTATbits, 2
0006d2   d022     bra     0x718            	BRA	_00306_DS_
                                           ;	.line	373; src/picUSB.c	PID = (EP_OUT_BD(0).Stat.uc & 0x3C) >> 2;
0006d4   0e3c     movlw   0x3c             	MOVLW	0x3c
0006d6   0104     movlb   0x4              	BANKSEL	_ep_bdt
0006d8   1500     andwf   0, 0, 0x1        	ANDWF	_ep_bdt, W, B
0006da   6e01     movwf   0x1, 0           	MOVWF	r0x01
0006dc   4001     rrncf   0x1, 0, 0        	RRNCF	r0x01, W
0006de   40e8     rrncf   0xe8, 0, 0       	RRNCF	WREG, W
0006e0   0b3f     andlw   0x3f             	ANDLW	0x3f
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
                                           ;	.line	374; src/picUSB.c	if (PID == 0x0D)
0006e2   0a0d     xorlw   0xd              	XORLW	0x0d
0006e4   e103     bnz     0x6ec            	BNZ	_00292_DS_
                                           ;	.line	376; src/picUSB.c	SetupStage();
0006e6   ecfd     call    0x5fa, 0         	CALL	_SetupStage
0006e8   f002
0006ea   d040     bra     0x76c            	BRA	_00313_DS_
                                           _00292_DS_:
0006ec   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
                                           ;	.line	378; src/picUSB.c	else if (ctrlTransferStage == DATA_OUT_STAGE)
0006ee   51cf     movf    0xcf, 0, 0x1     	MOVF	_ctrlTransferStage, W, B
0006f0   0a01     xorlw   0x1              	XORLW	0x01
0006f2   e10f     bnz     0x712            	BNZ	_00289_DS_
                                           ;	.line	382; src/picUSB.c	OutDataStage(0);
0006f4   0e00     movlw   0                	MOVLW	0x00
0006f6   6ae5     clrf    0xe5, 0          	CLRF	POSTDEC1
0006f8   ec01     call    0x402, 0         	CALL	_OutDataStage
0006fa   f002
0006fc   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
0006fe   0104     movlb   0x4              	BANKSEL	_ep_bdt
                                           ;	.line	385; src/picUSB.c	if(EP_OUT_BD(0).Stat.DTS)
000700   ad00     btfss   0, 0x6, 0x1      	BTFSS	_ep_bdt, 6, B
000702   d003     bra     0x70a            	BRA	_00286_DS_
                                           ;	.line	386; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTSEN;
000704   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
000706   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
000708   d031     bra     0x76c            	BRA	_00313_DS_
                                           _00286_DS_:
                                           ;	.line	388; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
00070a   0ec8     movlw   0xc8             	MOVLW	0xc8
00070c   0104     movlb   0x4              	BANKSEL	_ep_bdt
00070e   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
000710   d02d     bra     0x76c            	BRA	_00313_DS_
                                           _00289_DS_:
                                           ;	.line	394; src/picUSB.c	WaitForSetupStage();
000712   ec5a     call    0xab4, 0         	CALL	_WaitForSetupStage
000714   f005
000716   d02a     bra     0x76c            	BRA	_00313_DS_
                                           _00306_DS_:
                                           ;	.line	401; src/picUSB.c	if ((UADDR == 0) && (deviceState == ADDRESS))
000718   5063     movf    0x63, 0, 0       	MOVF	_UADDR, W
00071a   e10b     bnz     0x732            	BNZ	_00297_DS_
00071c   0104     movlb   0x4              	BANKSEL	_deviceState
00071e   51cd     movf    0xcd, 0, 0x1     	MOVF	_deviceState, W, B
000720   0a04     xorlw   0x4              	XORLW	0x04
000722   e107     bnz     0x732            	BNZ	_00297_DS_
                                           ;	.line	405; src/picUSB.c	UADDR = SetupPacket.wValue0;
000724   c502     movff   0x502, 0xf63     	MOVFF	(_SetupPacket + 2), _UADDR
000726   ff63
                                           ;	.line	406; src/picUSB.c	if(UADDR == 0)
000728   5063     movf    0x63, 0, 0       	MOVF	_UADDR, W
00072a   e103     bnz     0x732            	BNZ	_00297_DS_
                                           ;	.line	409; src/picUSB.c	deviceState = DEFAULT;
00072c   0e03     movlw   0x3              	MOVLW	0x03
00072e   0104     movlb   0x4              	BANKSEL	_deviceState
000730   6fcd     movwf   0xcd, 0x1        	MOVWF	_deviceState, B
                                           _00297_DS_:
000732   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
                                           ;	.line	412; src/picUSB.c	if (ctrlTransferStage == DATA_IN_STAGE)
000734   51cf     movf    0xcf, 0, 0x1     	MOVF	_ctrlTransferStage, W, B
000736   0a02     xorlw   0x2              	XORLW	0x02
000738   e10f     bnz     0x758            	BNZ	_00303_DS_
                                           ;	.line	415; src/picUSB.c	InDataStage(0);
00073a   0e00     movlw   0                	MOVLW	0x00
00073c   6ae5     clrf    0xe5, 0          	CLRF	POSTDEC1
00073e   ec21     call    0x242, 0         	CALL	_InDataStage
000740   f001
000742   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000744   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 4)
                                           ;	.line	418; src/picUSB.c	if(EP_IN_BD(0).Stat.DTS)
000746   ad04     btfss   0x4, 0x6, 0x1    	BTFSS	(_ep_bdt + 4), 6, B
000748   d003     bra     0x750            	BRA	_00300_DS_
                                           ;	.line	419; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTSEN;
00074a   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
00074c   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
00074e   d00e     bra     0x76c            	BRA	_00313_DS_
                                           _00300_DS_:
                                           ;	.line	421; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
000750   0ec8     movlw   0xc8             	MOVLW	0xc8
000752   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 4)
000754   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
000756   d00a     bra     0x76c            	BRA	_00313_DS_
                                           _00303_DS_:
                                           ;	.line	427; src/picUSB.c	WaitForSetupStage();
000758   ec5a     call    0xab4, 0         	CALL	_WaitForSetupStage
00075a   f005
00075c   d007     bra     0x76c            	BRA	_00313_DS_
                                           _00311_DS_:
                                           ;	.line	436; src/picUSB.c	if (!USTATbits.DIR) // If OUT
00075e   b461     btfsc   0x61, 0x2, 0     	BTFSC	_USTATbits, 2
000760   d005     bra     0x76c            	BRA	_00313_DS_
                                           ;	.line	437; src/picUSB.c	usb_ep_data_out_callback(end_point);
000762   5000     movf    0, 0, 0          	MOVF	r0x00, W
000764   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000766   ec0e     call    0x1c, 0          	CALL	_usb_ep_data_out_callback
000768   f000
00076a   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00313_DS_:
00076c   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00076e   f001
000770   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000772   f000
000774   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__WaitForSetupStage	code
                                           _WaitForSetupStage:
000ab4   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
                                           ;	.line	349; src/picUSB.c	ctrlTransferStage = SETUP_STAGE;
000ab6   6bcf     clrf    0xcf, 0x1        	CLRF	_ctrlTransferStage, B
                                           ;	.line	350; src/picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
000ab8   0e40     movlw   0x40             	MOVLW	0x40
000aba   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 1)
000abc   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	351; src/picUSB.c	EP_OUT_BD(0).ADDR = PTR16(&SetupPacket);
000abe   0e00     movlw   0                	MOVLW	LOW(_SetupPacket)
                                           ; removed redundant BANKSEL
000ac0   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
000ac2   0e05     movlw   0x5              	MOVLW	HIGH(_SetupPacket)
                                           ; removed redundant BANKSEL
000ac4   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	353; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTSEN;
000ac6   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
000ac8   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           ; removed redundant BANKSEL
                                           ;	.line	354; src/picUSB.c	EP_IN_BD(0).Stat.uc = 0x00;           // Give control to CPU
000aca   6b04     clrf    0x4, 0x1         	CLRF	(_ep_bdt + 4), B
000acc   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__SetupStage	code
                                           _SetupStage:
                                           ;	.line	280; src/picUSB.c	void SetupStage()
0005fa   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0005fc   ffe5
0005fe   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 4)
                                           ;	.line	284; src/picUSB.c	EP_IN_BD(0).Stat.uc &= ~BDS_UOWN;
000600   5104     movf    0x4, 0, 0x1      	MOVF	(_ep_bdt + 4), W, B
000602   6e00     movwf   0, 0             	MOVWF	r0x00
000604   9e00     bcf     0, 0x7, 0        	BCF	r0x00, 7
000606   5000     movf    0, 0, 0          	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
000608   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
                                           ; removed redundant BANKSEL
                                           ;	.line	285; src/picUSB.c	EP_OUT_BD(0).Stat.uc &= ~BDS_UOWN;
00060a   5100     movf    0, 0, 0x1        	MOVF	_ep_bdt, W, B
00060c   6e00     movwf   0, 0             	MOVWF	r0x00
00060e   9e00     bcf     0, 0x7, 0        	BCF	r0x00, 7
000610   5000     movf    0, 0, 0          	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
000612   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
000614   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
                                           ;	.line	288; src/picUSB.c	ctrlTransferStage = SETUP_STAGE;
000616   6bcf     clrf    0xcf, 0x1        	CLRF	_ctrlTransferStage, B
000618   0104     movlb   0x4              	BANKSEL	_requestHandled
                                           ;	.line	289; src/picUSB.c	requestHandled = 0;                   // Default is that request hasn't been handled
00061a   6bcc     clrf    0xcc, 0x1        	CLRF	_requestHandled, B
00061c   0104     movlb   0x4              	BANKSEL	_wCount
                                           ;	.line	290; src/picUSB.c	wCount = 0;                           // No bytes transferred
00061e   6bc8     clrf    0xc8, 0x1        	CLRF	_wCount, B
                                           ; removed redundant BANKSEL
000620   6bc9     clrf    0xc9, 0x1        	CLRF	(_wCount + 1), B
                                           ;	.line	293; src/picUSB.c	ProcessStandardRequest();
000622   ecbb     call    0x776, 0         	CALL	_ProcessStandardRequest
000624   f003
000626   0104     movlb   0x4              	BANKSEL	_requestHandled
                                           ;	.line	296; src/picUSB.c	if (!requestHandled)
000628   51cc     movf    0xcc, 0, 0x1     	MOVF	_requestHandled, W, B
00062a   e10b     bnz     0x642            	BNZ	_00258_DS_
                                           ;	.line	299; src/picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
00062c   0e40     movlw   0x40             	MOVLW	0x40
00062e   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 1)
000630   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	300; src/picUSB.c	EP_OUT_BD(0).ADDR = PTR16(&SetupPacket);
000632   0e00     movlw   0                	MOVLW	LOW(_SetupPacket)
                                           ; removed redundant BANKSEL
000634   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
000636   0e05     movlw   0x5              	MOVLW	HIGH(_SetupPacket)
                                           ; removed redundant BANKSEL
000638   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ; #	MOVLW	0x84
                                           ; #	MOVWF	_ep_bdt, B
                                           ; #	MOVLW	0x84
                                           ;	.line	301; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_BSTALL;
00063a   0e84     movlw   0x84             	MOVLW	0x84
                                           ; removed redundant BANKSEL
                                           ;	.line	302; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_BSTALL;
00063c   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           ; removed redundant BANKSEL
00063e   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
000640   d038     bra     0x6b2            	BRA	_00259_DS_
                                           _00258_DS_:
000642   0105     movlb   0x5              	BANKSEL	_SetupPacket
                                           ;	.line	305; src/picUSB.c	else if (SetupPacket.bmRequestType & 0x80)
000644   af00     btfss   0, 0x7, 0x1      	BTFSS	_SetupPacket, 7, B
000646   d026     bra     0x694            	BRA	_00255_DS_
000648   0104     movlb   0x4              	BANKSEL	(_wCount + 1)
                                           ;	.line	308; src/picUSB.c	if(SetupPacket.wLength < wCount)
00064a   51c9     movf    0xc9, 0, 0x1     	MOVF	(_wCount + 1), W, B
00064c   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 7)
00064e   5d07     subwf   0x7, 0, 0x1      	SUBWF	(_SetupPacket + 7), W, B
000650   e104     bnz     0x65a            	BNZ	_00275_DS_
000652   0104     movlb   0x4              	BANKSEL	_wCount
000654   51c8     movf    0xc8, 0, 0x1     	MOVF	_wCount, W, B
000656   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 6)
000658   5d06     subwf   0x6, 0, 0x1      	SUBWF	(_SetupPacket + 6), W, B
                                           _00275_DS_:
00065a   e204     bc      0x664            	BC	_00253_DS_
                                           ;	.line	309; src/picUSB.c	wCount = SetupPacket.wLength;
00065c   c506     movff   0x506, 0x4c8     	MOVFF	(_SetupPacket + 6), _wCount
00065e   f4c8
000660   c507     movff   0x507, 0x4c9     	MOVFF	(_SetupPacket + 7), (_wCount + 1)
000662   f4c9
                                           _00253_DS_:
                                           ;	.line	311; src/picUSB.c	InDataStage(0);
000664   0e00     movlw   0                	MOVLW	0x00
000666   6ae5     clrf    0xe5, 0          	CLRF	POSTDEC1
000668   ec21     call    0x242, 0         	CALL	_InDataStage
00066a   f001
00066c   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	312; src/picUSB.c	ctrlTransferStage = DATA_IN_STAGE;
00066e   0e02     movlw   0x2              	MOVLW	0x02
000670   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
000672   6fcf     movwf   0xcf, 0x1        	MOVWF	_ctrlTransferStage, B
                                           ;	.line	314; src/picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
000674   0e40     movlw   0x40             	MOVLW	0x40
000676   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 1)
000678   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	315; src/picUSB.c	EP_OUT_BD(0).ADDR = PTR16(&SetupPacket);
00067a   0e00     movlw   0                	MOVLW	LOW(_SetupPacket)
                                           ; removed redundant BANKSEL
00067c   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
00067e   0e05     movlw   0x5              	MOVLW	HIGH(_SetupPacket)
                                           ; removed redundant BANKSEL
000680   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	316; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN;
000682   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
000684   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           ;	.line	319; src/picUSB.c	EP_IN_BD(0).ADDR = PTR16(&controlTransferBuffer);
000686   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
000688   6f06     movwf   0x6, 0x1         	MOVWF	(_ep_bdt + 6), B
00068a   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
00068c   6f07     movwf   0x7, 0x1         	MOVWF	(_ep_bdt + 7), B
                                           ;	.line	321; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
00068e   0ec8     movlw   0xc8             	MOVLW	0xc8
                                           ; removed redundant BANKSEL
000690   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
000692   d00f     bra     0x6b2            	BRA	_00259_DS_
                                           _00255_DS_:
                                           ;	.line	327; src/picUSB.c	ctrlTransferStage = DATA_OUT_STAGE;
000694   0e01     movlw   0x1              	MOVLW	0x01
000696   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
000698   6fcf     movwf   0xcf, 0x1        	MOVWF	_ctrlTransferStage, B
00069a   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 5)
                                           ;	.line	330; src/picUSB.c	EP_IN_BD(0).Cnt = 0;
00069c   6b05     clrf    0x5, 0x1         	CLRF	(_ep_bdt + 5), B
                                           ;	.line	331; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
00069e   0ec8     movlw   0xc8             	MOVLW	0xc8
                                           ; removed redundant BANKSEL
0006a0   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
                                           ;	.line	334; src/picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
0006a2   0e40     movlw   0x40             	MOVLW	0x40
                                           ; removed redundant BANKSEL
0006a4   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	335; src/picUSB.c	EP_OUT_BD(0).ADDR = PTR16(&controlTransferBuffer);
0006a6   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
0006a8   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
0006aa   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
0006ac   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	337; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
0006ae   0ec8     movlw   0xc8             	MOVLW	0xc8
                                           ; removed redundant BANKSEL
0006b0   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           _00259_DS_:
                                           ;	.line	341; src/picUSB.c	UCONbits.PKTDIS = 0;
0006b2   9860     bcf     0x60, 0x4, 0     	BCF	_UCONbits, 4
0006b4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0006b6   f000
0006b8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__OutDataStage	code
                                           _OutDataStage:
                                           ;	.line	257; src/picUSB.c	void OutDataStage(unsigned char ep)
000402   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000404   ffe5
000406   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000408   ffd9
00040a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00040c   ffe5
00040e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000410   ffe5
000412   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000414   ffe5
000416   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000418   ffe5
00041a   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00041c   ffe5
00041e   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000420   ffe5
000422   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000424   ffe5
000426   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000428   ffe5
00042a   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00042c   ffe5
00042e   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
000430   ffe5
000432   0e02     movlw   0x2              	MOVLW	0x02
000434   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000436   f000
                                           ;	.line	261; src/picUSB.c	bufferSize = ((0x03 & EP_OUT_BD(ep).Stat.uc) << 8) | EP_OUT_BD(ep).Cnt;
000438   4400     rlncf   0, 0, 0          	RLNCF	r0x00, W
00043a   0bfe     andlw   0xfe             	ANDLW	0xfe
                                           ; #	MOVWF	r0x01
                                           ; #;;multiply lit val:0x04 by variable r0x01 and store in r0x00
                                           ; #	MOVF	r0x01, W
00043c   0d04     mullw   0x4              	MULLW	0x04
00043e   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
000440   6e02     movwf   0x2, 0           	MOVWF	r0x02
000442   cff3     movff   0xff3, 0         	MOVFF	PRODL, r0x00
000444   f000
000446   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000448   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
00044a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00044c   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00044e   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000450   6e03     movwf   0x3, 0           	MOVWF	r0x03
000452   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
000454   ffe9
000456   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
000458   ffea
00045a   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
00045c   f001
00045e   0e03     movlw   0x3              	MOVLW	0x03
000460   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
000462   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000464   6e05     movwf   0x5, 0           	MOVWF	r0x05
000466   6a04     clrf    0x4, 0           	CLRF	r0x04
000468   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
00046a   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00046c   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00046e   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
000470   4a00     infsnz  0, 0x1, 0        	INFSNZ	r0x00, F
000472   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
000474   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000476   ffe9
000478   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
00047a   ffea
00047c   cfef     movff   0xfef, 0         	MOVFF	INDF0, r0x00
00047e   f000
000480   6a01     clrf    0x1, 0           	CLRF	r0x01
000482   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000484   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
000486   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000488   1201     iorwf   0x1, 0x1, 0      	IORWF	r0x01, F
                                           ;	.line	264; src/picUSB.c	wCount = wCount + bufferSize;
00048a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00048c   0104     movlb   0x4              	BANKSEL	_wCount
00048e   27c8     addwf   0xc8, 0x1, 0x1   	ADDWF	_wCount, F, B
000490   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000492   23c9     addwfc  0xc9, 0x1, 0x1   	ADDWFC	(_wCount + 1), F, B
                                           ;	.line	266; src/picUSB.c	outPtr = (byte*)&controlTransferBuffer;
000494   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
000496   0104     movlb   0x4              	BANKSEL	(_outPtr + 1)
000498   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
00049a   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
00049c   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
00049e   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
0004a0   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
                                           ;	.line	268; src/picUSB.c	for (i=0;i<bufferSize;i++)
0004a2   6a02     clrf    0x2, 0           	CLRF	r0x02
0004a4   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00230_DS_:
0004a6   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0004a8   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0004aa   e102     bnz     0x4b0            	BNZ	_00245_DS_
0004ac   5000     movf    0, 0, 0          	MOVF	r0x00, W
0004ae   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00245_DS_:
0004b0   e22c     bc      0x50a            	BC	_00234_DS_
                                           ;	.line	269; src/picUSB.c	*inPtr++ = *outPtr++;
0004b2   c4c3     movff   0x4c3, 0x4       	MOVFF	_inPtr, r0x04
0004b4   f004
0004b6   c4c4     movff   0x4c4, 0x5       	MOVFF	(_inPtr + 1), r0x05
0004b8   f005
0004ba   c4c5     movff   0x4c5, 0x6       	MOVFF	(_inPtr + 2), r0x06
0004bc   f006
0004be   c4c0     movff   0x4c0, 0x7       	MOVFF	_outPtr, r0x07
0004c0   f007
0004c2   c4c1     movff   0x4c1, 0x8       	MOVFF	(_outPtr + 1), r0x08
0004c4   f008
0004c6   c4c2     movff   0x4c2, 0x9       	MOVFF	(_outPtr + 2), r0x09
0004c8   f009
0004ca   c007     movff   0x7, 0xfe9       	MOVFF	r0x07, FSR0L
0004cc   ffe9
0004ce   c008     movff   0x8, 0xff3       	MOVFF	r0x08, PRODL
0004d0   fff3
0004d2   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0004d4   ec2c     call    0xa58, 0         	CALL	__gptrget1
0004d6   f005
0004d8   6e07     movwf   0x7, 0           	MOVWF	r0x07
0004da   0104     movlb   0x4              	BANKSEL	_outPtr
0004dc   2bc0     incf    0xc0, 0x1, 0x1   	INCF	_outPtr, F, B
0004de   e303     bnc     0x4e6            	BNC	_00246_DS_
                                           ; removed redundant BANKSEL
0004e0   3fc1     incfsz  0xc1, 0x1, 0x1   	INCFSZ	(_outPtr + 1), F, B
0004e2   d001     bra     0x4e6            	BRA	_10405_DS_
                                           ; removed redundant BANKSEL
0004e4   2bc2     incf    0xc2, 0x1, 0x1   	INCF	(_outPtr + 2), F, B
                                           _10405_DS_:
                                           _00246_DS_:
0004e6   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
0004e8   ffe5
0004ea   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
0004ec   ffe9
0004ee   c005     movff   0x5, 0xff3       	MOVFF	r0x05, PRODL
0004f0   fff3
0004f2   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0004f4   ec7e     call    0xafc, 0         	CALL	__gptrput1
0004f6   f005
0004f8   0104     movlb   0x4              	BANKSEL	_inPtr
0004fa   2bc3     incf    0xc3, 0x1, 0x1   	INCF	_inPtr, F, B
0004fc   e303     bnc     0x504            	BNC	_00247_DS_
                                           ; removed redundant BANKSEL
0004fe   3fc4     incfsz  0xc4, 0x1, 0x1   	INCFSZ	(_inPtr + 1), F, B
000500   d001     bra     0x504            	BRA	_20406_DS_
                                           ; removed redundant BANKSEL
000502   2bc5     incf    0xc5, 0x1, 0x1   	INCF	(_inPtr + 2), F, B
                                           _20406_DS_:
                                           _00247_DS_:
                                           ;	.line	268; src/picUSB.c	for (i=0;i<bufferSize;i++)
000504   4a02     infsnz  0x2, 0x1, 0      	INFSNZ	r0x02, F
000506   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000508   d7ce     bra     0x4a6            	BRA	_00230_DS_
                                           _00234_DS_:
00050a   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
00050c   f009
00050e   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
000510   f008
000512   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
000514   f007
000516   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000518   f006
00051a   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
00051c   f005
00051e   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000520   f004
000522   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000524   f003
000526   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000528   f002
00052a   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00052c   f001
00052e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000530   f000
000532   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000534   ffd9
000536   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__InDataStage	code
                                           _InDataStage:
                                           ;	.line	223; src/picUSB.c	void InDataStage(unsigned char ep)
000242   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000244   ffe5
000246   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000248   ffd9
00024a   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00024c   ffe5
00024e   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000250   ffe5
000252   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000254   ffe5
000256   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000258   ffe5
00025a   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00025c   ffe5
00025e   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000260   ffe5
000262   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000264   ffe5
000266   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000268   ffe5
00026a   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00026c   ffe5
00026e   0e02     movlw   0x2              	MOVLW	0x02
000270   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000272   f000
                                           ;	.line	229; src/picUSB.c	if(wCount < EP0_BUFFER_SIZE)
000274   0e00     movlw   0                	MOVLW	0x00
000276   0104     movlb   0x4              	BANKSEL	(_wCount + 1)
000278   5dc9     subwf   0xc9, 0, 0x1     	SUBWF	(_wCount + 1), W, B
00027a   e102     bnz     0x280            	BNZ	_00217_DS_
00027c   0e40     movlw   0x40             	MOVLW	0x40
                                           ; removed redundant BANKSEL
00027e   5dc8     subwf   0xc8, 0, 0x1     	SUBWF	_wCount, W, B
                                           _00217_DS_:
000280   e205     bc      0x28c            	BC	_00199_DS_
                                           ;	.line	230; src/picUSB.c	bufferSize = wCount;
000282   c4c8     movff   0x4c8, 0x1       	MOVFF	_wCount, r0x01
000284   f001
000286   c4c9     movff   0x4c9, 0x2       	MOVFF	(_wCount + 1), r0x02
000288   f002
00028a   d003     bra     0x292            	BRA	_00200_DS_
                                           _00199_DS_:
                                           ;	.line	232; src/picUSB.c	bufferSize = EP0_BUFFER_SIZE;
00028c   0e40     movlw   0x40             	MOVLW	0x40
00028e   6e01     movwf   0x1, 0           	MOVWF	r0x01
000290   6a02     clrf    0x2, 0           	CLRF	r0x02
                                           _00200_DS_:
                                           ;	.line	236; src/picUSB.c	EP_IN_BD(ep).Stat.uc &= ~(BDS_BC8 | BDS_BC9);
000292   4400     rlncf   0, 0, 0          	RLNCF	r0x00, W
000294   0bfe     andlw   0xfe             	ANDLW	0xfe
000296   6e03     movwf   0x3, 0           	MOVWF	r0x03
000298   2803     incf    0x3, 0, 0        	INCF	r0x03, W
                                           ; #	MOVWF	r0x00
                                           ; #;;multiply lit val:0x04 by variable r0x00 and store in r0x00
                                           ; #	MOVF	r0x00, W
00029a   0d04     mullw   0x4              	MULLW	0x04
00029c   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
00029e   6e03     movwf   0x3, 0           	MOVWF	r0x03
0002a0   cff3     movff   0xff3, 0         	MOVFF	PRODL, r0x00
0002a2   f000
0002a4   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0002a6   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0002a8   6e04     movwf   0x4, 0           	MOVWF	r0x04
0002aa   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0002ac   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
0002ae   6e05     movwf   0x5, 0           	MOVWF	r0x05
0002b0   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0002b2   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0002b4   6e06     movwf   0x6, 0           	MOVWF	r0x06
0002b6   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0002b8   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
0002ba   6e07     movwf   0x7, 0           	MOVWF	r0x07
0002bc   c006     movff   0x6, 0xfe9       	MOVFF	r0x06, FSR0L
0002be   ffe9
0002c0   c007     movff   0x7, 0xfea       	MOVFF	r0x07, FSR0H
0002c2   ffea
0002c4   cfef     movff   0xfef, 0x6       	MOVFF	INDF0, r0x06
0002c6   f006
0002c8   0efc     movlw   0xfc             	MOVLW	0xfc
0002ca   1606     andwf   0x6, 0x1, 0      	ANDWF	r0x06, F
0002cc   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
0002ce   ffe9
0002d0   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
0002d2   ffea
0002d4   c006     movff   0x6, 0xfef       	MOVFF	r0x06, INDF0
0002d6   ffef
                                           ;	.line	237; src/picUSB.c	EP_IN_BD(ep).Stat.uc |= (byte)((bufferSize & 0x0300) >> 8);
0002d8   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0002da   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0002dc   6e04     movwf   0x4, 0           	MOVWF	r0x04
0002de   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0002e0   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
0002e2   6e05     movwf   0x5, 0           	MOVWF	r0x05
0002e4   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0002e6   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0002e8   6e06     movwf   0x6, 0           	MOVWF	r0x06
0002ea   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0002ec   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
0002ee   6e07     movwf   0x7, 0           	MOVWF	r0x07
0002f0   c006     movff   0x6, 0xfe9       	MOVFF	r0x06, FSR0L
0002f2   ffe9
0002f4   c007     movff   0x7, 0xfea       	MOVFF	r0x07, FSR0H
0002f6   ffea
0002f8   cfef     movff   0xfef, 0x6       	MOVFF	INDF0, r0x06
0002fa   f006
0002fc   0e03     movlw   0x3              	MOVLW	0x03
0002fe   1402     andwf   0x2, 0, 0        	ANDWF	r0x02, W
                                           ; #	MOVWF	r0x08
                                           ; #	MOVF	r0x08, W
000300   1206     iorwf   0x6, 0x1, 0      	IORWF	r0x06, F
000302   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000304   ffe9
000306   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
000308   ffea
00030a   c006     movff   0x6, 0xfef       	MOVFF	r0x06, INDF0
00030c   ffef
                                           ;	.line	238; src/picUSB.c	EP_IN_BD(ep).Cnt = (byte)(bufferSize & 0xFF);
00030e   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000310   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000312   6e04     movwf   0x4, 0           	MOVWF	r0x04
000314   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000316   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
000318   6e05     movwf   0x5, 0           	MOVWF	r0x05
00031a   4a04     infsnz  0x4, 0x1, 0      	INFSNZ	r0x04, F
00031c   2a05     incf    0x5, 0x1, 0      	INCF	r0x05, F
00031e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000320   6e06     movwf   0x6, 0           	MOVWF	r0x06
000322   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000324   ffe9
000326   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
000328   ffea
00032a   c006     movff   0x6, 0xfef       	MOVFF	r0x06, INDF0
00032c   ffef
                                           ;	.line	239; src/picUSB.c	EP_IN_BD(ep).ADDR = PTR16(&controlTransferBuffer);
00032e   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000330   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000332   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000334   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000336   0e02     movlw   0x2              	MOVLW	0x02
000338   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00033a   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
00033c   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
00033e   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
000340   6e04     movwf   0x4, 0           	MOVWF	r0x04
000342   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
000344   6e05     movwf   0x5, 0           	MOVWF	r0x05
000346   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000348   ffe9
00034a   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
00034c   ffea
00034e   c004     movff   0x4, 0xfee       	MOVFF	r0x04, POSTINC0
000350   ffee
000352   c005     movff   0x5, 0xfef       	MOVFF	r0x05, INDF0
000354   ffef
                                           ;	.line	244; src/picUSB.c	wCount = wCount - bufferSize;
000356   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000358   0104     movlb   0x4              	BANKSEL	_wCount
00035a   5fc8     subwf   0xc8, 0x1, 0x1   	SUBWF	_wCount, F, B
00035c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
00035e   5bc9     subwfb  0xc9, 0x1, 0x1   	SUBWFB	(_wCount + 1), F, B
                                           ;	.line	247; src/picUSB.c	inPtr = (byte *)&controlTransferBuffer;
000360   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
000362   0104     movlb   0x4              	BANKSEL	(_inPtr + 1)
000364   6fc4     movwf   0xc4, 0x1        	MOVWF	(_inPtr + 1), B
000366   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
000368   6fc3     movwf   0xc3, 0x1        	MOVWF	_inPtr, B
00036a   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
00036c   6fc5     movwf   0xc5, 0x1        	MOVWF	(_inPtr + 2), B
                                           ;	.line	249; src/picUSB.c	for (i=0;i<bufferSize;i++)
00036e   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00201_DS_:
000370   c000     movff   0, 0x3           	MOVFF	r0x00, r0x03
000372   f003
000374   6a04     clrf    0x4, 0           	CLRF	r0x04
000376   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000378   5c04     subwf   0x4, 0, 0        	SUBWF	r0x04, W
00037a   e102     bnz     0x380            	BNZ	_00223_DS_
00037c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00037e   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
                                           _00223_DS_:
000380   e22b     bc      0x3d8            	BC	_00205_DS_
                                           ;	.line	250; src/picUSB.c	*inPtr++ = *outPtr++;
000382   c4c3     movff   0x4c3, 0x3       	MOVFF	_inPtr, r0x03
000384   f003
000386   c4c4     movff   0x4c4, 0x4       	MOVFF	(_inPtr + 1), r0x04
000388   f004
00038a   c4c5     movff   0x4c5, 0x5       	MOVFF	(_inPtr + 2), r0x05
00038c   f005
00038e   c4c0     movff   0x4c0, 0x6       	MOVFF	_outPtr, r0x06
000390   f006
000392   c4c1     movff   0x4c1, 0x7       	MOVFF	(_outPtr + 1), r0x07
000394   f007
000396   c4c2     movff   0x4c2, 0x8       	MOVFF	(_outPtr + 2), r0x08
000398   f008
00039a   c006     movff   0x6, 0xfe9       	MOVFF	r0x06, FSR0L
00039c   ffe9
00039e   c007     movff   0x7, 0xff3       	MOVFF	r0x07, PRODL
0003a0   fff3
0003a2   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0003a4   ec2c     call    0xa58, 0         	CALL	__gptrget1
0003a6   f005
0003a8   6e06     movwf   0x6, 0           	MOVWF	r0x06
0003aa   0104     movlb   0x4              	BANKSEL	_outPtr
0003ac   2bc0     incf    0xc0, 0x1, 0x1   	INCF	_outPtr, F, B
0003ae   e303     bnc     0x3b6            	BNC	_00224_DS_
                                           ; removed redundant BANKSEL
0003b0   3fc1     incfsz  0xc1, 0x1, 0x1   	INCFSZ	(_outPtr + 1), F, B
0003b2   d001     bra     0x3b6            	BRA	_30407_DS_
                                           ; removed redundant BANKSEL
0003b4   2bc2     incf    0xc2, 0x1, 0x1   	INCF	(_outPtr + 2), F, B
                                           _30407_DS_:
                                           _00224_DS_:
0003b6   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0003b8   ffe5
0003ba   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0003bc   ffe9
0003be   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0003c0   fff3
0003c2   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0003c4   ec7e     call    0xafc, 0         	CALL	__gptrput1
0003c6   f005
0003c8   0104     movlb   0x4              	BANKSEL	_inPtr
0003ca   2bc3     incf    0xc3, 0x1, 0x1   	INCF	_inPtr, F, B
0003cc   e303     bnc     0x3d4            	BNC	_00225_DS_
                                           ; removed redundant BANKSEL
0003ce   3fc4     incfsz  0xc4, 0x1, 0x1   	INCFSZ	(_inPtr + 1), F, B
0003d0   d001     bra     0x3d4            	BRA	_40408_DS_
                                           ; removed redundant BANKSEL
0003d2   2bc5     incf    0xc5, 0x1, 0x1   	INCF	(_inPtr + 2), F, B
                                           _40408_DS_:
                                           _00225_DS_:
                                           ;	.line	249; src/picUSB.c	for (i=0;i<bufferSize;i++)
0003d4   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
0003d6   d7cc     bra     0x370            	BRA	_00201_DS_
                                           _00205_DS_:
0003d8   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
0003da   f008
0003dc   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0003de   f007
0003e0   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0003e2   f006
0003e4   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0003e6   f005
0003e8   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0003ea   f004
0003ec   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0003ee   f003
0003f0   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0003f2   f002
0003f4   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0003f6   f001
0003f8   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0003fa   f000
0003fc   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0003fe   ffd9
000400   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__ProcessStandardRequest	code
                                           _ProcessStandardRequest:
000776   0105     movlb   0x5              	BANKSEL	_SetupPacket
                                           ;	.line	132; src/picUSB.c	if((SetupPacket.bmRequestType & 0x60) != 0x00)
000778   5100     movf    0, 0, 0x1        	MOVF	_SetupPacket, W, B
                                           ; #	ANDLW	0x60
                                           ; #	BTFSC	STATUS, 2
                                           ; #	GOTO	_00134_DS_
                                           ; #	GOTO	_00155_DS_
                                           ; #	MOVF	(_SetupPacket + 1), W, B
                                           ;	.line	135; src/picUSB.c	return;
00077a   0b60     andlw   0x60             	ANDLW	0x60
                                           ;	.line	137; src/picUSB.c	if (SetupPacket.bRequest == SET_ADDRESS)
00077c   a4d8     btfss   0xd8, 0x2, 0     	BTFSS	STATUS, 2
00077e   d058     bra     0x830            	BRA	_00155_DS_
                                           ; removed redundant BANKSEL
000780   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
000782   0a05     xorlw   0x5              	XORLW	0x05
000784   e109     bnz     0x798            	BNZ	_00153_DS_
                                           ;	.line	143; src/picUSB.c	requestHandled = 1;
000786   0e01     movlw   0x1              	MOVLW	0x01
000788   0104     movlb   0x4              	BANKSEL	_requestHandled
00078a   6fcc     movwf   0xcc, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	144; src/picUSB.c	deviceState = ADDRESS;
00078c   0e04     movlw   0x4              	MOVLW	0x04
00078e   0104     movlb   0x4              	BANKSEL	_deviceState
000790   6fcd     movwf   0xcd, 0x1        	MOVWF	_deviceState, B
                                           ;	.line	145; src/picUSB.c	deviceAddress = SetupPacket.wValue0;
000792   c502     movff   0x502, 0x4cb     	MOVFF	(_SetupPacket + 2), _deviceAddress
000794   f4cb
000796   d04c     bra     0x830            	BRA	_00155_DS_
                                           _00153_DS_:
000798   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	148; src/picUSB.c	else if (SetupPacket.bRequest == GET_DESCRIPTOR)
00079a   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
00079c   0a06     xorlw   0x6              	XORLW	0x06
00079e   e103     bnz     0x7a6            	BNZ	_00150_DS_
                                           ;	.line	150; src/picUSB.c	GetDescriptor();
0007a0   ec65     call    0x8ca, 0         	CALL	_GetDescriptor
0007a2   f004
0007a4   d045     bra     0x830            	BRA	_00155_DS_
                                           _00150_DS_:
0007a6   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	153; src/picUSB.c	else if (SetupPacket.bRequest == SET_CONFIGURATION)
0007a8   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
0007aa   0a09     xorlw   0x9              	XORLW	0x09
0007ac   e112     bnz     0x7d2            	BNZ	_00147_DS_
                                           ;	.line	155; src/picUSB.c	requestHandled = 1;
0007ae   0e01     movlw   0x1              	MOVLW	0x01
0007b0   0104     movlb   0x4              	BANKSEL	_requestHandled
0007b2   6fcc     movwf   0xcc, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	156; src/picUSB.c	usb_configure_endpoints();
0007b4   ec4d     call    0xa9a, 0         	CALL	_usb_configure_endpoints
0007b6   f005
                                           ;	.line	157; src/picUSB.c	currentConfiguration = SetupPacket.wValue0;
0007b8   c502     movff   0x502, 0x4ce     	MOVFF	(_SetupPacket + 2), _currentConfiguration
0007ba   f4ce
0007bc   0104     movlb   0x4              	BANKSEL	_currentConfiguration
                                           ;	.line	160; src/picUSB.c	if (currentConfiguration == 0)
0007be   51ce     movf    0xce, 0, 0x1     	MOVF	_currentConfiguration, W, B
0007c0   e104     bnz     0x7ca            	BNZ	_00136_DS_
                                           ;	.line	163; src/picUSB.c	deviceState = ADDRESS;
0007c2   0e04     movlw   0x4              	MOVLW	0x04
0007c4   0104     movlb   0x4              	BANKSEL	_deviceState
0007c6   6fcd     movwf   0xcd, 0x1        	MOVWF	_deviceState, B
0007c8   d033     bra     0x830            	BRA	_00155_DS_
                                           _00136_DS_:
                                           ;	.line	166; src/picUSB.c	deviceState = CONFIGURED;
0007ca   0e05     movlw   0x5              	MOVLW	0x05
0007cc   0104     movlb   0x4              	BANKSEL	_deviceState
0007ce   6fcd     movwf   0xcd, 0x1        	MOVWF	_deviceState, B
0007d0   d02f     bra     0x830            	BRA	_00155_DS_
                                           _00147_DS_:
0007d2   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	173; src/picUSB.c	else if (SetupPacket.bRequest == GET_CONFIGURATION)
0007d4   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
0007d6   0a08     xorlw   0x8              	XORLW	0x08
0007d8   e10f     bnz     0x7f8            	BNZ	_00144_DS_
                                           ;	.line	175; src/picUSB.c	requestHandled = 1;
0007da   0e01     movlw   0x1              	MOVLW	0x01
0007dc   0104     movlb   0x4              	BANKSEL	_requestHandled
0007de   6fcc     movwf   0xcc, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	176; src/picUSB.c	outPtr = (byte*)&currentConfiguration;
0007e0   0e04     movlw   0x4              	MOVLW	HIGH(_currentConfiguration)
0007e2   0104     movlb   0x4              	BANKSEL	(_outPtr + 1)
0007e4   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
0007e6   0ece     movlw   0xce             	MOVLW	LOW(_currentConfiguration)
                                           ; removed redundant BANKSEL
0007e8   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
0007ea   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
0007ec   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
                                           ;	.line	177; src/picUSB.c	wCount = 1;
0007ee   0e01     movlw   0x1              	MOVLW	0x01
0007f0   0104     movlb   0x4              	BANKSEL	_wCount
0007f2   6fc8     movwf   0xc8, 0x1        	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
0007f4   6bc9     clrf    0xc9, 0x1        	CLRF	(_wCount + 1), B
0007f6   d01c     bra     0x830            	BRA	_00155_DS_
                                           _00144_DS_:
0007f8   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	192; src/picUSB.c	else if (SetupPacket.bRequest == GET_INTERFACE)
0007fa   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
0007fc   0a0a     xorlw   0xa              	XORLW	0x0a
0007fe   e111     bnz     0x822            	BNZ	_00141_DS_
                                           ;	.line	196; src/picUSB.c	requestHandled = 1;
000800   0e01     movlw   0x1              	MOVLW	0x01
000802   0104     movlb   0x4              	BANKSEL	_requestHandled
000804   6fcc     movwf   0xcc, 0x1        	MOVWF	_requestHandled, B
000806   0105     movlb   0x5              	BANKSEL	_controlTransferBuffer
                                           ;	.line	197; src/picUSB.c	controlTransferBuffer[0] = 0;
000808   6b40     clrf    0x40, 0x1        	CLRF	_controlTransferBuffer, B
                                           ;	.line	198; src/picUSB.c	outPtr = (byte *)&controlTransferBuffer;
00080a   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
00080c   0104     movlb   0x4              	BANKSEL	(_outPtr + 1)
00080e   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
000810   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
000812   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
000814   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
000816   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
                                           ;	.line	199; src/picUSB.c	wCount = 1;
000818   0e01     movlw   0x1              	MOVLW	0x01
00081a   0104     movlb   0x4              	BANKSEL	_wCount
00081c   6fc8     movwf   0xc8, 0x1        	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
00081e   6bc9     clrf    0xc9, 0x1        	CLRF	(_wCount + 1), B
000820   d007     bra     0x830            	BRA	_00155_DS_
                                           _00141_DS_:
000822   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	202; src/picUSB.c	else if (SetupPacket.bRequest == SET_INTERFACE)
000824   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
000826   0a0b     xorlw   0xb              	XORLW	0x0b
000828   e103     bnz     0x830            	BNZ	_00155_DS_
                                           ;	.line	205; src/picUSB.c	requestHandled = 1;
00082a   0e01     movlw   0x1              	MOVLW	0x01
00082c   0104     movlb   0x4              	BANKSEL	_requestHandled
00082e   6fcc     movwf   0xcc, 0x1        	MOVWF	_requestHandled, B
                                           _00155_DS_:
000830   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__GetDescriptor	code
                                           _GetDescriptor:
0008ca   0105     movlb   0x5              	BANKSEL	_SetupPacket
                                           ;	.line	88; src/picUSB.c	if(SetupPacket.bmRequestType == 0x80)
0008cc   5100     movf    0, 0, 0x1        	MOVF	_SetupPacket, W, B
0008ce   0a80     xorlw   0x80             	XORLW	0x80
0008d0   e12d     bnz     0x92c            	BNZ	_00112_DS_
                                           _00124_DS_:
0008d2   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	93; src/picUSB.c	if (SetupPacket.wValue1 == DEVICE_DESCRIPTOR)
0008d4   5103     movf    0x3, 0, 0x1      	MOVF	(_SetupPacket + 3), W, B
0008d6   0a01     xorlw   0x1              	XORLW	0x01
0008d8   e10f     bnz     0x8f8            	BNZ	_00108_DS_
                                           ;	.line	95; src/picUSB.c	requestHandled = 1;
0008da   0e01     movlw   0x1              	MOVLW	0x01
0008dc   0104     movlb   0x4              	BANKSEL	_requestHandled
0008de   6fcc     movwf   0xcc, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	96; src/picUSB.c	outPtr = (byte *)&device_descriptor;
0008e0   0e00     movlw   0                	MOVLW	UPPER(_device_descriptor)
0008e2   0104     movlb   0x4              	BANKSEL	(_outPtr + 2)
0008e4   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
0008e6   0e09     movlw   0x9              	MOVLW	HIGH(_device_descriptor)
                                           ; removed redundant BANKSEL
0008e8   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
0008ea   0efa     movlw   0xfa             	MOVLW	LOW(_device_descriptor)
                                           ; removed redundant BANKSEL
0008ec   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
                                           ;	.line	97; src/picUSB.c	wCount = sizeof(USB_Device_Descriptor);
0008ee   0e12     movlw   0x12             	MOVLW	0x12
0008f0   0104     movlb   0x4              	BANKSEL	_wCount
0008f2   6fc8     movwf   0xc8, 0x1        	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
0008f4   6bc9     clrf    0xc9, 0x1        	CLRF	(_wCount + 1), B
0008f6   d01a     bra     0x92c            	BRA	_00112_DS_
                                           _00108_DS_:
0008f8   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	100; src/picUSB.c	else if (SetupPacket.wValue1 == CONFIGURATION_DESCRIPTOR)
0008fa   5103     movf    0x3, 0, 0x1      	MOVF	(_SetupPacket + 3), W, B
0008fc   0a02     xorlw   0x2              	XORLW	0x02
0008fe   e116     bnz     0x92c            	BNZ	_00112_DS_
                                           ;	.line	102; src/picUSB.c	requestHandled = 1;
000900   0e01     movlw   0x1              	MOVLW	0x01
000902   0104     movlb   0x4              	BANKSEL	_requestHandled
000904   6fcc     movwf   0xcc, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	103; src/picUSB.c	outPtr = (byte *)&configuration_descriptor;
000906   0e00     movlw   0                	MOVLW	UPPER(_configuration_descriptor)
000908   0104     movlb   0x4              	BANKSEL	(_outPtr + 2)
00090a   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
00090c   0e0a     movlw   0xa              	MOVLW	HIGH(_configuration_descriptor)
                                           ; removed redundant BANKSEL
00090e   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
000910   0e0c     movlw   0xc              	MOVLW	LOW(_configuration_descriptor)
                                           ; removed redundant BANKSEL
000912   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
                                           ;	.line	104; src/picUSB.c	wCount = configuration_descriptor.Header.wTotalLength;
000914   0e0e     movlw   0xe              	MOVLW	LOW(_configuration_descriptor + 2)
000916   6ef6     movwf   0xf6, 0          	MOVWF	TBLPTRL
000918   0e0a     movlw   0xa              	MOVLW	HIGH(_configuration_descriptor + 2)
00091a   6ef7     movwf   0xf7, 0          	MOVWF	TBLPTRH
00091c   0e00     movlw   0                	MOVLW	UPPER(_configuration_descriptor + 2)
00091e   6ef8     movwf   0xf8, 0          	MOVWF	TBLPTRU
000920   0009     tblrd   *+               	TBLRD*+	
000922   cff5     movff   0xff5, 0x4c8     	MOVFF	TABLAT, _wCount
000924   f4c8
000926   0009     tblrd   *+               	TBLRD*+	
000928   cff5     movff   0xff5, 0x4c9     	MOVFF	TABLAT, (_wCount + 1)
00092a   f4c9
                                           _00112_DS_:
00092c   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1646 (0x066e) bytes ( 1.26%)
                                           ;           	  823 (0x0337) words
                                           ; udata size:	  334 (0x014e) bytes (18.64%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.2.1 #8163 (Oct 23 2012) (Linux)
                                           ; This file was generated Tue Dec 18 18:50:52 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f25k50
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_high_priority_isr
                                           	global	_low_priority_isr
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_vectors__high_priority_isr	code	0X000008
                                           _high_priority_isr:
000008   ef04     goto    0xc08            	goto 0x0C00 + 0x08
00000a   f006
                                           	
                                           ; ; Starting pCode block
                                           S_vectors__low_priority_isr	code	0X000018
                                           _low_priority_isr:
000018   ef0c     goto    0xc18            	goto 0x0C00 + 0x18
00001a   f006
                                           	
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	    8 (0x0008) bytes ( 0.01%)
                                           ;           	    4 (0x0004) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.2.1 #8163 (Oct 23 2012) (Linux)
                                           ; This file was generated Tue Dec 18 18:50:51 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f25k50
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	___uflags
                                           	global	__entry
                                           	global	__startup
                                           	global	__do_cinit
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_stack_end
                                           	extern	_TBLPTRU
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRL
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_TABLAT
                                           	extern	_POSTINC0
                                           	extern	_main
                                           	extern	_cinit
                                           
                                           
                                           	idata
                                           ___uflags	db	0x00
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_crt0iBoot4___entry	code	0X000000
                                           __entry:
000000   ef73     goto    0xae6            	goto __startup
000002   f005
                                           	
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_crt0iBoot4___do_cinit	code
                                           __do_cinit:
                                           	; TBLPTR = &cinit
000832   0e22     movlw   0x22             	movlw low(_cinit)
000834   6ef6     movwf   0xf6, 0          	movwf _TBLPTRL, 0
000836   0e0b     movlw   0xb              	movlw high(_cinit)
000838   6ef7     movwf   0xf7, 0          	movwf _TBLPTRH, 0
00083a   0e00     movlw   0                	movlw upper(_cinit)
00083c   6ef8     movwf   0xf8, 0          	movwf _TBLPTRU, 0
                                           	; 0x05 = cinit.num_init
00083e   0009     tblrd   *+               	tblrd*+
000840   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
000842   6e05     movwf   0x5, 0           	movwf 0x05, 0
000844   0009     tblrd   *+               	tblrd*+
000846   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
000848   6e06     movwf   0x6, 0           	movwf 0x05 + 1, 0
                                           	; while (0x05)
00084a   5005     movf    0x5, 0, 0        	movf 0x05, w, 0
                                           test:
00084c   e102     bnz     0x852            	bnz cont1
00084e   5006     movf    0x6, 0, 0        	movf 0x05 + 1, w, 0
000850   e03b     bz      0x8c8            	bz done
                                           cont1:
                                           	; Count down so we only have to look up the data in _cinit once.
                                           	; At this point we know that TBLPTR points to the top of the current
                                           	; entry in _cinit, so we can just start reading the from, to, and
                                           	; size values.
                                           	; read the source address low
000852   0009     tblrd   *+               	tblrd*+
000854   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
000856   6e00     movwf   0, 0             	movwf 0x00, 0
                                           	; source address high
000858   0009     tblrd   *+               	tblrd*+
00085a   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
00085c   6e01     movwf   0x1, 0           	movwf 0x00 + 1, 0
                                           	; source address upper
00085e   0009     tblrd   *+               	tblrd*+
000860   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
000862   6e02     movwf   0x2, 0           	movwf 0x00 + 2, 0
                                           	; skip 0 byte since it is stored as 0 32bit int
000864   0009     tblrd   *+               	tblrd*+
                                           	; read the destination address directly into FSR0
                                           	; destination address low
000866   0009     tblrd   *+               	tblrd*+
000868   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
00086a   6ee9     movwf   0xe9, 0          	movwf _FSR0L, 0
                                           	; destination address high
00086c   0009     tblrd   *+               	tblrd*+
00086e   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
000870   6eea     movwf   0xea, 0          	movwf _FSR0H, 0
                                           	; skip two bytes since it is stored as 0 32bit int
000872   0009     tblrd   *+               	tblrd*+
000874   0009     tblrd   *+               	tblrd*+
                                           	; read the size of data to transfer to destination address
000876   0009     tblrd   *+               	tblrd*+
000878   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
00087a   6e03     movwf   0x3, 0           	movwf 0x03, 0
00087c   0009     tblrd   *+               	tblrd*+
00087e   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
000880   6e04     movwf   0x4, 0           	movwf 0x03 + 1, 0
                                           	; skip two bytes since it is stored as 0 32bit int
000882   0009     tblrd   *+               	tblrd*+
000884   0009     tblrd   *+               	tblrd*+
                                           	; 0x00 = 0x07 ->from;
                                           	; FSR0 = 0x07 ->to;
                                           	; 0x03 = (unsigned short) 0x07 ->size;
                                           	; the table pointer now points to the next entry. Save it
                                           	; off since we will be using the table pointer to do the copying
                                           	; for the entry
                                           	; 0x07 = TBLPTR
000886   cff6     movff   0xff6, 0x7       	movff _TBLPTRL, 0x07
000888   f007
00088a   cff7     movff   0xff7, 0x8       	movff _TBLPTRH, 0x07 + 1
00088c   f008
00088e   cff8     movff   0xff8, 0x9       	movff _TBLPTRU, 0x07 + 2
000890   f009
                                           	; now assign the source address to the table pointer
                                           	; TBLPTR = 0x00
000892   c000     movff   0, 0xff6         	movff 0x00, _TBLPTRL
000894   fff6
000896   c001     movff   0x1, 0xff7       	movff 0x00 + 1, _TBLPTRH
000898   fff7
00089a   c002     movff   0x2, 0xff8       	movff 0x00 + 2, _TBLPTRU
00089c   fff8
                                           	; while (0x03)
00089e   5003     movf    0x3, 0, 0        	movf 0x03, w, 0
                                           copy_loop:
0008a0   e102     bnz     0x8a6            	bnz copy_one_byte
0008a2   5004     movf    0x4, 0, 0        	movf 0x03 + 1, w, 0
0008a4   e007     bz      0x8b4            	bz done_copying
                                           copy_one_byte:
0008a6   0009     tblrd   *+               	tblrd*+
0008a8   50f5     movf    0xf5, 0, 0       	movf _TABLAT, w, 0
0008aa   6eee     movwf   0xee, 0          	movwf _POSTINC0, 0
                                           	; decrement byte counter
0008ac   0603     decf    0x3, 0x1, 0      	decf 0x03, f, 0
0008ae   e2f8     bc      0x8a0            	bc copy_loop
0008b0   0604     decf    0x4, 0x1, 0      	decf 0x03 + 1, f, 0
0008b2   d7f9     bra     0x8a6            	bra copy_one_byte
                                           done_copying:
                                           	; restore the table pointer for the next entry
                                           	; TBLPTR = 0x07
0008b4   c007     movff   0x7, 0xff6       	movff 0x07, _TBLPTRL
0008b6   fff6
0008b8   c008     movff   0x8, 0xff7       	movff 0x07 + 1, _TBLPTRH
0008ba   fff7
0008bc   c009     movff   0x9, 0xff8       	movff 0x07 + 2, _TBLPTRU
0008be   fff8
                                           	; decrement entry counter
0008c0   0605     decf    0x5, 0x1, 0      	decf 0x05, f, 0
0008c2   e2c4     bc      0x84c            	bc test
0008c4   0606     decf    0x6, 0x1, 0      	decf 0x05 + 1, f, 0
0008c6   d7c5     bra     0x852            	bra cont1
                                           	; emit done label
                                           done:
0008c8   0012     return  0                	return
                                           	
                                           ; ; Starting pCode block
                                           S_crt0iBoot4___startup	code
                                           __startup:
                                           	; Initialize the stack pointer
000ae6   ee11     lfsr    0x1, 0x1ff       	lfsr 1, _stack_end
000ae8   f0ff
000aea   ee21     lfsr    0x2, 0x1ff       	lfsr 2, _stack_end
000aec   f0ff
                                           	; 1st silicon does not do this on POR
000aee   6af8     clrf    0xf8, 0          	clrf _TBLPTRU, 0
                                           	; Initialize the flash memory access configuration.
                                           	; This is harmless for non-flash devices, so we do it on all parts.
000af0   9ca6     bcf     0xa6, 0x6, 0     	bcf 0xa6, 6, 0 ; EECON1.CFGS = 0, Access Flash program or data EEPROM memory, not Configuration registers
000af2   8ea6     bsf     0xa6, 0x7, 0     	bsf 0xa6, 7, 0 ; EECON1.EEPGD = 1, Access Flash program memory, not EEPROM memory
                                           	
                                           ;	.line	101; obj/crt0iBoot4.c	_do_cinit ();
000af4   ec19     call    0x832, 0         	CALL	__do_cinit
000af6   f004
                                           ;	.line	104; obj/crt0iBoot4.c	main ();
000af8   ec9c     call    0x538, 0         	CALL	_main
000afa   f002
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  244 (0x00f4) bytes ( 0.19%)
                                           ;           	  122 (0x007a) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------------------------
                                           ;  stack.S - automatically allocate stack for PIC16 targets
                                           ;            with out the need for using the #pragma stack
                                           ;            directive
                                           ;
                                           ;  Copyright (C) 2006, Vangelis Rokas <vrokas AT otenet.gr>
                                           ;
                                           ;  This library is free software; you can redistribute it and/or modify it
                                           ;  under the terms of the GNU General Public License as published by the
                                           ;  Free Software Foundation; either version 2, or (at your option) any
                                           ;  later version.
                                           ;
                                           ;  This library is distributed in the hope that it will be useful,
                                           ;  but WITHOUT ANY WARRANTY; without even the implied warranty of
                                           ;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
                                           ;  GNU General Public License for more details.
                                           ;
                                           ;  You should have received a copy of the GNU General Public License 
                                           ;  along with this library; see the file COPYING. If not, write to the
                                           ;  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
                                           ;   MA 02110-1301, USA.
                                           ;
                                           ;  As a special exception, if you link this library with other files,
                                           ;  some of which are compiled with SDCC, to produce an executable,
                                           ;  this library does not by itself cause the resulting executable to
                                           ;  be covered by the GNU General Public License. This exception does
                                           ;  not however invalidate any other reasons why the executable file
                                           ;  might be covered by the GNU General Public License.
                                           ;--------------------------------------------------------------------------
                                           
                                                   radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                                   global _stack
                                                   global _stack_end
                                           
                                           ; allocate space for stack
                                           stack_section   udata
                                           _stack          res     0xff
                                           _stack_end      res     1
                                           
                                                   end
