gplink-0.14.2 #774 (Oct 23 2012)
Copyright (c) 1998-2012 gputils project
Listing File Generated: 12-15-2012  16:08:58
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.2.1 #8163 (Oct 23 2012) (Linux)
                                           ; This file was generated Sat Dec 15 16:08:57 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec
                                           	CONFIG	PLLDIV=5
                                           	CONFIG	CPUDIV=OSC1_PLL2
                                           	CONFIG	USBDIV=2
                                           	CONFIG	FOSC=HSPLL_HS
                                           	CONFIG	FCMEN=ON
                                           	CONFIG	IESO=OFF
                                           	CONFIG	PWRT=ON
                                           	CONFIG	BOR=OFF
                                           	CONFIG	VREGEN=ON
                                           	CONFIG	WDT=OFF
                                           	CONFIG	MCLRE=ON
                                           	CONFIG	LPT1OSC=OFF
                                           	CONFIG	PBADEN=OFF
                                           	CONFIG	CCP2MX=ON
                                           	CONFIG	STVREN=ON
                                           	CONFIG	LVP=OFF
                                           	CONFIG	XINST=OFF
                                           	CONFIG	DEBUG=OFF
                                           	CONFIG	CP0=OFF
                                           	CONFIG	CP1=OFF
                                           	CONFIG	CP2=OFF
                                           	CONFIG	CPB=OFF
                                           	CONFIG	CPD=OFF
                                           	CONFIG	WRT0=OFF
                                           	CONFIG	WRT1=OFF
                                           	CONFIG	WRT2=OFF
                                           	CONFIG	WRTB=OFF
                                           	CONFIG	WRTC=OFF
                                           	CONFIG	WRTD=OFF
                                           	CONFIG	EBTR0=OFF
                                           	CONFIG	EBTR1=OFF
                                           	CONFIG	EBTR2=OFF
                                           	CONFIG	EBTRB=OFF
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_delay
                                           	global	_start_write
                                           	global	_disable_boot
                                           	global	_usb_configure_endpoints
                                           	global	_usb_ep_data_out_callback
                                           	global	_main
                                           	global	_reset_isr
                                           	global	_high_priority_isr
                                           	global	_low_priority_isr
                                           	global	_device_descriptor
                                           	global	_configuration_descriptor
                                           	global	_lang
                                           	global	_manu
                                           	global	_prod
                                           	global	_string_descriptor
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_CCP1ASbits
                                           	extern	_ECCP1ASbits
                                           	extern	_CCP1DELbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_SetupPacket
                                           	extern	_controlTransferBuffer
                                           	extern	_bootCmd
                                           	extern	_outPtr
                                           	extern	_inPtr
                                           	extern	_wCount
                                           	extern	_deviceState
                                           	extern	_selfPowered
                                           	extern	_currentConfiguration
                                           	extern	_ep_bdt
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_CCP1AS
                                           	extern	_ECCP1AS
                                           	extern	_CCP1DEL
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_EnableUSBModule
                                           	extern	_ProcessUSBTransactions
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block
                                           S_main__reset_isr	code	0X000000
                                           _reset_isr:
000000   ef2c     goto    0x858            	goto _main
000002   f004
                                           	;goto _startup
                                           	
                                           ; ; Starting pCode block
                                           S_main__high_priority_isr	code	0X000008
                                           _high_priority_isr:
000008   ef04     goto    0xc08            	goto 0x0C00 + 0x08
00000a   f006
                                           	
                                           ; ; Starting pCode block
                                           S_main__low_priority_isr	code	0X000018
                                           _low_priority_isr:
000018   ef0c     goto    0xc18            	goto 0x0C00 + 0x18
00001a   f006
                                           	
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	368; src/main.c	byte t1_count = 0;
000858   6a00     clrf    0, 0             	CLRF	r0x00
                                           	; movlw 0x0F
                                           	; movwf _ADCON1 ; all I/O to Digital mode
                                           	; movlw 0x07
                                           	; movwf _CMCON ; all I/O to Digital mode
00085a   9892     bcf     0x92, 0x4, 0     	bcf _TRISA, 4 ; led output
00085c   8889     bsf     0x89, 0x4, 0     	bsf _LATA, 4 ; led on
                                           	;bcf _PIR1, 0 ; PIR1bits.TMR1IF = 0;
00085e   0e31     movlw   0x31             	movlw b'00110001' ; prescaler 8 (0b11)
000860   6ecd     movwf   0xcd, 0          	movwf _T1CON ; timer 1 on,
                                           	;bsf _INTCON, 6 ; Enable Peripheral interrupt (PEIE=bit6)
                                           	;bsf _INTCON, 7 ; Enable General interrupt (GIE=bit7)
000862   6aa6     clrf    0xa6, 0          	clrf _EECON1 ; EECON1=0
000864   0e14     movlw   0x14             	movlw b'00010100' ; (0x14) Enable pullup resistors and full speed mode
000866   010f     movlb   0xf              	banksel _UCFG
000868   6f6f     movwf   0x6f, 0x1        	movwf _UCFG, b
                                           	
                                           ;	.line	445; src/main.c	EP_IN_BD(1).ADDR = PTR16(&bootCmd);
00086a   0e80     movlw   0x80             	MOVLW	LOW(_bootCmd)
00086c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00086e   0e04     movlw   0x4              	MOVLW	HIGH(_bootCmd)
000870   6e02     movwf   0x2, 0           	MOVWF	r0x02
000872   6a03     clrf    0x3, 0           	CLRF	r0x03
000874   6a04     clrf    0x4, 0           	CLRF	r0x04
000876   6a03     clrf    0x3, 0           	CLRF	r0x03
000878   6a04     clrf    0x4, 0           	CLRF	r0x04
00087a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00087c   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 14)
00087e   6f0e     movwf   0xe, 0x1         	MOVWF	(_ep_bdt + 14), B
000880   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000882   6f0f     movwf   0xf, 0x1         	MOVWF	(_ep_bdt + 15), B
000884   0104     movlb   0x4              	BANKSEL	_currentConfiguration
                                           ;	.line	446; src/main.c	currentConfiguration = 0x00;
000886   6bcc     clrf    0xcc, 0x1        	CLRF	_currentConfiguration, B
000888   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	447; src/main.c	deviceState = DETACHED;
00088a   6bcb     clrf    0xcb, 0x1        	CLRF	_deviceState, B
                                           ;	.line	450; src/main.c	do {
00088c   6a01     clrf    0x1, 0           	CLRF	r0x01
00088e   6a02     clrf    0x2, 0           	CLRF	r0x02
000890   6a03     clrf    0x3, 0           	CLRF	r0x03
000892   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00217_DS_:
                                           ;	.line	451; src/main.c	EnableUSBModule();
000894   ec00     call    0xa00, 0         	CALL	_EnableUSBModule
000896   f005
                                           ;	.line	452; src/main.c	ProcessUSBTransactions();
000898   ecb9     call    0x972, 0         	CALL	_ProcessUSBTransactions
00089a   f004
                                           ;	.line	453; src/main.c	i = i + 1;
00089c   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
00089e   e304     bnc     0x8a8            	BNC	_00256_DS_
0008a0   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
0008a2   e302     bnc     0x8a8            	BNC	_00256_DS_
0008a4   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
0008a6   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
                                           _00256_DS_:
                                           ;	.line	454; src/main.c	if (i == 0xFFFFF) break; 
0008a8   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0008aa   0aff     xorlw   0xff             	XORLW	0xff
0008ac   e108     bnz     0x8be            	BNZ	_00258_DS_
0008ae   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0008b0   0aff     xorlw   0xff             	XORLW	0xff
0008b2   e105     bnz     0x8be            	BNZ	_00258_DS_
0008b4   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0008b6   0a0f     xorlw   0xf              	XORLW	0x0f
0008b8   e102     bnz     0x8be            	BNZ	_00258_DS_
0008ba   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0008bc   e004     bz      0x8c6            	BZ	_00219_DS_
                                           _00258_DS_:
0008be   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	455; src/main.c	} while (deviceState != CONFIGURED);
0008c0   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
0008c2   0a05     xorlw   0x5              	XORLW	0x05
0008c4   e1e7     bnz     0x894            	BNZ	_00217_DS_
                                           _00219_DS_:
0008c6   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	458; src/main.c	if (deviceState != CONFIGURED)
0008c8   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
0008ca   0a05     xorlw   0x5              	XORLW	0x05
0008cc   e003     bz      0x8d4            	BZ	_00237_DS_
                                           ;	.line	460; src/main.c	t1_count = BOOT_TIMER_TICS;
0008ce   0ee5     movlw   0xe5             	MOVLW	0xe5
0008d0   6e00     movwf   0, 0             	MOVWF	r0x00
0008d2   9889     bcf     0x89, 0x4, 0     	bcf _LATA, 4 ; led on
                                           	
                                           _00237_DS_:
                                           ;	.line	466; src/main.c	while (1)
0008d4   6a01     clrf    0x1, 0           	CLRF	r0x01
0008d6   6a02     clrf    0x2, 0           	CLRF	r0x02
                                           _00229_DS_:
                                           ;	.line	469; src/main.c	ProcessUSBTransactions();
0008d8   ecb9     call    0x972, 0         	CALL	_ProcessUSBTransactions
0008da   f004
                                           ;	.line	472; src/main.c	if (led_counter == 0)
0008dc   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0008de   1002     iorwf   0x2, 0, 0        	IORWF	r0x02, W
0008e0   e102     bnz     0x8e6            	BNZ	_00223_DS_
0008e2   0e10     movlw   0x10             	movlw 1 << 4 ; toggle
0008e4   1a89     xorwf   0x89, 0x1, 0     	xorwf _LATA, f ; the led
                                           	
                                           _00223_DS_:
                                           ;	.line	479; src/main.c	led_counter++;
0008e6   4a01     infsnz  0x1, 0x1, 0      	INFSNZ	r0x01, F
0008e8   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
                                           ;	.line	482; src/main.c	if (PIR1bits.TMR1IF == 1)
0008ea   6a03     clrf    0x3, 0           	CLRF	r0x03
0008ec   b09e     btfsc   0x9e, 0, 0       	BTFSC	_PIR1bits, 0
0008ee   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0008f0   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0008f2   0a01     xorlw   0x1              	XORLW	0x01
0008f4   e1f1     bnz     0x8d8            	BNZ	_00229_DS_
                                           ;	.line	484; src/main.c	t1_count++;
0008f6   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
                                           ;	.line	485; src/main.c	PIR1bits.TMR1IF = 0;
0008f8   909e     bcf     0x9e, 0, 0       	BCF	_PIR1bits, 0
                                           ;	.line	488; src/main.c	if (t1_count > BOOT_TIMER_TICS)
0008fa   0ee6     movlw   0xe6             	MOVLW	0xe6
0008fc   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
0008fe   e3ec     bnc     0x8d8            	BNC	_00229_DS_
                                           ;	.line	490; src/main.c	disable_boot();
000900   ec06     call    0xc, 0           	CALL	_disable_boot
000902   f000
000904   ef00     goto    0xc00            	goto 0x0C00 ; start user app
000906   f006
                                           	
000908   d7e7     bra     0x8d8            	BRA	_00229_DS_
                                           ; ; Starting pCode block
                                           S_main__usb_ep_data_out_callback	code
                                           _usb_ep_data_out_callback:
                                           ;	.line	180; src/main.c	void usb_ep_data_out_callback(char end_point)
00001c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00001e   ffe5
000020   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000022   ffd9
000024   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000026   ffe5
000028   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00002a   ffe5
00002c   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00002e   ffe5
000030   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000032   ffe5
000034   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000036   ffe5
000038   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00003a   ffe5
00003c   0e02     movlw   0x2              	MOVLW	0x02
00003e   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000040   f000
000042   8889     bsf     0x89, 0x4, 0     	bsf _LATA, 4 ; led on
                                           	
                                           ;	.line	190; src/main.c	EP_IN_BD(end_point).Cnt = 0;
000044   4400     rlncf   0, 0, 0          	RLNCF	r0x00, W
000046   0bfe     andlw   0xfe             	ANDLW	0xfe
000048   6e01     movwf   0x1, 0           	MOVWF	r0x01
00004a   2801     incf    0x1, 0, 0        	INCF	r0x01, W
                                           ; #	MOVWF	r0x00
                                           ; #;;multiply lit val:0x04 by variable r0x00 and store in r0x00
                                           ; #	MOVF	r0x00, W
00004c   6e00     movwf   0, 0             	MOVWF	r0x00
00004e   0d04     mullw   0x4              	MULLW	0x04
000050   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
000052   be00     btfsc   0, 0x7, 0        	BTFSC	r0x00, 7
000054   0804     sublw   0x4              	SUBLW	0x04
000056   6e02     movwf   0x2, 0           	MOVWF	r0x02
000058   cff3     movff   0xff3, 0         	MOVFF	PRODL, r0x00
00005a   f000
00005c   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
00005e   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000060   6e03     movwf   0x3, 0           	MOVWF	r0x03
000062   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000064   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000066   6e04     movwf   0x4, 0           	MOVWF	r0x04
000068   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
00006a   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
00006c   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
00006e   ffe9
000070   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
000072   ffea
000074   0e00     movlw   0                	MOVLW	0x00
000076   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	193; src/main.c	TBLPTRU = bootCmd.addru;
000078   c484     movff   0x484, 0xff8     	MOVFF	(_bootCmd + 4), _TBLPTRU
00007a   fff8
                                           ;	.line	194; src/main.c	TBLPTRH = bootCmd.addrh;
00007c   c483     movff   0x483, 0xff7     	MOVFF	(_bootCmd + 3), _TBLPTRH
00007e   fff7
                                           ;	.line	195; src/main.c	TBLPTRL = bootCmd.addrl;
000080   c482     movff   0x482, 0xff6     	MOVFF	(_bootCmd + 2), _TBLPTRL
000082   fff6
000084   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	198; src/main.c	if (bootCmd.cmd ==  RESET)
000086   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
000088   0aff     xorlw   0xff             	XORLW	0xff
00008a   e105     bnz     0x96             	BNZ	_00137_DS_
                                           ;	.line	201; src/main.c	disable_boot();
00008c   ec06     call    0xc, 0           	CALL	_disable_boot
00008e   f000
000090   ef00     goto    0xc00            	goto 0x0C00 ; start user app
000092   f006
                                           	
000094   d08e     bra     0x1b2            	BRA	_00138_DS_
                                           _00137_DS_:
000096   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	207; src/main.c	else if (bootCmd.cmd == READ_VERSION)
000098   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
00009a   e113     bnz     0xc2             	BNZ	_00134_DS_
                                           ;	.line	210; src/main.c	bootCmd.buffer[2] = MINOR_VERSION;
00009c   0e07     movlw   0x7              	MOVLW	0x07
                                           ; removed redundant BANKSEL
00009e   6f82     movwf   0x82, 0x1        	MOVWF	(_bootCmd + 2), B
                                           ;	.line	211; src/main.c	bootCmd.buffer[3] = MAJOR_VERSION;
0000a0   0e04     movlw   0x4              	MOVLW	0x04
                                           ; removed redundant BANKSEL
0000a2   6f83     movwf   0x83, 0x1        	MOVWF	(_bootCmd + 3), B
                                           ;	.line	213; src/main.c	EP_IN_BD(end_point).Cnt = 4;
0000a4   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0000a6   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0000a8   6e03     movwf   0x3, 0           	MOVWF	r0x03
0000aa   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0000ac   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0000ae   6e04     movwf   0x4, 0           	MOVWF	r0x04
0000b0   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
0000b2   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
0000b4   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0000b6   ffe9
0000b8   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
0000ba   ffea
0000bc   0e04     movlw   0x4              	MOVLW	0x04
0000be   6eef     movwf   0xef, 0          	MOVWF	INDF0
0000c0   d078     bra     0x1b2            	BRA	_00138_DS_
                                           _00134_DS_:
0000c2   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	218; src/main.c	else if (bootCmd.cmd == READ_FLASH)
0000c4   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
0000c6   0a01     xorlw   0x1              	XORLW	0x01
0000c8   e127     bnz     0x118            	BNZ	_00131_DS_
                                           ;	.line	221; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
0000ca   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00144_DS_:
0000cc   0104     movlb   0x4              	BANKSEL	(_bootCmd + 1)
0000ce   5181     movf    0x81, 0, 0x1     	MOVF	(_bootCmd + 1), W, B
0000d0   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0000d2   e20f     bc      0xf2             	BC	_00147_DS_
0000d4   0009     tblrd   *+               	TBLRD*+ 
                                           ;	.line	224; src/main.c	bootCmd.xdat[counter] = TABLAT;
0000d6   0e85     movlw   0x85             	MOVLW	LOW(_bootCmd + 5)
0000d8   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
0000da   6e04     movwf   0x4, 0           	MOVWF	r0x04
0000dc   6a05     clrf    0x5, 0           	CLRF	r0x05
0000de   0e04     movlw   0x4              	MOVLW	HIGH(_bootCmd + 5)
0000e0   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
0000e2   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
0000e4   ffe9
0000e6   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
0000e8   ffea
0000ea   cff5     movff   0xff5, 0xfef     	MOVFF	_TABLAT, INDF0
0000ec   ffef
                                           ;	.line	221; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
0000ee   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
0000f0   d7ed     bra     0xcc             	BRA	_00144_DS_
                                           _00147_DS_:
                                           ;	.line	228; src/main.c	EP_IN_BD(end_point).Cnt = 5 + bootCmd.len;
0000f2   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0000f4   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0000f6   6e03     movwf   0x3, 0           	MOVWF	r0x03
0000f8   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0000fa   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0000fc   6e04     movwf   0x4, 0           	MOVWF	r0x04
0000fe   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
000100   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
000102   0e05     movlw   0x5              	MOVLW	0x05
000104   0104     movlb   0x4              	BANKSEL	(_bootCmd + 1)
000106   2581     addwf   0x81, 0, 0x1     	ADDWF	(_bootCmd + 1), W, B
000108   6e05     movwf   0x5, 0           	MOVWF	r0x05
00010a   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
00010c   ffe9
00010e   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
000110   ffea
000112   c005     movff   0x5, 0xfef       	MOVFF	r0x05, INDF0
000114   ffef
000116   d04d     bra     0x1b2            	BRA	_00138_DS_
                                           _00131_DS_:
000118   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	232; src/main.c	else if (bootCmd.cmd == WRITE_FLASH)
00011a   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
00011c   0a02     xorlw   0x2              	XORLW	0x02
00011e   e128     bnz     0x170            	BNZ	_00128_DS_
                                           ;	.line	251; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
000120   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00148_DS_:
000122   0104     movlb   0x4              	BANKSEL	(_bootCmd + 1)
000124   5181     movf    0x81, 0, 0x1     	MOVF	(_bootCmd + 1), W, B
000126   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
000128   e20f     bc      0x148            	BC	_00151_DS_
                                           ;	.line	253; src/main.c	TABLAT = bootCmd.xdat[counter];     // present data to table latch
00012a   0e85     movlw   0x85             	MOVLW	LOW(_bootCmd + 5)
00012c   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
00012e   6e04     movwf   0x4, 0           	MOVWF	r0x04
000130   6a05     clrf    0x5, 0           	CLRF	r0x05
000132   0e04     movlw   0x4              	MOVLW	HIGH(_bootCmd + 5)
000134   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
000136   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000138   ffe9
00013a   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
00013c   ffea
00013e   cfef     movff   0xfef, 0xff5     	MOVFF	INDF0, _TABLAT
000140   fff5
000142   000d     tblwt   *+               	TBLWT*+ 
                                           ;	.line	251; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
000144   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000146   d7ed     bra     0x122            	BRA	_00148_DS_
                                           _00151_DS_:
000148   000a     tblrd   *-               	TBLRD*- 
                                           ;	.line	258; src/main.c	EECON1 = 0b10000100; // allows write (WREN=1) in flash (EEPGD=1)
00014a   0e84     movlw   0x84             	MOVLW	0x84
00014c   6ea6     movwf   0xa6, 0          	MOVWF	_EECON1
                                           ;	.line	259; src/main.c	start_write();
00014e   ec78     call    0xaf0, 0         	CALL	_start_write
000150   f005
                                           ;	.line	288; src/main.c	EP_IN_BD(end_point).Cnt = 1;
000152   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000154   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000156   6e03     movwf   0x3, 0           	MOVWF	r0x03
000158   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00015a   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00015c   6e04     movwf   0x4, 0           	MOVWF	r0x04
00015e   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
000160   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
000162   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
000164   ffe9
000166   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
000168   ffea
00016a   0e01     movlw   0x1              	MOVLW	0x01
00016c   6eef     movwf   0xef, 0          	MOVWF	INDF0
00016e   d021     bra     0x1b2            	BRA	_00138_DS_
                                           _00128_DS_:
000170   0104     movlb   0x4              	BANKSEL	_bootCmd
                                           ;	.line	292; src/main.c	else if (bootCmd.cmd ==  ERASE_FLASH)
000172   5180     movf    0x80, 0, 0x1     	MOVF	_bootCmd, W, B
000174   0a03     xorlw   0x3              	XORLW	0x03
000176   e11d     bnz     0x1b2            	BNZ	_00138_DS_
                                           ;	.line	304; src/main.c	EECON1 = 0b10010100; // allows erase (WREN=1, FREE=1) in flash (EEPGD=1)
000178   0e94     movlw   0x94             	MOVLW	0x94
00017a   6ea6     movwf   0xa6, 0          	MOVWF	_EECON1
                                           ;	.line	305; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
00017c   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00152_DS_:
00017e   0104     movlb   0x4              	BANKSEL	(_bootCmd + 1)
000180   5181     movf    0x81, 0, 0x1     	MOVF	(_bootCmd + 1), W, B
000182   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
000184   e208     bc      0x196            	BC	_00155_DS_
                                           ;	.line	307; src/main.c	start_write();
000186   ec78     call    0xaf0, 0         	CALL	_start_write
000188   f005
00018a   0e40     movlw   0x40             	movlw 0x40
00018c   26f6     addwf   0xf6, 0x1, 0     	addwf _TBLPTRL ; TBLPTR += 64
00018e   0e00     movlw   0                	movlw 0x00 ; if (TBLPTRL == 0)
000190   22f7     addwfc  0xf7, 0x1, 0     	addwfc _TBLPTRH ; TBLPTRH += 1
                                           	
                                           ;	.line	305; src/main.c	for (counter=0; counter < bootCmd.len; counter++)
000192   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000194   d7f4     bra     0x17e            	BRA	_00152_DS_
                                           _00155_DS_:
                                           ;	.line	341; src/main.c	EP_IN_BD(end_point).Cnt = 1;
000196   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000198   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
00019a   6e03     movwf   0x3, 0           	MOVWF	r0x03
00019c   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00019e   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0001a0   6e04     movwf   0x4, 0           	MOVWF	r0x04
0001a2   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
0001a4   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
0001a6   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0001a8   ffe9
0001aa   c004     movff   0x4, 0xfea       	MOVFF	r0x04, FSR0H
0001ac   ffea
0001ae   0e01     movlw   0x1              	MOVLW	0x01
0001b0   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00138_DS_:
                                           ;	.line	346; src/main.c	if (EP_IN_BD(end_point).Cnt > 0)
0001b2   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0001b4   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0001b6   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0001b8   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0001ba   4a00     infsnz  0, 0x1, 0        	INFSNZ	r0x00, F
0001bc   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
0001be   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0001c0   ffe9
0001c2   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
0001c4   ffea
0001c6   cfef     movff   0xfef, 0         	MOVFF	INDF0, r0x00
0001c8   f000
0001ca   5000     movf    0, 0, 0          	MOVF	r0x00, W
0001cc   e009     bz      0x1e0            	BZ	_00143_DS_
0001ce   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 12)
                                           ;	.line	349; src/main.c	if (EP_IN_BD(1).Stat.DTS)
0001d0   ad0c     btfss   0xc, 0x6, 0x1    	BTFSS	(_ep_bdt + 12), 6, B
0001d2   d003     bra     0x1da            	BRA	_00140_DS_
                                           ;	.line	350; src/main.c	EP_IN_BD(1).Stat.uc = 0b10001000; // UOWN 1 DTS 0 DTSEN 1
0001d4   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
0001d6   6f0c     movwf   0xc, 0x1         	MOVWF	(_ep_bdt + 12), B
0001d8   d003     bra     0x1e0            	BRA	_00143_DS_
                                           _00140_DS_:
                                           ;	.line	352; src/main.c	EP_IN_BD(1).Stat.uc = 0b11001000; // UOWN 1 DTS 1 DTSEN 1
0001da   0ec8     movlw   0xc8             	MOVLW	0xc8
0001dc   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 12)
0001de   6f0c     movwf   0xc, 0x1         	MOVWF	(_ep_bdt + 12), B
                                           ; ;multiply lit val:0x04 by variable r0x01 and store in r0x01
                                           _00143_DS_:
                                           ;	.line	356; src/main.c	EP_OUT_BD(end_point).Cnt = EP1_BUFFER_SIZE;
0001e0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0001e2   0d04     mullw   0x4              	MULLW	0x04
0001e4   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
0001e6   be01     btfsc   0x1, 0x7, 0      	BTFSC	r0x01, 7
0001e8   0804     sublw   0x4              	SUBLW	0x04
0001ea   6e00     movwf   0, 0             	MOVWF	r0x00
0001ec   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
0001ee   f001
0001f0   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0001f2   2401     addwf   0x1, 0, 0        	ADDWF	r0x01, W
0001f4   6e02     movwf   0x2, 0           	MOVWF	r0x02
0001f6   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0001f8   2000     addwfc  0, 0, 0          	ADDWFC	r0x00, W
0001fa   6e03     movwf   0x3, 0           	MOVWF	r0x03
0001fc   4a02     infsnz  0x2, 0x1, 0      	INFSNZ	r0x02, F
0001fe   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000200   c002     movff   0x2, 0xfe9       	MOVFF	r0x02, FSR0L
000202   ffe9
000204   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
000206   ffea
000208   0e40     movlw   0x40             	MOVLW	0x40
00020a   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           ;	.line	358; src/main.c	EP_OUT_BD(end_point).Stat.uc = 0x80;      // UOWN 1
00020c   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
00020e   2601     addwf   0x1, 0x1, 0      	ADDWF	r0x01, F
000210   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000212   2200     addwfc  0, 0x1, 0        	ADDWFC	r0x00, F
000214   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
000216   ffe9
000218   c000     movff   0, 0xfea         	MOVFF	r0x00, FSR0H
00021a   ffea
00021c   0e80     movlw   0x80             	MOVLW	0x80
00021e   6eef     movwf   0xef, 0          	MOVWF	INDF0
000220   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000222   f005
000224   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000226   f004
000228   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
00022a   f003
00022c   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00022e   f002
000230   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000232   f001
000234   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000236   f000
000238   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
00023a   ffd9
00023c   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__usb_configure_endpoints	code
                                           _usb_configure_endpoints:
                                           ;	.line	164; src/main.c	UEP1 = 0b00011110;
000a6e   0e1e     movlw   0x1e             	MOVLW	0x1e
000a70   6e71     movwf   0x71, 0          	MOVWF	_UEP1
                                           ; #	MOVLW	0x40
                                           ; #	MOVWF	(_ep_bdt + 12), B
                                           ; #	MOVLW	0x40
                                           ;	.line	168; src/main.c	EP_IN_BD(1).Stat.uc  = 0b01000000;
000a72   0e40     movlw   0x40             	MOVLW	0x40
000a74   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 12)
                                           ;	.line	171; src/main.c	EP_OUT_BD(1).Cnt  = EP1_BUFFER_SIZE;
000a76   6f0c     movwf   0xc, 0x1         	MOVWF	(_ep_bdt + 12), B
                                           ; removed redundant BANKSEL
000a78   6f09     movwf   0x9, 0x1         	MOVWF	(_ep_bdt + 9), B
                                           ;	.line	172; src/main.c	EP_OUT_BD(1).ADDR = PTR16(&bootCmd);
000a7a   0e80     movlw   0x80             	MOVLW	LOW(_bootCmd)
                                           ; removed redundant BANKSEL
000a7c   6f0a     movwf   0xa, 0x1         	MOVWF	(_ep_bdt + 10), B
000a7e   0e04     movlw   0x4              	MOVLW	HIGH(_bootCmd)
                                           ; removed redundant BANKSEL
000a80   6f0b     movwf   0xb, 0x1         	MOVWF	(_ep_bdt + 11), B
                                           ;	.line	174; src/main.c	EP_OUT_BD(1).Stat.uc = 0b10000000;
000a82   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
000a84   6f08     movwf   0x8, 0x1         	MOVWF	(_ep_bdt + 8), B
000a86   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__disable_boot	code
                                           _disable_boot:
00000c   6acd     clrf    0xcd, 0          	clrf _T1CON ; disable timer 1
00000e   6a6d     clrf    0x6d, 0          	clrf _UCON ; disable USB
000010   8892     bsf     0x92, 0x4, 0     	bsf _TRISA, 4 ; led input
000012   9889     bcf     0x89, 0x4, 0     	bcf _LATA, 4 ; led off
000014   ec68     call    0xad0, 0         	call _delay ; force timeout on USB
000016   f005
                                           	
                                           ; ; Starting pCode block
                                           S_main__start_write	code
                                           _start_write:
                                           	;bcf _INTCON, 7 ; INTCONbits.GIE = 0 ; disable interrupts (activated in startup sequence)
000af0   0e55     movlw   0x55             	movlw 0x55
000af2   6ea7     movwf   0xa7, 0          	movwf _EECON2 ; EECON2 = 0x55;
000af4   0eaa     movlw   0xaa             	movlw 0xAA
000af6   6ea7     movwf   0xa7, 0          	movwf _EECON2 ; EECON2 = 0xAA;
000af8   82a6     bsf     0xa6, 0x1, 0     	bsf _EECON1, 1 ; EECON1bits.WR = 1; start flash/eeprom writing
                                           	; CPU stall here for 2ms
                                           	;bsf _INTCON, 7 ; INTCONbits.GIE = 1 ; re-enable interrupts
                                           	;nop ; proc. can forget to execute the first operation
                                           	
                                           ; ; Starting pCode block
                                           S_main__delay	code
                                           _delay:
000ad0   0eff     movlw   0xff             	movlw 0xFF
000ad2   6e00     movwf   0, 0             	movwf r0x00
000ad4   0eff     movlw   0xff             	movlw 0xFF
000ad6   6e01     movwf   0x1, 0           	movwf r0x01
                                           startup_loop:
000ad8   2e00     decfsz  0, 0x1, 0        	decfsz r0x00, f
000ada   d7fe     bra     0xad8            	bra startup_loop
000adc   2e01     decfsz  0x1, 0x1, 0      	decfsz r0x01, f
000ade   d7fc     bra     0xad8            	bra startup_loop
                                           	
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _device_descriptor:
00090a   0112     movlb   0x12             	DB	0x12, 0x01, 0x00, 0x02, 0xff, 0x00, 0xff, 0x40, 0xd8, 0x04, 0xaa, 0xfe
00090c   0200     mulwf   0, 0             
00090e   00ff     reset                    
000910   40ff     rrncf   0xff, 0, 0       
000912   04d8     decf    0xd8, 0, 0       
000914   feaa     dw      0xfeaa           
000916   0407     decf    0x7, 0, 0        	DB	0x07, 0x04, 0x01, 0x02, 0x00, 0x01
000918   0201     mulwf   0x1, 0           
00091a   0100     movlb   0                
                                           ; ; Starting pCode block for Ival
                                           _configuration_descriptor:
00091c   0209     mulwf   0x9, 0           	DB	0x09, 0x02, 0x20, 0x00, 0x01, 0x01, 0x00, 0xc0, 0x14, 0x09, 0x04, 0x00
00091e   0020     dw      0x20             
000920   0101     movlb   0x1              
000922   c000     movff   0, 0x914         
000924   0914
000926   0004     clrwdt                   
000928   0200     mulwf   0, 0             	DB	0x00, 0x02, 0xff, 0xff, 0xff, 0x00, 0x07, 0x05, 0x01, 0x02, 0x40, 0x00
00092a   ffff     dw      0xffff           
00092c   00ff     reset                    
00092e   0507     decf    0x7, 0, 0x1      
000930   0201     mulwf   0x1, 0           
000932   0040     dw      0x40             
000934   0700     decf    0, 0x1, 0x1      	DB	0x00, 0x07, 0x05, 0x81, 0x02, 0x40, 0x00, 0x00
000936   8105     bsf     0x5, 0, 0x1      
000938   4002     rrncf   0x2, 0, 0        
00093a   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _lang:
00093c   0304     mulwf   0x4, 0x1         	DB	0x04, 0x03, 0x09, 0x04
00093e   0409     decf    0x9, 0, 0        
                                           ; ; Starting pCode block for Ival
                                           _manu:
000940   0316     mulwf   0x16, 0x1        	DB	0x16, 0x03, 0x52, 0x00, 0x2e, 0x00, 0x42, 0x00, 0x6c, 0x00, 0x61, 0x00
000942   0052     dw      0x52             
000944   002e     dw      0x2e             
000946   0042     dw      0x42             
000948   006c     dw      0x6c             
00094a   0061     dw      0x61             
00094c   006e     dw      0x6e             	DB	0x6e, 0x00, 0x63, 0x00, 0x68, 0x00, 0x6f, 0x00, 0x74, 0x00
00094e   0063     dw      0x63             
000950   0068     dw      0x68             
000952   006f     dw      0x6f             
000954   0074     dw      0x74             
                                           ; ; Starting pCode block for Ival
                                           _prod:
000956   0312     mulwf   0x12, 0x1        	DB	0x12, 0x03, 0x50, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x75, 0x00
000958   0050     dw      0x50             
00095a   0069     dw      0x69             
00095c   006e     dw      0x6e             
00095e   0067     dw      0x67             
000960   0075     dw      0x75             
000962   0069     dw      0x69             	DB	0x69, 0x00, 0x6e, 0x00, 0x6f, 0x00
000964   006e     dw      0x6e             
000966   006f     dw      0x6f             
                                           ; ; Starting pCode block for Ival
                                           _string_descriptor:
000968   093c     iorlw   0x3c             	DB	LOW(_lang), HIGH(_lang), UPPER(_lang), LOW(_manu), HIGH(_manu), UPPER(_manu), LOW(_prod), HIGH(_prod), UPPER(_prod)
00096a   4000     rrncf   0, 0, 0          
00096c   0009     tblrd   *+               
00096e   0956     iorlw   0x56             
000970   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  864 (0x0360) bytes ( 0.66%)
                                           ;           	  432 (0x01b0) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.2.1 #8163 (Oct 23 2012) (Linux)
                                           ; This file was generated Sat Dec 15 16:08:58 2012
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_bootCmd
                                           	global	_deviceAddress
                                           	global	_selfPowered
                                           	global	_EnableUSBModule
                                           	global	_ProcessUSBTransactions
                                           	global	_deviceState
                                           	global	_currentConfiguration
                                           	global	_ctrlTransferStage
                                           	global	_requestHandled
                                           	global	_outPtr
                                           	global	_inPtr
                                           	global	_wCount
                                           	global	_ep_bdt
                                           	global	_SetupPacket
                                           	global	_controlTransferBuffer
                                           	global	_ProcessStandardRequest
                                           	global	_InDataStage
                                           	global	_OutDataStage
                                           	global	_SetupStage
                                           	global	_WaitForSetupStage
                                           	global	_ProcessControlTransfer
                                           	global	_UnSuspend
                                           	global	_BusReset
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrget1
                                           	extern	__gptrput1
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_CCP1ASbits
                                           	extern	_ECCP1ASbits
                                           	extern	_CCP1DELbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_CCP1AS
                                           	extern	_ECCP1AS
                                           	extern	_CCP1DEL
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           	extern	_usb_configure_endpoints
                                           	extern	_usb_ep_data_out_callback
                                           	extern	_device_descriptor
                                           	extern	_configuration_descriptor
                                           	extern	_string_descriptor
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           
                                           usbram5	udata
                                           _SetupPacket	res	64
                                           _controlTransferBuffer	res	64
                                           
                                           udata_picUSB_0	udata
                                           _selfPowered	res	1
                                           
                                           udata_picUSB_1	udata
                                           _deviceAddress	res	1
                                           
                                           udata_picUSB_2	udata
                                           _bootCmd	res	64
                                           
                                           udata_picUSB_3	udata
                                           _requestHandled	res	1
                                           
                                           udata_picUSB_4	udata
                                           _outPtr	res	3
                                           
                                           udata_picUSB_5	udata
                                           _wCount	res	2
                                           
                                           udata_picUSB_6	udata
                                           _deviceState	res	1
                                           
                                           udata_picUSB_7	udata
                                           _currentConfiguration	res	1
                                           
                                           udata_picUSB_8	udata
                                           _inPtr	res	3
                                           
                                           udata_picUSB_9	udata
                                           _ctrlTransferStage	res	1
                                           
                                           
                                           ustat_picUSB_00	udata	0X0400
                                           _ep_bdt        	res	128
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_picUSB__ProcessUSBTransactions	code
                                           _ProcessUSBTransactions:
                                           ;	.line	499; src/picUSB.c	void ProcessUSBTransactions()
000972   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000974   ffe5
                                           ; #	MOVF	_deviceState, W, B
                                           ; #	BTFSS	STATUS, 2
                                           ; #	GOTO	_00414_DS_
                                           ; #	GOTO	_00431_DS_
                                           ; #	BTFSS	_UIRbits, 2
000976   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	502; src/picUSB.c	if(deviceState == DETACHED)
000978   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
                                           ;	.line	503; src/picUSB.c	return;
00097a   e01f     bz      0x9ba            	BZ	_00431_DS_
                                           ;	.line	506; src/picUSB.c	if(UIRbits.ACTVIF && UIEbits.ACTVIE)
00097c   a468     btfss   0x68, 0x2, 0     	BTFSS	_UIRbits, 2
                                           ; #	GOTO	_00416_DS_
                                           ; #	BTFSS	_UIEbits, 2
                                           ; #	GOTO	_00416_DS_
                                           ; #	CALL	_UnSuspend
                                           ; #	CLRF	r0x00
                                           ;	.line	507; src/picUSB.c	UnSuspend();
00097e   d003     bra     0x986            	BRA	_00416_DS_
                                           ;	.line	510; src/picUSB.c	if(UCONbits.SUSPND == 1)
000980   b469     btfsc   0x69, 0x2, 0     	BTFSC	_UIEbits, 2
000982   ec7d     call    0xafa, 0         	CALL	_UnSuspend
000984   f005
                                           _00416_DS_:
000986   6a00     clrf    0, 0             	CLRF	r0x00
000988   b26d     btfsc   0x6d, 0x1, 0     	BTFSC	_UCONbits, 1
00098a   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
00098c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00098e   0a01     xorlw   0x1              	XORLW	0x01
                                           ;	.line	511; src/picUSB.c	return;
000990   e014     bz      0x9ba            	BZ	_00431_DS_
                                           ;	.line	514; src/picUSB.c	if (UIRbits.URSTIF && UIEbits.URSTIE)
000992   a068     btfss   0x68, 0, 0       	BTFSS	_UIRbits, 0
                                           ; #	GOTO	_00421_DS_
                                           ; #	BTFSS	_UIEbits, 0
                                           ; #	GOTO	_00421_DS_
                                           ; #	CALL	_BusReset
                                           ; #	BTFSS	_UIRbits, 1
                                           ;	.line	515; src/picUSB.c	BusReset();
000994   d003     bra     0x99c            	BRA	_00421_DS_
                                           ;	.line	531; src/picUSB.c	if (UIRbits.UERRIF && UIEbits.UERRIE)
000996   b069     btfsc   0x69, 0, 0       	BTFSC	_UIEbits, 0
000998   ece0     call    0x9c0, 0         	CALL	_BusReset
00099a   f004
                                           _00421_DS_:
00099c   a268     btfss   0x68, 0x1, 0     	BTFSS	_UIRbits, 1
                                           ; #	GOTO	_00424_DS_
                                           ; #	BTFSS	_UIEbits, 1
                                           ; #	GOTO	_00424_DS_
                                           ; #	BCF	_UIRbits, 1
                                           ; #	MOVLW	0x03
                                           ;	.line	532; src/picUSB.c	UIRbits.UERRIF = 0;// Clear errors
00099e   d002     bra     0x9a4            	BRA	_00424_DS_
                                           ;	.line	535; src/picUSB.c	if (deviceState < DEFAULT)  // DETACHED, ATTACHED or POWERED
0009a0   b269     btfsc   0x69, 0x1, 0     	BTFSC	_UIEbits, 1
0009a2   9268     bcf     0x68, 0x1, 0     	BCF	_UIRbits, 1
                                           _00424_DS_:
0009a4   0e03     movlw   0x3              	MOVLW	0x03
                                           ; #	SUBWF	_deviceState, W, B
                                           ; #	BTFSC	STATUS, 0
                                           ; #	GOTO	_00427_DS_
                                           ; #	GOTO	_00431_DS_
                                           ; #	BTFSS	_UIRbits, 3
0009a6   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	536; src/picUSB.c	return;
0009a8   5dcb     subwf   0xcb, 0, 0x1     	SUBWF	_deviceState, W, B
                                           ;	.line	539; src/picUSB.c	if(UIRbits.TRNIF && UIEbits.TRNIE)
0009aa   e307     bnc     0x9ba            	BNC	_00431_DS_
0009ac   a668     btfss   0x68, 0x3, 0     	BTFSS	_UIRbits, 3
0009ae   d005     bra     0x9ba            	BRA	_00431_DS_
0009b0   a669     btfss   0x69, 0x3, 0     	BTFSS	_UIEbits, 3
0009b2   d003     bra     0x9ba            	BRA	_00431_DS_
                                           ;	.line	541; src/picUSB.c	ProcessControlTransfer();
0009b4   ec70     call    0x6e0, 0         	CALL	_ProcessControlTransfer
0009b6   f003
                                           ;	.line	543; src/picUSB.c	UIRbits.TRNIF = 0;
0009b8   9668     bcf     0x68, 0x3, 0     	BCF	_UIRbits, 3
                                           _00431_DS_:
0009ba   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0009bc   f000
0009be   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__BusReset	code
                                           _BusReset:
                                           ;	.line	471; src/picUSB.c	void BusReset()
0009c0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0009c2   ffe5
                                           ;	.line	473; src/picUSB.c	UEIR  = 0x00;
0009c4   6a6a     clrf    0x6a, 0          	CLRF	_UEIR
                                           ;	.line	474; src/picUSB.c	UIR   = 0x00;
0009c6   6a68     clrf    0x68, 0          	CLRF	_UIR
                                           ;	.line	475; src/picUSB.c	UEIE  = 0x9f;
0009c8   0e9f     movlw   0x9f             	MOVLW	0x9f
0009ca   6e6b     movwf   0x6b, 0          	MOVWF	_UEIE
                                           ;	.line	476; src/picUSB.c	UIE   = 0x7b;
0009cc   0e7b     movlw   0x7b             	MOVLW	0x7b
0009ce   6e69     movwf   0x69, 0          	MOVWF	_UIE
                                           ;	.line	477; src/picUSB.c	UADDR = 0x00;
0009d0   6a6e     clrf    0x6e, 0          	CLRF	_UADDR
                                           ;	.line	480; src/picUSB.c	UEP0 = EP_CTRL | HSHK_EN;
0009d2   0e16     movlw   0x16             	MOVLW	0x16
0009d4   6e70     movwf   0x70, 0          	MOVWF	_UEP0
                                           _00396_DS_:
                                           ;	.line	483; src/picUSB.c	while (UIRbits.TRNIF == 1)
0009d6   6a00     clrf    0, 0             	CLRF	r0x00
0009d8   b668     btfsc   0x68, 0x3, 0     	BTFSC	_UIRbits, 3
0009da   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
0009dc   5000     movf    0, 0, 0          	MOVF	r0x00, W
0009de   0a01     xorlw   0x1              	XORLW	0x01
0009e0   e102     bnz     0x9e6            	BNZ	_00398_DS_
                                           ;	.line	484; src/picUSB.c	UIRbits.TRNIF = 0;
0009e2   9668     bcf     0x68, 0x3, 0     	BCF	_UIRbits, 3
0009e4   d7f8     bra     0x9d6            	BRA	_00396_DS_
                                           _00398_DS_:
                                           ;	.line	487; src/picUSB.c	UCONbits.PKTDIS = 0;
0009e6   986d     bcf     0x6d, 0x4, 0     	BCF	_UCONbits, 4
                                           ;	.line	490; src/picUSB.c	WaitForSetupStage();
0009e8   ec44     call    0xa88, 0         	CALL	_WaitForSetupStage
0009ea   f005
0009ec   0104     movlb   0x4              	BANKSEL	_selfPowered
                                           ;	.line	493; src/picUSB.c	selfPowered = 0;                      // Self powered is off by default
0009ee   6bc8     clrf    0xc8, 0x1        	CLRF	_selfPowered, B
0009f0   0104     movlb   0x4              	BANKSEL	_currentConfiguration
                                           ;	.line	494; src/picUSB.c	currentConfiguration = 0;             // Clear active configuration
0009f2   6bcc     clrf    0xcc, 0x1        	CLRF	_currentConfiguration, B
                                           ;	.line	495; src/picUSB.c	deviceState = DEFAULT;
0009f4   0e03     movlw   0x3              	MOVLW	0x03
0009f6   0104     movlb   0x4              	BANKSEL	_deviceState
0009f8   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
0009fa   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0009fc   f000
0009fe   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__UnSuspend	code
                                           _UnSuspend:
                                           ;	.line	466; src/picUSB.c	UCONbits.SUSPND = 0;
000afa   926d     bcf     0x6d, 0x1, 0     	BCF	_UCONbits, 1
                                           ;	.line	467; src/picUSB.c	UIEbits.ACTVIE = 0;
000afc   9469     bcf     0x69, 0x2, 0     	BCF	_UIEbits, 2
                                           ;	.line	468; src/picUSB.c	UIRbits.ACTVIF = 0;
000afe   9468     bcf     0x68, 0x2, 0     	BCF	_UIRbits, 2
000b00   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__EnableUSBModule	code
                                           _EnableUSBModule:
                                           ;	.line	444; src/picUSB.c	if(UCONbits.USBEN == 0)
000a00   b66d     btfsc   0x6d, 0x3, 0     	BTFSC	_UCONbits, 3
000a02   d006     bra     0xa10            	BRA	_00370_DS_
                                           ;	.line	446; src/picUSB.c	UCON = 0;
000a04   6a6d     clrf    0x6d, 0          	CLRF	_UCON
                                           ;	.line	447; src/picUSB.c	UIE = 0;
000a06   6a69     clrf    0x69, 0          	CLRF	_UIE
                                           ;	.line	448; src/picUSB.c	UCONbits.USBEN = 1;
000a08   866d     bsf     0x6d, 0x3, 0     	BSF	_UCONbits, 3
                                           ;	.line	449; src/picUSB.c	deviceState = ATTACHED;
000a0a   0e01     movlw   0x1              	MOVLW	0x01
000a0c   0104     movlb   0x4              	BANKSEL	_deviceState
000a0e   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
                                           _00370_DS_:
000a10   0104     movlb   0x4              	BANKSEL	_deviceState
                                           ;	.line	453; src/picUSB.c	if ((deviceState == ATTACHED) && !UCONbits.SE0)
000a12   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
000a14   0a01     xorlw   0x1              	XORLW	0x01
000a16   e109     bnz     0xa2a            	BNZ	_00374_DS_
000a18   ba6d     btfsc   0x6d, 0x5, 0     	BTFSC	_UCONbits, 5
000a1a   d007     bra     0xa2a            	BRA	_00374_DS_
                                           ;	.line	455; src/picUSB.c	UIR = 0;
000a1c   6a68     clrf    0x68, 0          	CLRF	_UIR
                                           ;	.line	456; src/picUSB.c	UIE = 0;
000a1e   6a69     clrf    0x69, 0          	CLRF	_UIE
                                           ;	.line	457; src/picUSB.c	UIEbits.URSTIE = 1;
000a20   8069     bsf     0x69, 0, 0       	BSF	_UIEbits, 0
                                           ;	.line	458; src/picUSB.c	UIEbits.IDLEIE = 1;
000a22   8869     bsf     0x69, 0x4, 0     	BSF	_UIEbits, 4
                                           ;	.line	459; src/picUSB.c	deviceState = POWERED;
000a24   0e02     movlw   0x2              	MOVLW	0x02
000a26   0104     movlb   0x4              	BANKSEL	_deviceState
000a28   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
                                           _00374_DS_:
000a2a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__ProcessControlTransfer	code
                                           _ProcessControlTransfer:
                                           ;	.line	360; src/picUSB.c	void ProcessControlTransfer()
0006e0   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0006e2   ffe5
0006e4   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0006e6   ffe5
                                           ;	.line	363; src/picUSB.c	byte PID, end_point = USTAT >> 3;
0006e8   386c     swapf   0x6c, 0, 0       	SWAPF	_USTAT, W
0006ea   44e8     rlncf   0xe8, 0, 0       	RLNCF	WREG, W
0006ec   0b1f     andlw   0x1f             	ANDLW	0x1f
0006ee   6e00     movwf   0, 0             	MOVWF	r0x00
                                           ;	.line	365; src/picUSB.c	if (end_point == 0) // Endpoint 0
0006f0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0006f2   a4d8     btfss   0xd8, 0x2, 0     	BTFSS	STATUS, 2
0006f4   d047     bra     0x784            	BRA	_00319_DS_
                                           ;	.line	368; src/picUSB.c	if (USTATbits.DIR == OUT)
0006f6   b46c     btfsc   0x6c, 0x2, 0     	BTFSC	_USTATbits, 2
0006f8   d022     bra     0x73e            	BRA	_00314_DS_
                                           ;	.line	372; src/picUSB.c	PID = (EP_OUT_BD(0).Stat.uc & 0x3C) >> 2;
0006fa   0e3c     movlw   0x3c             	MOVLW	0x3c
0006fc   0104     movlb   0x4              	BANKSEL	_ep_bdt
0006fe   1500     andwf   0, 0, 0x1        	ANDWF	_ep_bdt, W, B
000700   6e01     movwf   0x1, 0           	MOVWF	r0x01
000702   4001     rrncf   0x1, 0, 0        	RRNCF	r0x01, W
000704   40e8     rrncf   0xe8, 0, 0       	RRNCF	WREG, W
000706   0b3f     andlw   0x3f             	ANDLW	0x3f
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
                                           ;	.line	373; src/picUSB.c	if (PID == 0x0D)
000708   0a0d     xorlw   0xd              	XORLW	0x0d
00070a   e103     bnz     0x712            	BNZ	_00300_DS_
                                           ;	.line	375; src/picUSB.c	SetupStage();
00070c   ec10     call    0x620, 0         	CALL	_SetupStage
00070e   f003
000710   d040     bra     0x792            	BRA	_00321_DS_
                                           _00300_DS_:
000712   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
                                           ;	.line	377; src/picUSB.c	else if (ctrlTransferStage == DATA_OUT_STAGE)
000714   51cd     movf    0xcd, 0, 0x1     	MOVF	_ctrlTransferStage, W, B
000716   0a01     xorlw   0x1              	XORLW	0x01
000718   e10f     bnz     0x738            	BNZ	_00297_DS_
                                           ;	.line	381; src/picUSB.c	OutDataStage(0);
00071a   0e00     movlw   0                	MOVLW	0x00
00071c   6ae5     clrf    0xe5, 0          	CLRF	POSTDEC1
00071e   ecff     call    0x3fe, 0         	CALL	_OutDataStage
000720   f001
000722   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000724   0104     movlb   0x4              	BANKSEL	_ep_bdt
                                           ;	.line	384; src/picUSB.c	if(EP_OUT_BD(0).Stat.DTS)
000726   ad00     btfss   0, 0x6, 0x1      	BTFSS	_ep_bdt, 6, B
000728   d003     bra     0x730            	BRA	_00294_DS_
                                           ;	.line	385; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTSEN;
00072a   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
00072c   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
00072e   d031     bra     0x792            	BRA	_00321_DS_
                                           _00294_DS_:
                                           ;	.line	387; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
000730   0ec8     movlw   0xc8             	MOVLW	0xc8
000732   0104     movlb   0x4              	BANKSEL	_ep_bdt
000734   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
000736   d02d     bra     0x792            	BRA	_00321_DS_
                                           _00297_DS_:
                                           ;	.line	393; src/picUSB.c	WaitForSetupStage();
000738   ec44     call    0xa88, 0         	CALL	_WaitForSetupStage
00073a   f005
00073c   d02a     bra     0x792            	BRA	_00321_DS_
                                           _00314_DS_:
                                           ;	.line	400; src/picUSB.c	if ((UADDR == 0) && (deviceState == ADDRESS))
00073e   506e     movf    0x6e, 0, 0       	MOVF	_UADDR, W
000740   e10b     bnz     0x758            	BNZ	_00305_DS_
000742   0104     movlb   0x4              	BANKSEL	_deviceState
000744   51cb     movf    0xcb, 0, 0x1     	MOVF	_deviceState, W, B
000746   0a04     xorlw   0x4              	XORLW	0x04
000748   e107     bnz     0x758            	BNZ	_00305_DS_
                                           ;	.line	404; src/picUSB.c	UADDR = SetupPacket.wValue0;
00074a   c502     movff   0x502, 0xf6e     	MOVFF	(_SetupPacket + 2), _UADDR
00074c   ff6e
                                           ;	.line	405; src/picUSB.c	if(UADDR == 0)
00074e   506e     movf    0x6e, 0, 0       	MOVF	_UADDR, W
000750   e103     bnz     0x758            	BNZ	_00305_DS_
                                           ;	.line	408; src/picUSB.c	deviceState = DEFAULT;
000752   0e03     movlw   0x3              	MOVLW	0x03
000754   0104     movlb   0x4              	BANKSEL	_deviceState
000756   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
                                           _00305_DS_:
000758   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
                                           ;	.line	411; src/picUSB.c	if (ctrlTransferStage == DATA_IN_STAGE)
00075a   51cd     movf    0xcd, 0, 0x1     	MOVF	_ctrlTransferStage, W, B
00075c   0a02     xorlw   0x2              	XORLW	0x02
00075e   e10f     bnz     0x77e            	BNZ	_00311_DS_
                                           ;	.line	414; src/picUSB.c	InDataStage(0);
000760   0e00     movlw   0                	MOVLW	0x00
000762   6ae5     clrf    0xe5, 0          	CLRF	POSTDEC1
000764   ec1f     call    0x23e, 0         	CALL	_InDataStage
000766   f001
000768   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
00076a   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 4)
                                           ;	.line	417; src/picUSB.c	if(EP_IN_BD(0).Stat.DTS)
00076c   ad04     btfss   0x4, 0x6, 0x1    	BTFSS	(_ep_bdt + 4), 6, B
00076e   d003     bra     0x776            	BRA	_00308_DS_
                                           ;	.line	418; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTSEN;
000770   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
000772   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
000774   d00e     bra     0x792            	BRA	_00321_DS_
                                           _00308_DS_:
                                           ;	.line	420; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
000776   0ec8     movlw   0xc8             	MOVLW	0xc8
000778   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 4)
00077a   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
00077c   d00a     bra     0x792            	BRA	_00321_DS_
                                           _00311_DS_:
                                           ;	.line	426; src/picUSB.c	WaitForSetupStage();
00077e   ec44     call    0xa88, 0         	CALL	_WaitForSetupStage
000780   f005
000782   d007     bra     0x792            	BRA	_00321_DS_
                                           _00319_DS_:
                                           ;	.line	435; src/picUSB.c	if (!USTATbits.DIR) // If OUT
000784   b46c     btfsc   0x6c, 0x2, 0     	BTFSC	_USTATbits, 2
000786   d005     bra     0x792            	BRA	_00321_DS_
                                           ;	.line	436; src/picUSB.c	usb_ep_data_out_callback(end_point);
000788   5000     movf    0, 0, 0          	MOVF	r0x00, W
00078a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00078c   ec0e     call    0x1c, 0          	CALL	_usb_ep_data_out_callback
00078e   f000
000790   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           _00321_DS_:
000792   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000794   f001
000796   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000798   f000
00079a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__WaitForSetupStage	code
                                           _WaitForSetupStage:
000a88   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
                                           ;	.line	348; src/picUSB.c	ctrlTransferStage = SETUP_STAGE;
000a8a   6bcd     clrf    0xcd, 0x1        	CLRF	_ctrlTransferStage, B
                                           ;	.line	349; src/picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
000a8c   0e40     movlw   0x40             	MOVLW	0x40
000a8e   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 1)
000a90   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	350; src/picUSB.c	EP_OUT_BD(0).ADDR = PTR16(&SetupPacket);
000a92   0e00     movlw   0                	MOVLW	LOW(_SetupPacket)
                                           ; removed redundant BANKSEL
000a94   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
000a96   0e05     movlw   0x5              	MOVLW	HIGH(_SetupPacket)
                                           ; removed redundant BANKSEL
000a98   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	352; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTSEN;
000a9a   0e88     movlw   0x88             	MOVLW	0x88
                                           ; removed redundant BANKSEL
000a9c   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           ; removed redundant BANKSEL
                                           ;	.line	353; src/picUSB.c	EP_IN_BD(0).Stat.uc = 0x00;           // Give control to CPU
000a9e   6b04     clrf    0x4, 0x1         	CLRF	(_ep_bdt + 4), B
000aa0   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__SetupStage	code
                                           _SetupStage:
                                           ;	.line	279; src/picUSB.c	void SetupStage()
000620   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000622   ffe5
000624   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 4)
                                           ;	.line	283; src/picUSB.c	EP_IN_BD(0).Stat.uc &= ~BDS_UOWN;
000626   5104     movf    0x4, 0, 0x1      	MOVF	(_ep_bdt + 4), W, B
000628   6e00     movwf   0, 0             	MOVWF	r0x00
00062a   9e00     bcf     0, 0x7, 0        	BCF	r0x00, 7
00062c   5000     movf    0, 0, 0          	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
00062e   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
                                           ; removed redundant BANKSEL
                                           ;	.line	284; src/picUSB.c	EP_OUT_BD(0).Stat.uc &= ~BDS_UOWN;
000630   5100     movf    0, 0, 0x1        	MOVF	_ep_bdt, W, B
000632   6e00     movwf   0, 0             	MOVWF	r0x00
000634   9e00     bcf     0, 0x7, 0        	BCF	r0x00, 7
000636   5000     movf    0, 0, 0          	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
000638   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
00063a   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
                                           ;	.line	287; src/picUSB.c	ctrlTransferStage = SETUP_STAGE;
00063c   6bcd     clrf    0xcd, 0x1        	CLRF	_ctrlTransferStage, B
00063e   0104     movlb   0x4              	BANKSEL	_requestHandled
                                           ;	.line	288; src/picUSB.c	requestHandled = 0;                   // Default is that request hasn't been handled
000640   6bca     clrf    0xca, 0x1        	CLRF	_requestHandled, B
000642   0104     movlb   0x4              	BANKSEL	_wCount
                                           ;	.line	289; src/picUSB.c	wCount = 0;                           // No bytes transferred
000644   6bc6     clrf    0xc6, 0x1        	CLRF	_wCount, B
                                           ; removed redundant BANKSEL
000646   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
                                           ;	.line	292; src/picUSB.c	ProcessStandardRequest();
000648   ecce     call    0x79c, 0         	CALL	_ProcessStandardRequest
00064a   f003
00064c   0104     movlb   0x4              	BANKSEL	_requestHandled
                                           ;	.line	295; src/picUSB.c	if (!requestHandled)
00064e   51ca     movf    0xca, 0, 0x1     	MOVF	_requestHandled, W, B
000650   e10b     bnz     0x668            	BNZ	_00266_DS_
                                           ;	.line	298; src/picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
000652   0e40     movlw   0x40             	MOVLW	0x40
000654   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 1)
000656   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	299; src/picUSB.c	EP_OUT_BD(0).ADDR = PTR16(&SetupPacket);
000658   0e00     movlw   0                	MOVLW	LOW(_SetupPacket)
                                           ; removed redundant BANKSEL
00065a   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
00065c   0e05     movlw   0x5              	MOVLW	HIGH(_SetupPacket)
                                           ; removed redundant BANKSEL
00065e   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ; #	MOVLW	0x84
                                           ; #	MOVWF	_ep_bdt, B
                                           ; #	MOVLW	0x84
                                           ;	.line	300; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_BSTALL;
000660   0e84     movlw   0x84             	MOVLW	0x84
                                           ; removed redundant BANKSEL
                                           ;	.line	301; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_BSTALL;
000662   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           ; removed redundant BANKSEL
000664   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
000666   d038     bra     0x6d8            	BRA	_00267_DS_
                                           _00266_DS_:
000668   0105     movlb   0x5              	BANKSEL	_SetupPacket
                                           ;	.line	304; src/picUSB.c	else if (SetupPacket.bmRequestType & 0x80)
00066a   af00     btfss   0, 0x7, 0x1      	BTFSS	_SetupPacket, 7, B
00066c   d026     bra     0x6ba            	BRA	_00263_DS_
00066e   0104     movlb   0x4              	BANKSEL	(_wCount + 1)
                                           ;	.line	307; src/picUSB.c	if(SetupPacket.wLength < wCount)
000670   51c7     movf    0xc7, 0, 0x1     	MOVF	(_wCount + 1), W, B
000672   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 7)
000674   5d07     subwf   0x7, 0, 0x1      	SUBWF	(_SetupPacket + 7), W, B
000676   e104     bnz     0x680            	BNZ	_00283_DS_
000678   0104     movlb   0x4              	BANKSEL	_wCount
00067a   51c6     movf    0xc6, 0, 0x1     	MOVF	_wCount, W, B
00067c   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 6)
00067e   5d06     subwf   0x6, 0, 0x1      	SUBWF	(_SetupPacket + 6), W, B
                                           _00283_DS_:
000680   e204     bc      0x68a            	BC	_00261_DS_
                                           ;	.line	308; src/picUSB.c	wCount = SetupPacket.wLength;
000682   c506     movff   0x506, 0x4c6     	MOVFF	(_SetupPacket + 6), _wCount
000684   f4c6
000686   c507     movff   0x507, 0x4c7     	MOVFF	(_SetupPacket + 7), (_wCount + 1)
000688   f4c7
                                           _00261_DS_:
                                           ;	.line	310; src/picUSB.c	InDataStage(0);
00068a   0e00     movlw   0                	MOVLW	0x00
00068c   6ae5     clrf    0xe5, 0          	CLRF	POSTDEC1
00068e   ec1f     call    0x23e, 0         	CALL	_InDataStage
000690   f001
000692   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	311; src/picUSB.c	ctrlTransferStage = DATA_IN_STAGE;
000694   0e02     movlw   0x2              	MOVLW	0x02
000696   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
000698   6fcd     movwf   0xcd, 0x1        	MOVWF	_ctrlTransferStage, B
                                           ;	.line	313; src/picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
00069a   0e40     movlw   0x40             	MOVLW	0x40
00069c   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 1)
00069e   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	314; src/picUSB.c	EP_OUT_BD(0).ADDR = PTR16(&SetupPacket);
0006a0   0e00     movlw   0                	MOVLW	LOW(_SetupPacket)
                                           ; removed redundant BANKSEL
0006a2   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
0006a4   0e05     movlw   0x5              	MOVLW	HIGH(_SetupPacket)
                                           ; removed redundant BANKSEL
0006a6   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	315; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN;
0006a8   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
0006aa   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           ;	.line	318; src/picUSB.c	EP_IN_BD(0).ADDR = PTR16(&controlTransferBuffer);
0006ac   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
0006ae   6f06     movwf   0x6, 0x1         	MOVWF	(_ep_bdt + 6), B
0006b0   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
0006b2   6f07     movwf   0x7, 0x1         	MOVWF	(_ep_bdt + 7), B
                                           ;	.line	320; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
0006b4   0ec8     movlw   0xc8             	MOVLW	0xc8
                                           ; removed redundant BANKSEL
0006b6   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
0006b8   d00f     bra     0x6d8            	BRA	_00267_DS_
                                           _00263_DS_:
                                           ;	.line	326; src/picUSB.c	ctrlTransferStage = DATA_OUT_STAGE;
0006ba   0e01     movlw   0x1              	MOVLW	0x01
0006bc   0104     movlb   0x4              	BANKSEL	_ctrlTransferStage
0006be   6fcd     movwf   0xcd, 0x1        	MOVWF	_ctrlTransferStage, B
0006c0   0104     movlb   0x4              	BANKSEL	(_ep_bdt + 5)
                                           ;	.line	329; src/picUSB.c	EP_IN_BD(0).Cnt = 0;
0006c2   6b05     clrf    0x5, 0x1         	CLRF	(_ep_bdt + 5), B
                                           ;	.line	330; src/picUSB.c	EP_IN_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
0006c4   0ec8     movlw   0xc8             	MOVLW	0xc8
                                           ; removed redundant BANKSEL
0006c6   6f04     movwf   0x4, 0x1         	MOVWF	(_ep_bdt + 4), B
                                           ;	.line	333; src/picUSB.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
0006c8   0e40     movlw   0x40             	MOVLW	0x40
                                           ; removed redundant BANKSEL
0006ca   6f01     movwf   0x1, 0x1         	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	334; src/picUSB.c	EP_OUT_BD(0).ADDR = PTR16(&controlTransferBuffer);
0006cc   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
0006ce   6f02     movwf   0x2, 0x1         	MOVWF	(_ep_bdt + 2), B
0006d0   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
0006d2   6f03     movwf   0x3, 0x1         	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	336; src/picUSB.c	EP_OUT_BD(0).Stat.uc = BDS_UOWN | BDS_DTS | BDS_DTSEN;
0006d4   0ec8     movlw   0xc8             	MOVLW	0xc8
                                           ; removed redundant BANKSEL
0006d6   6f00     movwf   0, 0x1           	MOVWF	_ep_bdt, B
                                           _00267_DS_:
                                           ;	.line	340; src/picUSB.c	UCONbits.PKTDIS = 0;
0006d8   986d     bcf     0x6d, 0x4, 0     	BCF	_UCONbits, 4
0006da   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0006dc   f000
0006de   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__OutDataStage	code
                                           _OutDataStage:
                                           ;	.line	256; src/picUSB.c	void OutDataStage(unsigned char ep)
0003fe   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000400   ffe5
000402   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000404   ffd9
000406   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000408   ffe5
00040a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00040c   ffe5
00040e   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000410   ffe5
000412   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000414   ffe5
000416   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000418   ffe5
00041a   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00041c   ffe5
00041e   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000420   ffe5
000422   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000424   ffe5
000426   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
000428   ffe5
00042a   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
00042c   ffe5
00042e   0e02     movlw   0x2              	MOVLW	0x02
000430   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000432   f000
                                           ;	.line	260; src/picUSB.c	bufferSize = ((0x03 & EP_OUT_BD(ep).Stat.uc) << 8) | EP_OUT_BD(ep).Cnt;
000434   4400     rlncf   0, 0, 0          	RLNCF	r0x00, W
000436   0bfe     andlw   0xfe             	ANDLW	0xfe
                                           ; #	MOVWF	r0x01
                                           ; #;;multiply lit val:0x04 by variable r0x01 and store in r0x00
                                           ; #	MOVF	r0x01, W
000438   0d04     mullw   0x4              	MULLW	0x04
00043a   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
00043c   6e02     movwf   0x2, 0           	MOVWF	r0x02
00043e   cff3     movff   0xff3, 0         	MOVFF	PRODL, r0x00
000440   f000
000442   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000444   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000446   6e01     movwf   0x1, 0           	MOVWF	r0x01
000448   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00044a   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00044c   6e03     movwf   0x3, 0           	MOVWF	r0x03
00044e   c001     movff   0x1, 0xfe9       	MOVFF	r0x01, FSR0L
000450   ffe9
000452   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
000454   ffea
000456   cfef     movff   0xfef, 0x1       	MOVFF	INDF0, r0x01
000458   f001
00045a   0e03     movlw   0x3              	MOVLW	0x03
00045c   1601     andwf   0x1, 0x1, 0      	ANDWF	r0x01, F
00045e   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000460   6e05     movwf   0x5, 0           	MOVWF	r0x05
000462   6a04     clrf    0x4, 0           	CLRF	r0x04
000464   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
000466   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000468   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
00046a   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
00046c   4a00     infsnz  0, 0x1, 0        	INFSNZ	r0x00, F
00046e   2a02     incf    0x2, 0x1, 0      	INCF	r0x02, F
000470   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000472   ffe9
000474   c002     movff   0x2, 0xfea       	MOVFF	r0x02, FSR0H
000476   ffea
000478   cfef     movff   0xfef, 0         	MOVFF	INDF0, r0x00
00047a   f000
00047c   6a01     clrf    0x1, 0           	CLRF	r0x01
00047e   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000480   1200     iorwf   0, 0x1, 0        	IORWF	r0x00, F
000482   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000484   1201     iorwf   0x1, 0x1, 0      	IORWF	r0x01, F
                                           ;	.line	263; src/picUSB.c	wCount = wCount + bufferSize;
000486   5000     movf    0, 0, 0          	MOVF	r0x00, W
000488   0104     movlb   0x4              	BANKSEL	_wCount
00048a   27c6     addwf   0xc6, 0x1, 0x1   	ADDWF	_wCount, F, B
00048c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00048e   23c7     addwfc  0xc7, 0x1, 0x1   	ADDWFC	(_wCount + 1), F, B
                                           ;	.line	265; src/picUSB.c	outPtr = (byte*)&controlTransferBuffer;
000490   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
000492   0104     movlb   0x4              	BANKSEL	(_outPtr + 1)
000494   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
000496   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
000498   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
00049a   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
00049c   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
                                           ;	.line	267; src/picUSB.c	for (i=0;i<bufferSize;i++)
00049e   6a02     clrf    0x2, 0           	CLRF	r0x02
0004a0   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           _00238_DS_:
0004a2   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0004a4   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
0004a6   e102     bnz     0x4ac            	BNZ	_00253_DS_
0004a8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0004aa   5c02     subwf   0x2, 0, 0        	SUBWF	r0x02, W
                                           _00253_DS_:
0004ac   e22c     bc      0x506            	BC	_00242_DS_
                                           ;	.line	268; src/picUSB.c	*inPtr++ = *outPtr++;
0004ae   c4c3     movff   0x4c3, 0x4       	MOVFF	_inPtr, r0x04
0004b0   f004
0004b2   c4c4     movff   0x4c4, 0x5       	MOVFF	(_inPtr + 1), r0x05
0004b4   f005
0004b6   c4c5     movff   0x4c5, 0x6       	MOVFF	(_inPtr + 2), r0x06
0004b8   f006
0004ba   c4c0     movff   0x4c0, 0x7       	MOVFF	_outPtr, r0x07
0004bc   f007
0004be   c4c1     movff   0x4c1, 0x8       	MOVFF	(_outPtr + 1), r0x08
0004c0   f008
0004c2   c4c2     movff   0x4c2, 0x9       	MOVFF	(_outPtr + 2), r0x09
0004c4   f009
0004c6   c007     movff   0x7, 0xfe9       	MOVFF	r0x07, FSR0L
0004c8   ffe9
0004ca   c008     movff   0x8, 0xff3       	MOVFF	r0x08, PRODL
0004cc   fff3
0004ce   5009     movf    0x9, 0, 0        	MOVF	r0x09, W
0004d0   ec16     call    0xa2c, 0         	CALL	__gptrget1
0004d2   f005
0004d4   6e07     movwf   0x7, 0           	MOVWF	r0x07
0004d6   0104     movlb   0x4              	BANKSEL	_outPtr
0004d8   2bc0     incf    0xc0, 0x1, 0x1   	INCF	_outPtr, F, B
0004da   e303     bnc     0x4e2            	BNC	_00254_DS_
                                           ; removed redundant BANKSEL
0004dc   3fc1     incfsz  0xc1, 0x1, 0x1   	INCFSZ	(_outPtr + 1), F, B
0004de   d001     bra     0x4e2            	BRA	_10413_DS_
                                           ; removed redundant BANKSEL
0004e0   2bc2     incf    0xc2, 0x1, 0x1   	INCF	(_outPtr + 2), F, B
                                           _10413_DS_:
                                           _00254_DS_:
0004e2   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
0004e4   ffe5
0004e6   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
0004e8   ffe9
0004ea   c005     movff   0x5, 0xff3       	MOVFF	r0x05, PRODL
0004ec   fff3
0004ee   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0004f0   ec5d     call    0xaba, 0         	CALL	__gptrput1
0004f2   f005
0004f4   0104     movlb   0x4              	BANKSEL	_inPtr
0004f6   2bc3     incf    0xc3, 0x1, 0x1   	INCF	_inPtr, F, B
0004f8   e303     bnc     0x500            	BNC	_00255_DS_
                                           ; removed redundant BANKSEL
0004fa   3fc4     incfsz  0xc4, 0x1, 0x1   	INCFSZ	(_inPtr + 1), F, B
0004fc   d001     bra     0x500            	BRA	_20414_DS_
                                           ; removed redundant BANKSEL
0004fe   2bc5     incf    0xc5, 0x1, 0x1   	INCF	(_inPtr + 2), F, B
                                           _20414_DS_:
                                           _00255_DS_:
                                           ;	.line	267; src/picUSB.c	for (i=0;i<bufferSize;i++)
000500   4a02     infsnz  0x2, 0x1, 0      	INFSNZ	r0x02, F
000502   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
000504   d7ce     bra     0x4a2            	BRA	_00238_DS_
                                           _00242_DS_:
000506   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
000508   f009
00050a   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
00050c   f008
00050e   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
000510   f007
000512   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000514   f006
000516   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000518   f005
00051a   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
00051c   f004
00051e   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000520   f003
000522   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000524   f002
000526   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000528   f001
00052a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00052c   f000
00052e   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000530   ffd9
000532   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__InDataStage	code
                                           _InDataStage:
                                           ;	.line	222; src/picUSB.c	void InDataStage(unsigned char ep)
00023e   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000240   ffe5
000242   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000244   ffd9
000246   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000248   ffe5
00024a   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00024c   ffe5
00024e   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000250   ffe5
000252   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000254   ffe5
000256   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000258   ffe5
00025a   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
00025c   ffe5
00025e   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000260   ffe5
000262   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000264   ffe5
000266   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
000268   ffe5
00026a   0e02     movlw   0x2              	MOVLW	0x02
00026c   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00026e   f000
                                           ;	.line	228; src/picUSB.c	if(wCount < EP0_BUFFER_SIZE)
000270   0e00     movlw   0                	MOVLW	0x00
000272   0104     movlb   0x4              	BANKSEL	(_wCount + 1)
000274   5dc7     subwf   0xc7, 0, 0x1     	SUBWF	(_wCount + 1), W, B
000276   e102     bnz     0x27c            	BNZ	_00225_DS_
000278   0e40     movlw   0x40             	MOVLW	0x40
                                           ; removed redundant BANKSEL
00027a   5dc6     subwf   0xc6, 0, 0x1     	SUBWF	_wCount, W, B
                                           _00225_DS_:
00027c   e205     bc      0x288            	BC	_00207_DS_
                                           ;	.line	229; src/picUSB.c	bufferSize = wCount;
00027e   c4c6     movff   0x4c6, 0x1       	MOVFF	_wCount, r0x01
000280   f001
000282   c4c7     movff   0x4c7, 0x2       	MOVFF	(_wCount + 1), r0x02
000284   f002
000286   d003     bra     0x28e            	BRA	_00208_DS_
                                           _00207_DS_:
                                           ;	.line	231; src/picUSB.c	bufferSize = EP0_BUFFER_SIZE;
000288   0e40     movlw   0x40             	MOVLW	0x40
00028a   6e01     movwf   0x1, 0           	MOVWF	r0x01
00028c   6a02     clrf    0x2, 0           	CLRF	r0x02
                                           _00208_DS_:
                                           ;	.line	235; src/picUSB.c	EP_IN_BD(ep).Stat.uc &= ~(BDS_BC8 | BDS_BC9);
00028e   4400     rlncf   0, 0, 0          	RLNCF	r0x00, W
000290   0bfe     andlw   0xfe             	ANDLW	0xfe
000292   6e03     movwf   0x3, 0           	MOVWF	r0x03
000294   2803     incf    0x3, 0, 0        	INCF	r0x03, W
                                           ; #	MOVWF	r0x00
                                           ; #;;multiply lit val:0x04 by variable r0x00 and store in r0x00
                                           ; #	MOVF	r0x00, W
000296   0d04     mullw   0x4              	MULLW	0x04
000298   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
00029a   6e03     movwf   0x3, 0           	MOVWF	r0x03
00029c   cff3     movff   0xff3, 0         	MOVFF	PRODL, r0x00
00029e   f000
0002a0   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0002a2   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0002a4   6e04     movwf   0x4, 0           	MOVWF	r0x04
0002a6   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0002a8   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
0002aa   6e05     movwf   0x5, 0           	MOVWF	r0x05
0002ac   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0002ae   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0002b0   6e06     movwf   0x6, 0           	MOVWF	r0x06
0002b2   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0002b4   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
0002b6   6e07     movwf   0x7, 0           	MOVWF	r0x07
0002b8   c006     movff   0x6, 0xfe9       	MOVFF	r0x06, FSR0L
0002ba   ffe9
0002bc   c007     movff   0x7, 0xfea       	MOVFF	r0x07, FSR0H
0002be   ffea
0002c0   cfef     movff   0xfef, 0x6       	MOVFF	INDF0, r0x06
0002c2   f006
0002c4   0efc     movlw   0xfc             	MOVLW	0xfc
0002c6   1606     andwf   0x6, 0x1, 0      	ANDWF	r0x06, F
0002c8   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
0002ca   ffe9
0002cc   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
0002ce   ffea
0002d0   c006     movff   0x6, 0xfef       	MOVFF	r0x06, INDF0
0002d2   ffef
                                           ;	.line	236; src/picUSB.c	EP_IN_BD(ep).Stat.uc |= (byte)((bufferSize & 0x0300) >> 8);
0002d4   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0002d6   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0002d8   6e04     movwf   0x4, 0           	MOVWF	r0x04
0002da   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0002dc   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
0002de   6e05     movwf   0x5, 0           	MOVWF	r0x05
0002e0   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
0002e2   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0002e4   6e06     movwf   0x6, 0           	MOVWF	r0x06
0002e6   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
0002e8   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
0002ea   6e07     movwf   0x7, 0           	MOVWF	r0x07
0002ec   c006     movff   0x6, 0xfe9       	MOVFF	r0x06, FSR0L
0002ee   ffe9
0002f0   c007     movff   0x7, 0xfea       	MOVFF	r0x07, FSR0H
0002f2   ffea
0002f4   cfef     movff   0xfef, 0x6       	MOVFF	INDF0, r0x06
0002f6   f006
0002f8   0e03     movlw   0x3              	MOVLW	0x03
0002fa   1402     andwf   0x2, 0, 0        	ANDWF	r0x02, W
                                           ; #	MOVWF	r0x08
                                           ; #	MOVF	r0x08, W
0002fc   1206     iorwf   0x6, 0x1, 0      	IORWF	r0x06, F
0002fe   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000300   ffe9
000302   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
000304   ffea
000306   c006     movff   0x6, 0xfef       	MOVFF	r0x06, INDF0
000308   ffef
                                           ;	.line	237; src/picUSB.c	EP_IN_BD(ep).Cnt = (byte)(bufferSize & 0xFF);
00030a   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
00030c   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
00030e   6e04     movwf   0x4, 0           	MOVWF	r0x04
000310   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000312   2003     addwfc  0x3, 0, 0        	ADDWFC	r0x03, W
000314   6e05     movwf   0x5, 0           	MOVWF	r0x05
000316   4a04     infsnz  0x4, 0x1, 0      	INFSNZ	r0x04, F
000318   2a05     incf    0x5, 0x1, 0      	INCF	r0x05, F
00031a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00031c   6e06     movwf   0x6, 0           	MOVWF	r0x06
00031e   c004     movff   0x4, 0xfe9       	MOVFF	r0x04, FSR0L
000320   ffe9
000322   c005     movff   0x5, 0xfea       	MOVFF	r0x05, FSR0H
000324   ffea
000326   c006     movff   0x6, 0xfef       	MOVFF	r0x06, INDF0
000328   ffef
                                           ;	.line	238; src/picUSB.c	EP_IN_BD(ep).ADDR = PTR16(&controlTransferBuffer);
00032a   0e00     movlw   0                	MOVLW	LOW(_ep_bdt)
00032c   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
00032e   0e04     movlw   0x4              	MOVLW	HIGH(_ep_bdt)
000330   2203     addwfc  0x3, 0x1, 0      	ADDWFC	r0x03, F
000332   0e02     movlw   0x2              	MOVLW	0x02
000334   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
000336   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000338   2a03     incf    0x3, 0x1, 0      	INCF	r0x03, F
00033a   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
00033c   6e04     movwf   0x4, 0           	MOVWF	r0x04
00033e   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
000340   6e05     movwf   0x5, 0           	MOVWF	r0x05
000342   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
000344   ffe9
000346   c003     movff   0x3, 0xfea       	MOVFF	r0x03, FSR0H
000348   ffea
00034a   c004     movff   0x4, 0xfee       	MOVFF	r0x04, POSTINC0
00034c   ffee
00034e   c005     movff   0x5, 0xfef       	MOVFF	r0x05, INDF0
000350   ffef
                                           ;	.line	243; src/picUSB.c	wCount = wCount - bufferSize;
000352   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000354   0104     movlb   0x4              	BANKSEL	_wCount
000356   5fc6     subwf   0xc6, 0x1, 0x1   	SUBWF	_wCount, F, B
000358   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
00035a   5bc7     subwfb  0xc7, 0x1, 0x1   	SUBWFB	(_wCount + 1), F, B
                                           ;	.line	246; src/picUSB.c	inPtr = (byte *)&controlTransferBuffer;
00035c   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
00035e   0104     movlb   0x4              	BANKSEL	(_inPtr + 1)
000360   6fc4     movwf   0xc4, 0x1        	MOVWF	(_inPtr + 1), B
000362   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
000364   6fc3     movwf   0xc3, 0x1        	MOVWF	_inPtr, B
000366   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
000368   6fc5     movwf   0xc5, 0x1        	MOVWF	(_inPtr + 2), B
                                           ;	.line	248; src/picUSB.c	for (i=0;i<bufferSize;i++)
00036a   6a00     clrf    0, 0             	CLRF	r0x00
                                           _00209_DS_:
00036c   c000     movff   0, 0x3           	MOVFF	r0x00, r0x03
00036e   f003
000370   6a04     clrf    0x4, 0           	CLRF	r0x04
000372   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000374   5c04     subwf   0x4, 0, 0        	SUBWF	r0x04, W
000376   e102     bnz     0x37c            	BNZ	_00231_DS_
000378   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00037a   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
                                           _00231_DS_:
00037c   e22b     bc      0x3d4            	BC	_00213_DS_
                                           ;	.line	249; src/picUSB.c	*inPtr++ = *outPtr++;
00037e   c4c3     movff   0x4c3, 0x3       	MOVFF	_inPtr, r0x03
000380   f003
000382   c4c4     movff   0x4c4, 0x4       	MOVFF	(_inPtr + 1), r0x04
000384   f004
000386   c4c5     movff   0x4c5, 0x5       	MOVFF	(_inPtr + 2), r0x05
000388   f005
00038a   c4c0     movff   0x4c0, 0x6       	MOVFF	_outPtr, r0x06
00038c   f006
00038e   c4c1     movff   0x4c1, 0x7       	MOVFF	(_outPtr + 1), r0x07
000390   f007
000392   c4c2     movff   0x4c2, 0x8       	MOVFF	(_outPtr + 2), r0x08
000394   f008
000396   c006     movff   0x6, 0xfe9       	MOVFF	r0x06, FSR0L
000398   ffe9
00039a   c007     movff   0x7, 0xff3       	MOVFF	r0x07, PRODL
00039c   fff3
00039e   5008     movf    0x8, 0, 0        	MOVF	r0x08, W
0003a0   ec16     call    0xa2c, 0         	CALL	__gptrget1
0003a2   f005
0003a4   6e06     movwf   0x6, 0           	MOVWF	r0x06
0003a6   0104     movlb   0x4              	BANKSEL	_outPtr
0003a8   2bc0     incf    0xc0, 0x1, 0x1   	INCF	_outPtr, F, B
0003aa   e303     bnc     0x3b2            	BNC	_00232_DS_
                                           ; removed redundant BANKSEL
0003ac   3fc1     incfsz  0xc1, 0x1, 0x1   	INCFSZ	(_outPtr + 1), F, B
0003ae   d001     bra     0x3b2            	BRA	_30415_DS_
                                           ; removed redundant BANKSEL
0003b0   2bc2     incf    0xc2, 0x1, 0x1   	INCF	(_outPtr + 2), F, B
                                           _30415_DS_:
                                           _00232_DS_:
0003b2   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0003b4   ffe5
0003b6   c003     movff   0x3, 0xfe9       	MOVFF	r0x03, FSR0L
0003b8   ffe9
0003ba   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0003bc   fff3
0003be   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0003c0   ec5d     call    0xaba, 0         	CALL	__gptrput1
0003c2   f005
0003c4   0104     movlb   0x4              	BANKSEL	_inPtr
0003c6   2bc3     incf    0xc3, 0x1, 0x1   	INCF	_inPtr, F, B
0003c8   e303     bnc     0x3d0            	BNC	_00233_DS_
                                           ; removed redundant BANKSEL
0003ca   3fc4     incfsz  0xc4, 0x1, 0x1   	INCFSZ	(_inPtr + 1), F, B
0003cc   d001     bra     0x3d0            	BRA	_40416_DS_
                                           ; removed redundant BANKSEL
0003ce   2bc5     incf    0xc5, 0x1, 0x1   	INCF	(_inPtr + 2), F, B
                                           _40416_DS_:
                                           _00233_DS_:
                                           ;	.line	248; src/picUSB.c	for (i=0;i<bufferSize;i++)
0003d0   2a00     incf    0, 0x1, 0        	INCF	r0x00, F
0003d2   d7cc     bra     0x36c            	BRA	_00209_DS_
                                           _00213_DS_:
0003d4   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
0003d6   f008
0003d8   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0003da   f007
0003dc   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0003de   f006
0003e0   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0003e2   f005
0003e4   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0003e6   f004
0003e8   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0003ea   f003
0003ec   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0003ee   f002
0003f0   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0003f2   f001
0003f4   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
0003f6   f000
0003f8   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
0003fa   ffd9
0003fc   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__ProcessStandardRequest	code
                                           _ProcessStandardRequest:
00079c   0105     movlb   0x5              	BANKSEL	_SetupPacket
                                           ;	.line	131; src/picUSB.c	if((SetupPacket.bmRequestType & 0x60) != 0x00)
00079e   5100     movf    0, 0, 0x1        	MOVF	_SetupPacket, W, B
                                           ; #	ANDLW	0x60
                                           ; #	BTFSC	STATUS, 2
                                           ; #	GOTO	_00142_DS_
                                           ; #	GOTO	_00163_DS_
                                           ; #	MOVF	(_SetupPacket + 1), W, B
                                           ;	.line	134; src/picUSB.c	return;
0007a0   0b60     andlw   0x60             	ANDLW	0x60
                                           ;	.line	136; src/picUSB.c	if (SetupPacket.bRequest == SET_ADDRESS)
0007a2   a4d8     btfss   0xd8, 0x2, 0     	BTFSS	STATUS, 2
0007a4   d058     bra     0x856            	BRA	_00163_DS_
                                           ; removed redundant BANKSEL
0007a6   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
0007a8   0a05     xorlw   0x5              	XORLW	0x05
0007aa   e109     bnz     0x7be            	BNZ	_00161_DS_
                                           ;	.line	142; src/picUSB.c	requestHandled = 1;
0007ac   0e01     movlw   0x1              	MOVLW	0x01
0007ae   0104     movlb   0x4              	BANKSEL	_requestHandled
0007b0   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	143; src/picUSB.c	deviceState = ADDRESS;
0007b2   0e04     movlw   0x4              	MOVLW	0x04
0007b4   0104     movlb   0x4              	BANKSEL	_deviceState
0007b6   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
                                           ;	.line	144; src/picUSB.c	deviceAddress = SetupPacket.wValue0;
0007b8   c502     movff   0x502, 0x4c9     	MOVFF	(_SetupPacket + 2), _deviceAddress
0007ba   f4c9
0007bc   d04c     bra     0x856            	BRA	_00163_DS_
                                           _00161_DS_:
0007be   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	147; src/picUSB.c	else if (SetupPacket.bRequest == GET_DESCRIPTOR)
0007c0   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
0007c2   0a06     xorlw   0x6              	XORLW	0x06
0007c4   e103     bnz     0x7cc            	BNZ	_00158_DS_
                                           ;	.line	149; src/picUSB.c	GetDescriptor();
0007c6   ec9a     call    0x534, 0         	CALL	_GetDescriptor
0007c8   f002
0007ca   d045     bra     0x856            	BRA	_00163_DS_
                                           _00158_DS_:
0007cc   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	152; src/picUSB.c	else if (SetupPacket.bRequest == SET_CONFIGURATION)
0007ce   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
0007d0   0a09     xorlw   0x9              	XORLW	0x09
0007d2   e112     bnz     0x7f8            	BNZ	_00155_DS_
                                           ;	.line	154; src/picUSB.c	requestHandled = 1;
0007d4   0e01     movlw   0x1              	MOVLW	0x01
0007d6   0104     movlb   0x4              	BANKSEL	_requestHandled
0007d8   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	155; src/picUSB.c	usb_configure_endpoints();
0007da   ec37     call    0xa6e, 0         	CALL	_usb_configure_endpoints
0007dc   f005
                                           ;	.line	156; src/picUSB.c	currentConfiguration = SetupPacket.wValue0;
0007de   c502     movff   0x502, 0x4cc     	MOVFF	(_SetupPacket + 2), _currentConfiguration
0007e0   f4cc
0007e2   0104     movlb   0x4              	BANKSEL	_currentConfiguration
                                           ;	.line	159; src/picUSB.c	if (currentConfiguration == 0)
0007e4   51cc     movf    0xcc, 0, 0x1     	MOVF	_currentConfiguration, W, B
0007e6   e104     bnz     0x7f0            	BNZ	_00144_DS_
                                           ;	.line	162; src/picUSB.c	deviceState = ADDRESS;
0007e8   0e04     movlw   0x4              	MOVLW	0x04
0007ea   0104     movlb   0x4              	BANKSEL	_deviceState
0007ec   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
0007ee   d033     bra     0x856            	BRA	_00163_DS_
                                           _00144_DS_:
                                           ;	.line	165; src/picUSB.c	deviceState = CONFIGURED;
0007f0   0e05     movlw   0x5              	MOVLW	0x05
0007f2   0104     movlb   0x4              	BANKSEL	_deviceState
0007f4   6fcb     movwf   0xcb, 0x1        	MOVWF	_deviceState, B
0007f6   d02f     bra     0x856            	BRA	_00163_DS_
                                           _00155_DS_:
0007f8   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	172; src/picUSB.c	else if (SetupPacket.bRequest == GET_CONFIGURATION)
0007fa   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
0007fc   0a08     xorlw   0x8              	XORLW	0x08
0007fe   e10f     bnz     0x81e            	BNZ	_00152_DS_
                                           ;	.line	174; src/picUSB.c	requestHandled = 1;
000800   0e01     movlw   0x1              	MOVLW	0x01
000802   0104     movlb   0x4              	BANKSEL	_requestHandled
000804   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	175; src/picUSB.c	outPtr = (byte*)&currentConfiguration;
000806   0e04     movlw   0x4              	MOVLW	HIGH(_currentConfiguration)
000808   0104     movlb   0x4              	BANKSEL	(_outPtr + 1)
00080a   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
00080c   0ecc     movlw   0xcc             	MOVLW	LOW(_currentConfiguration)
                                           ; removed redundant BANKSEL
00080e   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
000810   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
000812   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
                                           ;	.line	176; src/picUSB.c	wCount = 1;
000814   0e01     movlw   0x1              	MOVLW	0x01
000816   0104     movlb   0x4              	BANKSEL	_wCount
000818   6fc6     movwf   0xc6, 0x1        	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
00081a   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
00081c   d01c     bra     0x856            	BRA	_00163_DS_
                                           _00152_DS_:
00081e   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	191; src/picUSB.c	else if (SetupPacket.bRequest == GET_INTERFACE)
000820   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
000822   0a0a     xorlw   0xa              	XORLW	0x0a
000824   e111     bnz     0x848            	BNZ	_00149_DS_
                                           ;	.line	195; src/picUSB.c	requestHandled = 1;
000826   0e01     movlw   0x1              	MOVLW	0x01
000828   0104     movlb   0x4              	BANKSEL	_requestHandled
00082a   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
00082c   0105     movlb   0x5              	BANKSEL	_controlTransferBuffer
                                           ;	.line	196; src/picUSB.c	controlTransferBuffer[0] = 0;
00082e   6b40     clrf    0x40, 0x1        	CLRF	_controlTransferBuffer, B
                                           ;	.line	197; src/picUSB.c	outPtr = (byte *)&controlTransferBuffer;
000830   0e05     movlw   0x5              	MOVLW	HIGH(_controlTransferBuffer)
000832   0104     movlb   0x4              	BANKSEL	(_outPtr + 1)
000834   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
000836   0e40     movlw   0x40             	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
000838   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
00083a   0e80     movlw   0x80             	MOVLW	0x80
                                           ; removed redundant BANKSEL
00083c   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
                                           ;	.line	198; src/picUSB.c	wCount = 1;
00083e   0e01     movlw   0x1              	MOVLW	0x01
000840   0104     movlb   0x4              	BANKSEL	_wCount
000842   6fc6     movwf   0xc6, 0x1        	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
000844   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
000846   d007     bra     0x856            	BRA	_00163_DS_
                                           _00149_DS_:
000848   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	201; src/picUSB.c	else if (SetupPacket.bRequest == SET_INTERFACE)
00084a   5101     movf    0x1, 0, 0x1      	MOVF	(_SetupPacket + 1), W, B
00084c   0a0b     xorlw   0xb              	XORLW	0x0b
00084e   e103     bnz     0x856            	BNZ	_00163_DS_
                                           ;	.line	204; src/picUSB.c	requestHandled = 1;
000850   0e01     movlw   0x1              	MOVLW	0x01
000852   0104     movlb   0x4              	BANKSEL	_requestHandled
000854   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           _00163_DS_:
000856   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_picUSB__GetDescriptor	code
                                           _GetDescriptor:
                                           ;	.line	85; src/picUSB.c	static void GetDescriptor()
000534   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000536   ffe5
000538   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
00053a   ffe5
00053c   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00053e   ffe5
000540   0105     movlb   0x5              	BANKSEL	_SetupPacket
                                           ;	.line	87; src/picUSB.c	if(SetupPacket.bmRequestType == 0x80)
000542   5100     movf    0, 0, 0x1        	MOVF	_SetupPacket, W, B
000544   0a80     xorlw   0x80             	XORLW	0x80
000546   e001     bz      0x54a            	BZ	_00130_DS_
000548   d064     bra     0x612            	BRA	_00115_DS_
                                           _00130_DS_:
00054a   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	92; src/picUSB.c	if (SetupPacket.wValue1 == DEVICE_DESCRIPTOR)
00054c   5103     movf    0x3, 0, 0x1      	MOVF	(_SetupPacket + 3), W, B
00054e   0a01     xorlw   0x1              	XORLW	0x01
000550   e10f     bnz     0x570            	BNZ	_00111_DS_
                                           ;	.line	94; src/picUSB.c	requestHandled = 1;
000552   0e01     movlw   0x1              	MOVLW	0x01
000554   0104     movlb   0x4              	BANKSEL	_requestHandled
000556   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	95; src/picUSB.c	outPtr = (byte *)&device_descriptor;
000558   0e00     movlw   0                	MOVLW	UPPER(_device_descriptor)
00055a   0104     movlb   0x4              	BANKSEL	(_outPtr + 2)
00055c   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
00055e   0e09     movlw   0x9              	MOVLW	HIGH(_device_descriptor)
                                           ; removed redundant BANKSEL
000560   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
000562   0e0a     movlw   0xa              	MOVLW	LOW(_device_descriptor)
                                           ; removed redundant BANKSEL
000564   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
                                           ;	.line	96; src/picUSB.c	wCount = sizeof(USB_Device_Descriptor);
000566   0e12     movlw   0x12             	MOVLW	0x12
000568   0104     movlb   0x4              	BANKSEL	_wCount
00056a   6fc6     movwf   0xc6, 0x1        	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
00056c   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
00056e   d051     bra     0x612            	BRA	_00115_DS_
                                           _00111_DS_:
000570   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	99; src/picUSB.c	else if (SetupPacket.wValue1 == CONFIGURATION_DESCRIPTOR)
000572   5103     movf    0x3, 0, 0x1      	MOVF	(_SetupPacket + 3), W, B
000574   0a02     xorlw   0x2              	XORLW	0x02
000576   e117     bnz     0x5a6            	BNZ	_00108_DS_
                                           ;	.line	101; src/picUSB.c	requestHandled = 1;
000578   0e01     movlw   0x1              	MOVLW	0x01
00057a   0104     movlb   0x4              	BANKSEL	_requestHandled
00057c   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           ;	.line	102; src/picUSB.c	outPtr = (byte *)&configuration_descriptor;
00057e   0e00     movlw   0                	MOVLW	UPPER(_configuration_descriptor)
000580   0104     movlb   0x4              	BANKSEL	(_outPtr + 2)
000582   6fc2     movwf   0xc2, 0x1        	MOVWF	(_outPtr + 2), B
000584   0e09     movlw   0x9              	MOVLW	HIGH(_configuration_descriptor)
                                           ; removed redundant BANKSEL
000586   6fc1     movwf   0xc1, 0x1        	MOVWF	(_outPtr + 1), B
000588   0e1c     movlw   0x1c             	MOVLW	LOW(_configuration_descriptor)
                                           ; removed redundant BANKSEL
00058a   6fc0     movwf   0xc0, 0x1        	MOVWF	_outPtr, B
                                           ;	.line	103; src/picUSB.c	wCount = configuration_descriptor.Header.wTotalLength;
00058c   0e1e     movlw   0x1e             	MOVLW	LOW(_configuration_descriptor + 2)
00058e   6ef6     movwf   0xf6, 0          	MOVWF	TBLPTRL
000590   0e09     movlw   0x9              	MOVLW	HIGH(_configuration_descriptor + 2)
000592   6ef7     movwf   0xf7, 0          	MOVWF	TBLPTRH
000594   0e00     movlw   0                	MOVLW	UPPER(_configuration_descriptor + 2)
000596   6ef8     movwf   0xf8, 0          	MOVWF	TBLPTRU
000598   0009     tblrd   *+               	TBLRD*+	
00059a   cff5     movff   0xff5, 0x4c6     	MOVFF	TABLAT, _wCount
00059c   f4c6
00059e   0009     tblrd   *+               	TBLRD*+	
0005a0   cff5     movff   0xff5, 0x4c7     	MOVFF	TABLAT, (_wCount + 1)
0005a2   f4c7
0005a4   d036     bra     0x612            	BRA	_00115_DS_
                                           _00108_DS_:
0005a6   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	106; src/picUSB.c	else if (SetupPacket.wValue1 == STRING_DESCRIPTOR)
0005a8   5103     movf    0x3, 0, 0x1      	MOVF	(_SetupPacket + 3), W, B
0005aa   0a03     xorlw   0x3              	XORLW	0x03
0005ac   e132     bnz     0x612            	BNZ	_00115_DS_
                                           ;	.line	108; src/picUSB.c	requestHandled = 1;
0005ae   0e01     movlw   0x1              	MOVLW	0x01
0005b0   0104     movlb   0x4              	BANKSEL	_requestHandled
0005b2   6fca     movwf   0xca, 0x1        	MOVWF	_requestHandled, B
                                           ; ;multiply lit val:0x03 by variable (_SetupPacket + 2) and store in r0x00
0005b4   0105     movlb   0x5              	BANKSEL	(_SetupPacket + 2)
                                           ;	.line	110; src/picUSB.c	outPtr = string_descriptor[SetupPacket.wValue0];
0005b6   5102     movf    0x2, 0, 0x1      	MOVF	(_SetupPacket + 2), W, B
0005b8   0d03     mullw   0x3              	MULLW	0x03
0005ba   50f4     movf    0xf4, 0, 0       	MOVF	PRODH, W
0005bc   6e01     movwf   0x1, 0           	MOVWF	r0x01
0005be   cff3     movff   0xff3, 0         	MOVFF	PRODL, r0x00
0005c0   f000
0005c2   6a02     clrf    0x2, 0           	CLRF	r0x02
0005c4   0e68     movlw   0x68             	MOVLW	LOW(_string_descriptor)
0005c6   2600     addwf   0, 0x1, 0        	ADDWF	r0x00, F
0005c8   0e09     movlw   0x9              	MOVLW	HIGH(_string_descriptor)
0005ca   2201     addwfc  0x1, 0x1, 0      	ADDWFC	r0x01, F
0005cc   0e00     movlw   0                	MOVLW	UPPER(_string_descriptor)
0005ce   2202     addwfc  0x2, 0x1, 0      	ADDWFC	r0x02, F
0005d0   c000     movff   0, 0xff6         	MOVFF	r0x00, TBLPTRL
0005d2   fff6
0005d4   c001     movff   0x1, 0xff7       	MOVFF	r0x01, TBLPTRH
0005d6   fff7
0005d8   c002     movff   0x2, 0xff8       	MOVFF	r0x02, TBLPTRU
0005da   fff8
0005dc   0009     tblrd   *+               	TBLRD*+	
0005de   cff5     movff   0xff5, 0x4c0     	MOVFF	TABLAT, _outPtr
0005e0   f4c0
0005e2   0009     tblrd   *+               	TBLRD*+	
0005e4   cff5     movff   0xff5, 0x4c1     	MOVFF	TABLAT, (_outPtr + 1)
0005e6   f4c1
0005e8   0009     tblrd   *+               	TBLRD*+	
0005ea   cff5     movff   0xff5, 0x4c2     	MOVFF	TABLAT, (_outPtr + 2)
0005ec   f4c2
                                           ;	.line	111; src/picUSB.c	wCount = *outPtr;
0005ee   c4c0     movff   0x4c0, 0         	MOVFF	_outPtr, r0x00
0005f0   f000
0005f2   c4c1     movff   0x4c1, 0x1       	MOVFF	(_outPtr + 1), r0x01
0005f4   f001
0005f6   c4c2     movff   0x4c2, 0x2       	MOVFF	(_outPtr + 2), r0x02
0005f8   f002
0005fa   c000     movff   0, 0xfe9         	MOVFF	r0x00, FSR0L
0005fc   ffe9
0005fe   c001     movff   0x1, 0xff3       	MOVFF	r0x01, PRODL
000600   fff3
000602   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000604   ec16     call    0xa2c, 0         	CALL	__gptrget1
000606   f005
000608   6e00     movwf   0, 0             	MOVWF	r0x00
00060a   c000     movff   0, 0x4c6         	MOVFF	r0x00, _wCount
00060c   f4c6
00060e   0104     movlb   0x4              	BANKSEL	(_wCount + 1)
000610   6bc7     clrf    0xc7, 0x1        	CLRF	(_wCount + 1), B
                                           _00115_DS_:
000612   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000614   f002
000616   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000618   f001
00061a   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
00061c   f000
00061e   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1782 (0x06f6) bytes ( 1.36%)
                                           ;           	  891 (0x037b) words
                                           ; udata size:	  334 (0x014e) bytes (18.64%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
